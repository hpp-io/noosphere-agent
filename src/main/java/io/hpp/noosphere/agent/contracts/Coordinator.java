package io.hpp.noosphere.agent.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint72;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.10.3.
 */
@SuppressWarnings("rawtypes")
public class Coordinator extends Contract {

    public static final String BINARY =
        "60a0346200016957601f6200358938819003918201601f19168301916001600160401b038311848410176200016d57808492604094855283398101031262000169576200005a6020620000528362000181565b920162000181565b6001600160a01b039182168015620001575760805260016005551680156200011257600680546001600160a01b0319169190911790556040516133f2908162000197823960805181818161013b015281816105b3015281816110020152818161106e0152818161117701528181611273015281816113030152818161145e015281816114d70152818161174c01528181611933015281816119fb015281816121a6015281816122e10152818161236e01526127f30152f35b60405162461bcd60e51b815260206004820152601960248201527f43616e6e6f742073657420636c69656e7420746f207a65726f000000000000006044820152606490fd5b604051632530e88560e11b8152600490fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b0382168203620001695756fe6080806040526004361015610012575f80fd5b5f905f3560e01c908163109e94cf14612b1a57508063181f5a7714612a9b578063298f7bdc14612a4e578063368bf46414612a065780633c43a84d146117c957806341e46a45146117a75780635012554614611702578063576edca3146116e85780635cf3296f14610dcd57806379ba509714610cc3578063a5a4103114610c47578063bc85694f14610bfb578063c34cf5c714610b3a578063c3f909d414610a5b578063c7fb32fb146104f7578063f2fde38b146103df5763f5e5a31a146100d9575f80fd5b346102de5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102de57610110612e0b565b90610119612cc4565b91610122612d4b565b9073ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000169063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818816019081116103b2576040517f4720845700000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8516600482015263ffffffff91909116602482015294958695602091908281604481885afa801561037257889061037d575b600191501515146101fd578680f35b6040517f1cfe615c00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8616600482015263ffffffff91909116602482015261018080826044818b895af1801561037257610336575b5050600154606095816102f0575b50508554901c1690803b156102ec57818580946102b2604051978896879586947f1d01316400000000000000000000000000000000000000000000000000000000865260048601613220565b03925af180156102e1576102ca575b80808080808680f35b6102d390612ba1565b6102de57805f6102c1565b80fd5b6040513d84823e3d90fd5b8480fd5b9095506102fb613123565b958360025416846040519361030f85612b68565b16835283830152604082015261032486613174565b5261032e85613174565b505f80610266565b803d821161036b575b6103498184612c27565b82019082820312610367578261035f9201612ec1565b505f80610258565b8780fd5b503d61033f565b6040513d8a823e3d90fd5b508281813d83116103ab575b6103938183612c27565b81010312610367576103a6600191612e73565b6101ee565b503d610389565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b50346102de5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102de5760043573ffffffffffffffffffffffffffffffffffffffff8082168092036104f357610439612f8a565b33821461049557817fffffffffffffffffffffffff00000000000000000000000000000000000000006007541617600755600654167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12788380a380f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152fd5b5f80fd5b50346102de576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102de5760243567ffffffffffffffff811681036104f3576064359063ffffffff821682036104f35760843561ffff811681036104f35760a4359283151584036104f35760c4359373ffffffffffffffffffffffffffffffffffffffff9283861686036104f357610104359184831683036104f357610124359385851685036104f3576105af612e22565b50857f0000000000000000000000000000000000000000000000000000000000000000163303610a31576105e1612e22565b508585166108b1575b9261ffff67ffffffffffffffff989387959363ffffffff87958b60206040519e8f9261061584612bd1565b6004358452169101528c60406044359101521660608c0152151560808b01521660a08901521660c087015260e43560e08701521661010085015216610120830152306101408301526040519260406020850161070b81868051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b6101609586815261071b81612c0a565b519020916004358152600360205220556040516107d281848051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b67ffffffffffffffff6044359216907fc2f86b99a2f1c678a8932761b141b6656cc75008064c693d41867a9b2ccc7c878560043592a46108af60405180928051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565bf35b9691926040517f1da664e800000000000000000000000000000000000000000000000000000000815286841660048201526020816024818a8a165afa9081156109b5578a916109f3575b50156109c0576040517f6fcca69b00000000000000000000000000000000000000000000000000000000815286841660048201526020816024818a8a165afa9081156109b5578a91610983575b5060e43510610959579291966105ea565b60046040517f1c22661b000000000000000000000000000000000000000000000000000000008152fd5b90506020813d6020116109ad575b8161099e60209383612c27565b810103126104f357515f610948565b3d9150610991565b6040513d8c823e3d90fd5b60248387604051917f1fefad7d000000000000000000000000000000000000000000000000000000008352166004820152fd5b90506020813d602011610a29575b81610a0e60209383612c27565b81010312610a2557610a1f90612e73565b5f6108fb565b8980fd5b3d9150610a01565b60046040517fc41a5b09000000000000000000000000000000000000000000000000000000008152fd5b50346102de57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102de578060a0916080604051610a9c81612bb5565b828152826020820152826040820152826060820152015260405190610ac082612bb5565b5463ffffffff81169182815273ffffffffffffffffffffffffffffffffffffffff916020820190838160201c16825261ffff9081604085019160c01c168152846001549360608601948552608082600254169601958652604051978852511660208701525116604085015251606084015251166080820152f35b50346102de5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102de57604061010091600435815260046020522067ffffffffffffffff8154169060018101549073ffffffffffffffffffffffffffffffffffffffff8060028301541690806003840154166004840154916005850154169263ffffffff600760068701549601541695604051978852602088015260408701526060860152608085015260a084015260c083015260e0820152f35b50346102de5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102de5761ffff6040602092600435815260088452205416604051908152f35b50346102de57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102de575460c01c61ffff1668ffffffffffffffffff8111610c9957602090604051908152f35b60046040517fb8e5ea4b000000000000000000000000000000000000000000000000000000008152fd5b50346102de57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102de5760075473ffffffffffffffffffffffffffffffffffffffff8082163303610d6f57600654917fffffffffffffffffffffffff0000000000000000000000000000000000000000903382851617600655166007553391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d7573742062652070726f706f73656420636c69656e740000000000000000006044820152fd5b50346102de5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102de57610e05612e0b565b610e0d612cc4565b90610e16612d4b565b6064351515606435036104f3576040805167ffffffffffffffff84166020820190815263ffffffff86169282019290925273ffffffffffffffffffffffffffffffffffffffff83166060820152610e9881608081015b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282612c27565b5190208085526004602052604085209063ffffffff600760405193610ebc85612b84565b67ffffffffffffffff81541685526001810154602086015273ffffffffffffffffffffffffffffffffffffffff600282015416604086015273ffffffffffffffffffffffffffffffffffffffff60038201541660608601526004810154608086015273ffffffffffffffffffffffffffffffffffffffff60058201541660a0860152600681015460c086015201541660e083015285526004602052846007604082208281555f60018201558260028201558260038201555f60048201558260058201555f6006820155015563ffffffff60e082015116156116be5763ffffffff60e08201511663ffffffff4216101567ffffffffffffffff82511690604051917fa50366b800000000000000000000000000000000000000000000000000000000835260048301526101808260248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9182156116b3578792611570575b5073ffffffffffffffffffffffffffffffffffffffff61012083015116330361154657869273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b156113a7576040517f77bd924f00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff82511660048201526020820151602482015273ffffffffffffffffffffffffffffffffffffffff604083015116604482015273ffffffffffffffffffffffffffffffffffffffff60608301511660648201526080820151608482015273ffffffffffffffffffffffffffffffffffffffff60a08301511660a482015260c082015160c482015263ffffffff60e08301511660e48201528481610104818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af190811561153b578591611527575b50506111b1613123565b9160643590811561151f575b50156113ab578073ffffffffffffffffffffffffffffffffffffffff606067ffffffffffffffff9301511673ffffffffffffffffffffffffffffffffffffffff60a0830151166080830151906040519261121684612b68565b83526020830152604082015261122b84613174565b5261123583613174565b5051169173ffffffffffffffffffffffffffffffffffffffff60608160e084015116920151169273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b156102ec576112e9859360405195869485947f1d0131640000000000000000000000000000000000000000000000000000000086526004860152602485015260448401526080606484015260848301906131be565b03818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156102e157611393575b50505b7f89f6621aaa96daa4351dd7779ceb97eb7a093e09f2a405690d616013513eef3f604067ffffffffffffffff63ffffffff73ffffffffffffffffffffffffffffffffffffffff83519560643515158752336020880152169616941692a480f35b61139c90612ba1565b6113a757835f611330565b8380fd5b9173ffffffffffffffffffffffffffffffffffffffff60e08201511690604073ffffffffffffffffffffffffffffffffffffffff6101008301511691015190604051926113f784612b68565b83526020830152604082015261140c82613174565b5261141681613174565b5067ffffffffffffffff8251169173ffffffffffffffffffffffffffffffffffffffff604081606084015116920151169273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b156102ec576114bd859360405195869485947f1d01316400000000000000000000000000000000000000000000000000000000865260048601613220565b03818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156102e15761150b575b5050611333565b61151490612ba1565b6113a757835f611504565b90505f6111bd565b61153090612ba1565b6113a757835f6111a7565b6040513d87823e3d90fd5b60046040517fb9857aa1000000000000000000000000000000000000000000000000000000008152fd5b909150610180813d610180116116ab575b8161158f6101809383612c27565b810103126116a757604051908161018081011067ffffffffffffffff6101808401111761167a5761018082016040528051825260208101516020830152604081015160408301526115e260608201612ea0565b60608301526115f360808201612e80565b608083015261160460a08201612e80565b60a083015261161560c08201612e80565b60c083015261162660e08201612ea0565b60e0830152610100611639818301612ea0565b9083015261012061164b818301612ea0565b9083015261014061165d818301612e91565b9083015261166f610160809201612e73565b90820152905f611032565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b8680fd5b3d9150611581565b6040513d89823e3d90fd5b60046040517f70eb1be5000000000000000000000000000000000000000000000000000000008152fd5b50346102de576116ff6116fa36612d6e565b613009565b80f35b50346102de5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102de5760043573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163303610a315780825260036020525f60408320557ff903f4774c7bd27355f9d7fcbc382b079b164a697a44ac5d95267a4c3cb3bb228280a280f35b50346102de576116ff6117b936612d6e565b6117c1612f8a565b6116fa612f8a565b50346104f35760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104f35760043563ffffffff811681036104f35760243567ffffffffffffffff81116104f357611829903690600401612cd7565b60443567ffffffffffffffff81116104f357611849903690600401612cd7565b9160643567ffffffffffffffff81116104f35761186a903690600401612cd7565b60843567ffffffffffffffff81116104f35761188a903690600401612cd7565b73ffffffffffffffffffffffffffffffffffffffff60a4351660a435036104f3576002600554146129dc5760026005558051810190610160818303126104f3576020806118d993019101612ec1565b9367ffffffffffffffff60208601511692604051937fc9f90505000000000000000000000000000000000000000000000000000000008552600485015260208460248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa938415612539575f946129a0575b5063ffffffff811663ffffffff851603612969575084515f52600860205261ffff60405f2054169261ffff60a087015116841461293f576040517f439a301200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff60a43516600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115612539575f91612905575b50156128db5785515f52600860205260405f2061ffff60018601167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000825416179055610e6c611ace67ffffffffffffffff602089015116604051928391602083019533918791604091949363ffffffff73ffffffffffffffffffffffffffffffffffffffff9267ffffffffffffffff606087019816865216602085015216910152565b519020805f52600960205260ff60405f2054166128b1575f52600960205260405f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905584515f52600860205261ffff60405f205416907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff60a088015116019461ffff86116125445786515f52600360205260405f2054801561287f576040516020810190611c21828b8051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b6101608152611c2f81612c0a565b5190200361284d5761012087015173ffffffffffffffffffffffffffffffffffffffff16156126bc5760e08701519073ffffffffffffffffffffffffffffffffffffffff6101208901511673ffffffffffffffffffffffffffffffffffffffff6101008a015116604051907f1da664e80000000000000000000000000000000000000000000000000000000082526004820152602081602481855afa908115612539575f91612682575b5015612636575f5490612710611cf661ffff8460c01c16866133a9565b0493848060011b046002148515171561254457611d17908560011b9061339c565b73ffffffffffffffffffffffffffffffffffffffff6101008c015116604051907f6fcca69b0000000000000000000000000000000000000000000000000000000082526004820152602081602481865afa908115612539575f91612604575b50809110610959578a94612710611d9461ffff8660c01c16846133a9565b049073ffffffffffffffffffffffffffffffffffffffff610100611db66130d9565b9801511693828260011b018260011b11612544576004948360209360405192611dde84612b68565b73ffffffffffffffffffffffffffffffffffffffff8a871c1684528584015260011b016040820152611e0f89613174565b52611e1988613174565b50604051948580927f2b1eaf290000000000000000000000000000000000000000000000000000000082525afa928315612539578c905f946125a7575b509073ffffffffffffffffffffffffffffffffffffffff610100611e7d930151169261339c565b9073ffffffffffffffffffffffffffffffffffffffff60405193611ea085612b68565b16835260208301526040820152611eb6846131ae565b52611ec0836131ae565b50612710611eda61ffff60e08c01519360c01c16836133a9565b04808060011b04600214811517156125445773ffffffffffffffffffffffffffffffffffffffff6101208b01511690602073ffffffffffffffffffffffffffffffffffffffff6101008d0151166024604051809581937f6fcca69b00000000000000000000000000000000000000000000000000000000835260048301525afa918215612539575f92612571575b5090611f7a611f7f9260011b8461339c565b61339c565b60208a8101516060808d01516040805167ffffffffffffffff90941694840194855263ffffffff909116908301523390820152919291611fc28160808101610e6c565b5190209067ffffffffffffffff60208c015116928b519062093a80420142116125445773ffffffffffffffffffffffffffffffffffffffff6101008e015116916040519561200f87612b84565b8652602086015233604086015273ffffffffffffffffffffffffffffffffffffffff60a435166060860152608085015260a084015260c083015263ffffffff62093a8042011660e08301525f52600460205260405f209067ffffffffffffffff81511691827fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008254161781556020820151806001830155600282019073ffffffffffffffffffffffffffffffffffffffff6040850151167fffffffffffffffffffffffff0000000000000000000000000000000000000000928184825416179055600384019073ffffffffffffffffffffffffffffffffffffffff6060870151169182858254161790556080860151928360048701556005860173ffffffffffffffffffffffffffffffffffffffff60a089015116809682541617905563ffffffff60e0600760c08a015198896006820155019801511696877fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000082541617905573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b156104f357604051977ff22339510000000000000000000000000000000000000000000000000000000089526004890152602488015260448701526064860152608485015260a484015260c483015260e48201526122c361010482018a8051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b5f81610264818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af1801561253957612512575b5093809392612354896020948c9860405197889687967f1e223a7800000000000000000000000000000000000000000000000000000000885260a4359360048901613281565b03818673ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af18015612507576124d8575b5073ffffffffffffffffffffffffffffffffffffffff610120860151169067ffffffffffffffff6020870151169063ffffffff60608801511692803b156102ec5761243193858094604051968795869485937f6ee6261700000000000000000000000000000000000000000000000000000000855260048501526024840152336044840152608060648401526084830190612c68565b03925af180156102e1576124c4575b505061ffff6001925b1614146124b0575b51808252600860205261ffff604083205416906040519182527f70b14fe3afd588ffa8731df33ed01eae13ff43736d804f96416ef6d59fba228a602073ffffffffffffffffffffffffffffffffffffffff60a4351693a3600160055580f35b8051825260036020525f6040832055612451565b6124cd90612ba1565b6113a757835f612440565b6124f99060203d602011612500575b6124f18183612c27565b810190613269565b505f61239b565b503d6124e7565b6040513d85823e3d90fd5b602092995092612526869594969296612ba1565b612354895f9b945050509293949061230e565b6040513d5f823e3d90fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b91506020823d60201161259f575b8161258c60209383612c27565b810103126104f357905190611f7a611f68565b3d915061257f565b919350506020813d6020116125fc575b816125c460209383612c27565b810103126104f3578b9273ffffffffffffffffffffffffffffffffffffffff6101006125f2611e7d94612ea0565b9592935050611e56565b3d91506125b7565b90506020813d60201161262e575b8161261f60209383612c27565b810103126104f357515f611d76565b3d9150612612565b602473ffffffffffffffffffffffffffffffffffffffff6101008b015116604051907f1fefad7d0000000000000000000000000000000000000000000000000000000082526004820152fd5b90506020813d6020116126b4575b8161269d60209383612c27565b810103126104f3576126ae90612e73565b5f611cd9565b3d9150612690565b9194929060e08701515f548060bf1c906201fffe821661fffe831603612544576020956127d99373ffffffffffffffffffffffffffffffffffffffff61271561271061270d8f9761fffe16856133a9565b04809361339c565b9161271e6130d9565b9461010087019183835116846040519361273785612b68565b8e1c1683528c830152604082015261274e86613174565b5261275885613174565b505116906040519161276983612b68565b73ffffffffffffffffffffffffffffffffffffffff60a435168352898301526040820152612796836131ae565b526127a0826131ae565b50604051998a9687967f1e223a7800000000000000000000000000000000000000000000000000000000885260a4359360048901613281565b03815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af19081156125395760019361ffff9261282e575b50612449565b6128469060203d602011612500576124f18183612c27565b505f612828565b60248751604051907f41dc962e0000000000000000000000000000000000000000000000000000000082526004820152fd5b60248851604051907f41dc962e0000000000000000000000000000000000000000000000000000000082526004820152fd5b60046040517f88a21e4f000000000000000000000000000000000000000000000000000000008152fd5b60046040517f23455ba1000000000000000000000000000000000000000000000000000000008152fd5b90506020813d602011612937575b8161292060209383612c27565b810103126104f35761293190612e73565b5f611a2b565b3d9150612913565b60046040517f2f4ca85b000000000000000000000000000000000000000000000000000000008152fd5b60249063ffffffff604051917f0363c8a6000000000000000000000000000000000000000000000000000000008352166004820152fd5b9093506020813d6020116129d4575b816129bc60209383612c27565b810103126104f3576129cd90612e80565b925f611963565b3d91506129af565b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b346104f35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104f3576004355f526003602052602060405f2054604051908152f35b346104f35760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104f3576004355f526009602052602060ff60405f2054166040519015158152f35b346104f3575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104f357612b16604051612ad881612bee565b601281527f436f6f7264696e61746f725f76312e302e3000000000000000000000000000006020820152604051918291602083526020830190612c68565b0390f35b346104f3575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104f35760209073ffffffffffffffffffffffffffffffffffffffff600654168152f35b6060810190811067ffffffffffffffff82111761167a57604052565b610100810190811067ffffffffffffffff82111761167a57604052565b67ffffffffffffffff811161167a57604052565b60a0810190811067ffffffffffffffff82111761167a57604052565b610160810190811067ffffffffffffffff82111761167a57604052565b6040810190811067ffffffffffffffff82111761167a57604052565b610180810190811067ffffffffffffffff82111761167a57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761167a57604052565b91908251928382525f5b848110612cb05750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f845f6020809697860101520116010190565b602081830181015184830182015201612c72565b6024359063ffffffff821682036104f357565b81601f820112156104f35780359067ffffffffffffffff821161167a5760405192612d2a60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160185612c27565b828452602083830101116104f357815f926020809301838601378301015290565b6044359073ffffffffffffffffffffffffffffffffffffffff821682036104f357565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60a09101126104f357604051612da481612bb5565b60043563ffffffff811681036104f357815273ffffffffffffffffffffffffffffffffffffffff60243581811681036104f357602083015260443561ffff811681036104f3576040830152606435606083015260843590811681036104f357608082015290565b6004359067ffffffffffffffff821682036104f357565b60405190612e2f82612bd1565b5f610140838281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b519081151582036104f357565b519063ffffffff821682036104f357565b519061ffff821682036104f357565b519073ffffffffffffffffffffffffffffffffffffffff821682036104f357565b9190826101609103126104f357604051612eda81612bd1565b809280518252602081015167ffffffffffffffff811681036104f357602083015260408101516040830152612f1160608201612e80565b6060830152612f2260808201612e73565b6080830152612f3360a08201612e91565b60a0830152612f4460c08201612ea0565b60c083015260e081015160e0830152610100612f61818301612ea0565b90830152610120612f73818301612ea0565b90830152612f85610140809201612ea0565b910152565b73ffffffffffffffffffffffffffffffffffffffff600654163303612fab57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c6520627920636c69656e740000000000000000006044820152fd5b608073ffffffffffffffffffffffffffffffffffffffff91613029612f8a565b63ffffffff8151165f549077ffffffffffffffffffffffffffffffffffffffff00000000602084015160201b16907fffffffffffff000000000000000000000000000000000000000000000000000079ffff000000000000000000000000000000000000000000000000604086015160c01b1693161717175f5560608101516001550151167fffffffffffffffffffffffff00000000000000000000000000000000000000006002541617600255565b604090604051916130e983612b68565b60028352825f5b8281106130fc57505050565b602090835161310a81612b68565b5f8152825f818301525f868301528285010152016130f0565b6040906040519161313383612bee565b6001835282915f5b60208082101561316c5783516020929161315482612b68565b5f82525f818301525f8683015282880101520161313b565b505091925050565b8051156131815760200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b8051600110156131815760400190565b9081518082526020808093019301915f5b8281106131dd575050505090565b8351805173ffffffffffffffffffffffffffffffffffffffff908116875281840151168684015260409081015190860152606090940193928101926001016131cf565b9091613266949367ffffffffffffffff60809416835273ffffffffffffffffffffffffffffffffffffffff809216602084015216604082015281606082015201906131be565b90565b908160209103126104f3575160038110156104f35790565b97969473ffffffffffffffffffffffffffffffffffffffff9061ffff6132de6132f8966132d08d60c09a986132c261339a9e99610220808552840190612c68565b916020818403910152612c68565b8d810360408f015290612c68565b941660608b015216608089015287820360a08901526131be565b9401908051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b565b9190820391821161254457565b818102929181159184041417156125445756fea264697066735822122003561aeb6f424c508c20d67fb4c13ff060f4ac7f1ea897ea018b64adb985ec9164736f6c63430008170033";

    public static final String FUNC_ACCEPTOWNERSHIP = "acceptOwnership";

    public static final String FUNC_CANCELREQUEST = "cancelRequest";

    public static final String FUNC_CLIENT = "client";

    public static final String FUNC_GETCONFIG = "getConfig";

    public static final String FUNC_GETPROTOCOLFEE = "getProtocolFee";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_NODERESPONDED = "nodeResponded";

    public static final String FUNC_PREPARENEXTINTERVAL = "prepareNextInterval";

    public static final String FUNC_PROOFREQUESTS = "proofRequests";

    public static final String FUNC_REDUNDANCYCOUNT = "redundancyCount";

    public static final String FUNC_REPORTCOMPUTERESULT = "reportComputeResult";

    public static final String FUNC_REPORTVERIFICATIONRESULT = "reportVerificationResult";

    public static final String FUNC_REQUESTCOMMITMENTS = "requestCommitments";

    public static final String FUNC_STARTREQUEST = "startRequest";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TYPEANDVERSION = "typeAndVersion";

    public static final String FUNC_UPDATECONFIG = "updateConfig";

    public static final Event COMPUTEDELIVERED_EVENT = new Event(
        "ComputeDelivered",
        Arrays.<TypeReference<?>>asList(
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Address>(true) {},
            new TypeReference<Uint16>() {}
        )
    );

    public static final Event OWNERSHIPTRANSFERREQUESTED_EVENT = new Event(
        "OwnershipTransferRequested",
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {})
    );

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event(
        "OwnershipTransferred",
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {})
    );

    public static final Event PROOFVERIFIED_EVENT = new Event(
        "ProofVerified",
        Arrays.<TypeReference<?>>asList(
            new TypeReference<Uint64>(true) {},
            new TypeReference<Uint32>(true) {},
            new TypeReference<Address>(true) {},
            new TypeReference<Bool>() {},
            new TypeReference<Address>() {}
        )
    );

    public static final Event REQUESTCANCELLED_EVENT = new Event(
        "RequestCancelled",
        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {})
    );

    public static final Event REQUESTSTARTED_EVENT = new Event(
        "RequestStarted",
        Arrays.<TypeReference<?>>asList(
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Uint64>(true) {},
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Commitment>() {}
        )
    );

    @Deprecated
    protected Coordinator(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Coordinator(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Coordinator(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        BigInteger gasPrice,
        BigInteger gasLimit
    ) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Coordinator(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        ContractGasProvider contractGasProvider
    ) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> acceptOwnership() {
        final Function function = new Function(FUNC_ACCEPTOWNERSHIP, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelRequest(byte[] requestId) {
        final Function function = new Function(
            FUNC_CANCELREQUEST,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(requestId)),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> client() {
        final Function function = new Function(
            FUNC_CLIENT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {})
        );
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BillingConfig> getConfig() {
        final Function function = new Function(
            FUNC_GETCONFIG,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<BillingConfig>() {})
        );
        return executeRemoteCallSingleValueReturn(function, BillingConfig.class);
    }

    public RemoteFunctionCall<BigInteger> getProtocolFee() {
        final Function function = new Function(
            FUNC_GETPROTOCOLFEE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint72>() {})
        );
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(BillingConfig _config) {
        final Function function = new Function(FUNC_INITIALIZE, Arrays.<Type>asList(_config), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> nodeResponded(byte[] param0) {
        final Function function = new Function(
            FUNC_NODERESPONDED,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {})
        );
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> prepareNextInterval(
        BigInteger subscriptionId,
        BigInteger nextInterval,
        String nodeWallet
    ) {
        final Function function = new Function(
            FUNC_PREPARENEXTINTERVAL,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Uint32(nextInterval),
                new org.web3j.abi.datatypes.Address(160, nodeWallet)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger>> proofRequests(
        byte[] param0
    ) {
        final Function function = new Function(
            FUNC_PROOFREQUESTS,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Uint64>() {},
                new TypeReference<Bytes32>() {},
                new TypeReference<Address>() {},
                new TypeReference<Address>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Address>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Uint32>() {}
            )
        );
        return new RemoteFunctionCall<Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger>>(
            function,
            new Callable<Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger>>() {
                @Override
                public Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger> call() throws Exception {
                    List<Type> results = executeCallMultipleValueReturn(function);
                    return new Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger>(
                        (BigInteger) results.get(0).getValue(),
                        (byte[]) results.get(1).getValue(),
                        (String) results.get(2).getValue(),
                        (String) results.get(3).getValue(),
                        (BigInteger) results.get(4).getValue(),
                        (String) results.get(5).getValue(),
                        (BigInteger) results.get(6).getValue(),
                        (BigInteger) results.get(7).getValue()
                    );
                }
            }
        );
    }

    public RemoteFunctionCall<BigInteger> redundancyCount(byte[] param0) {
        final Function function = new Function(
            FUNC_REDUNDANCYCOUNT,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {})
        );
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> reportComputeResult(
        BigInteger deliveryInterval,
        byte[] input,
        byte[] output,
        byte[] proof,
        byte[] commitmentData,
        String nodeWallet
    ) {
        final Function function = new Function(
            FUNC_REPORTCOMPUTERESULT,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint32(deliveryInterval),
                new org.web3j.abi.datatypes.DynamicBytes(input),
                new org.web3j.abi.datatypes.DynamicBytes(output),
                new org.web3j.abi.datatypes.DynamicBytes(proof),
                new org.web3j.abi.datatypes.DynamicBytes(commitmentData),
                new org.web3j.abi.datatypes.Address(160, nodeWallet)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reportVerificationResult(
        BigInteger subscriptionId,
        BigInteger interval,
        String node,
        Boolean valid
    ) {
        final Function function = new Function(
            FUNC_REPORTVERIFICATIONRESULT,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Uint32(interval),
                new org.web3j.abi.datatypes.Address(160, node),
                new org.web3j.abi.datatypes.Bool(valid)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> requestCommitments(byte[] param0) {
        final Function function = new Function(
            FUNC_REQUESTCOMMITMENTS,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {})
        );
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> startRequest(
        byte[] requestId,
        BigInteger subscriptionId,
        byte[] containerId,
        BigInteger interval,
        BigInteger redundancy,
        Boolean useDeliveryInbox,
        String feeToken,
        BigInteger feeAmount,
        String wallet,
        String verifier
    ) {
        final Function function = new Function(
            FUNC_STARTREQUEST,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Bytes32(requestId),
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Bytes32(containerId),
                new org.web3j.abi.datatypes.generated.Uint32(interval),
                new org.web3j.abi.datatypes.generated.Uint16(redundancy),
                new org.web3j.abi.datatypes.Bool(useDeliveryInbox),
                new org.web3j.abi.datatypes.Address(160, feeToken),
                new org.web3j.abi.datatypes.generated.Uint256(feeAmount),
                new org.web3j.abi.datatypes.Address(160, wallet),
                new org.web3j.abi.datatypes.Address(160, verifier)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String to) {
        final Function function = new Function(
            FUNC_TRANSFEROWNERSHIP,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to)),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> typeAndVersion() {
        final Function function = new Function(
            FUNC_TYPEANDVERSION,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {})
        );
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> updateConfig(BillingConfig config) {
        final Function function = new Function(FUNC_UPDATECONFIG, Arrays.<Type>asList(config), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<ComputeDeliveredEventResponse> getComputeDeliveredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(COMPUTEDELIVERED_EVENT, transactionReceipt);
        ArrayList<ComputeDeliveredEventResponse> responses = new ArrayList<ComputeDeliveredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ComputeDeliveredEventResponse typedResponse = new ComputeDeliveredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.nodeWallet = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.numRedundantDeliveries = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ComputeDeliveredEventResponse getComputeDeliveredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(COMPUTEDELIVERED_EVENT, log);
        ComputeDeliveredEventResponse typedResponse = new ComputeDeliveredEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.nodeWallet = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.numRedundantDeliveries = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ComputeDeliveredEventResponse> computeDeliveredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getComputeDeliveredEventFromLog(log));
    }

    public Flowable<ComputeDeliveredEventResponse> computeDeliveredEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(COMPUTEDELIVERED_EVENT));
        return computeDeliveredEventFlowable(filter);
    }

    public static List<OwnershipTransferRequestedEventResponse> getOwnershipTransferRequestedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(
            OWNERSHIPTRANSFERREQUESTED_EVENT,
            transactionReceipt
        );
        ArrayList<OwnershipTransferRequestedEventResponse> responses = new ArrayList<OwnershipTransferRequestedEventResponse>(
            valueList.size()
        );
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferRequestedEventResponse getOwnershipTransferRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERREQUESTED_EVENT, log);
        OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferRequestedEventFromLog(log));
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERREQUESTED_EVENT));
        return ownershipTransferRequestedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<ProofVerifiedEventResponse> getProofVerifiedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROOFVERIFIED_EVENT, transactionReceipt);
        ArrayList<ProofVerifiedEventResponse> responses = new ArrayList<ProofVerifiedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProofVerifiedEventResponse typedResponse = new ProofVerifiedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.interval = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.node = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.valid = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.verifier = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ProofVerifiedEventResponse getProofVerifiedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PROOFVERIFIED_EVENT, log);
        ProofVerifiedEventResponse typedResponse = new ProofVerifiedEventResponse();
        typedResponse.log = log;
        typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.interval = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.node = (String) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.valid = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.verifier = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ProofVerifiedEventResponse> proofVerifiedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getProofVerifiedEventFromLog(log));
    }

    public Flowable<ProofVerifiedEventResponse> proofVerifiedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROOFVERIFIED_EVENT));
        return proofVerifiedEventFlowable(filter);
    }

    public static List<RequestCancelledEventResponse> getRequestCancelledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTCANCELLED_EVENT, transactionReceipt);
        ArrayList<RequestCancelledEventResponse> responses = new ArrayList<RequestCancelledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestCancelledEventResponse typedResponse = new RequestCancelledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestCancelledEventResponse getRequestCancelledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTCANCELLED_EVENT, log);
        RequestCancelledEventResponse typedResponse = new RequestCancelledEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestCancelledEventResponse> requestCancelledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestCancelledEventFromLog(log));
    }

    public Flowable<RequestCancelledEventResponse> requestCancelledEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTCANCELLED_EVENT));
        return requestCancelledEventFlowable(filter);
    }

    public static List<RequestStartedEventResponse> getRequestStartedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTSTARTED_EVENT, transactionReceipt);
        ArrayList<RequestStartedEventResponse> responses = new ArrayList<RequestStartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestStartedEventResponse typedResponse = new RequestStartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.containerId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.commitment = (Commitment) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestStartedEventResponse getRequestStartedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTSTARTED_EVENT, log);
        RequestStartedEventResponse typedResponse = new RequestStartedEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.containerId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.commitment = (Commitment) eventValues.getNonIndexedValues().get(0);
        return typedResponse;
    }

    public Flowable<RequestStartedEventResponse> requestStartedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestStartedEventFromLog(log));
    }

    public Flowable<RequestStartedEventResponse> requestStartedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTSTARTED_EVENT));
        return requestStartedEventFlowable(filter);
    }

    @Deprecated
    public static Coordinator load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Coordinator(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Coordinator load(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        BigInteger gasPrice,
        BigInteger gasLimit
    ) {
        return new Coordinator(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Coordinator load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Coordinator(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Coordinator load(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        ContractGasProvider contractGasProvider
    ) {
        return new Coordinator(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Coordinator> deploy(
        Web3j web3j,
        Credentials credentials,
        ContractGasProvider contractGasProvider,
        String _routerAddress,
        String _initialOwner
    ) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(160, _routerAddress),
                new org.web3j.abi.datatypes.Address(160, _initialOwner)
            )
        );
        return deployRemoteCall(Coordinator.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Coordinator> deploy(
        Web3j web3j,
        TransactionManager transactionManager,
        ContractGasProvider contractGasProvider,
        String _routerAddress,
        String _initialOwner
    ) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(160, _routerAddress),
                new org.web3j.abi.datatypes.Address(160, _initialOwner)
            )
        );
        return deployRemoteCall(Coordinator.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Coordinator> deploy(
        Web3j web3j,
        Credentials credentials,
        BigInteger gasPrice,
        BigInteger gasLimit,
        String _routerAddress,
        String _initialOwner
    ) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(160, _routerAddress),
                new org.web3j.abi.datatypes.Address(160, _initialOwner)
            )
        );
        return deployRemoteCall(Coordinator.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Coordinator> deploy(
        Web3j web3j,
        TransactionManager transactionManager,
        BigInteger gasPrice,
        BigInteger gasLimit,
        String _routerAddress,
        String _initialOwner
    ) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(160, _routerAddress),
                new org.web3j.abi.datatypes.Address(160, _initialOwner)
            )
        );
        return deployRemoteCall(Coordinator.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class BillingConfig extends StaticStruct {

        public BigInteger verificationTimeout;

        public String protocolFeeRecipient;

        public BigInteger protocolFee;

        public BigInteger tickNodeFee;

        public String tickNodeFeeToken;

        public BillingConfig(
            BigInteger verificationTimeout,
            String protocolFeeRecipient,
            BigInteger protocolFee,
            BigInteger tickNodeFee,
            String tickNodeFeeToken
        ) {
            super(
                new org.web3j.abi.datatypes.generated.Uint32(verificationTimeout),
                new org.web3j.abi.datatypes.Address(160, protocolFeeRecipient),
                new org.web3j.abi.datatypes.generated.Uint16(protocolFee),
                new org.web3j.abi.datatypes.generated.Uint256(tickNodeFee),
                new org.web3j.abi.datatypes.Address(160, tickNodeFeeToken)
            );
            this.verificationTimeout = verificationTimeout;
            this.protocolFeeRecipient = protocolFeeRecipient;
            this.protocolFee = protocolFee;
            this.tickNodeFee = tickNodeFee;
            this.tickNodeFeeToken = tickNodeFeeToken;
        }

        public BillingConfig(
            Uint32 verificationTimeout,
            Address protocolFeeRecipient,
            Uint16 protocolFee,
            Uint256 tickNodeFee,
            Address tickNodeFeeToken
        ) {
            super(verificationTimeout, protocolFeeRecipient, protocolFee, tickNodeFee, tickNodeFeeToken);
            this.verificationTimeout = verificationTimeout.getValue();
            this.protocolFeeRecipient = protocolFeeRecipient.getValue();
            this.protocolFee = protocolFee.getValue();
            this.tickNodeFee = tickNodeFee.getValue();
            this.tickNodeFeeToken = tickNodeFeeToken.getValue();
        }
    }

    public static class Commitment extends StaticStruct {

        public byte[] requestId;

        public BigInteger subscriptionId;

        public byte[] containerId;

        public BigInteger interval;

        public Boolean useDeliveryInbox;

        public BigInteger redundancy;

        public String walletAddress;

        public BigInteger feeAmount;

        public String feeToken;

        public String verifier;

        public String coordinator;

        public Commitment(
            byte[] requestId,
            BigInteger subscriptionId,
            byte[] containerId,
            BigInteger interval,
            Boolean useDeliveryInbox,
            BigInteger redundancy,
            String walletAddress,
            BigInteger feeAmount,
            String feeToken,
            String verifier,
            String coordinator
        ) {
            super(
                new org.web3j.abi.datatypes.generated.Bytes32(requestId),
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Bytes32(containerId),
                new org.web3j.abi.datatypes.generated.Uint32(interval),
                new org.web3j.abi.datatypes.Bool(useDeliveryInbox),
                new org.web3j.abi.datatypes.generated.Uint16(redundancy),
                new org.web3j.abi.datatypes.Address(160, walletAddress),
                new org.web3j.abi.datatypes.generated.Uint256(feeAmount),
                new org.web3j.abi.datatypes.Address(160, feeToken),
                new org.web3j.abi.datatypes.Address(160, verifier),
                new org.web3j.abi.datatypes.Address(160, coordinator)
            );
            this.requestId = requestId;
            this.subscriptionId = subscriptionId;
            this.containerId = containerId;
            this.interval = interval;
            this.useDeliveryInbox = useDeliveryInbox;
            this.redundancy = redundancy;
            this.walletAddress = walletAddress;
            this.feeAmount = feeAmount;
            this.feeToken = feeToken;
            this.verifier = verifier;
            this.coordinator = coordinator;
        }

        public Commitment(
            Bytes32 requestId,
            Uint64 subscriptionId,
            Bytes32 containerId,
            Uint32 interval,
            Bool useDeliveryInbox,
            Uint16 redundancy,
            Address walletAddress,
            Uint256 feeAmount,
            Address feeToken,
            Address verifier,
            Address coordinator
        ) {
            super(
                requestId,
                subscriptionId,
                containerId,
                interval,
                useDeliveryInbox,
                redundancy,
                walletAddress,
                feeAmount,
                feeToken,
                verifier,
                coordinator
            );
            this.requestId = requestId.getValue();
            this.subscriptionId = subscriptionId.getValue();
            this.containerId = containerId.getValue();
            this.interval = interval.getValue();
            this.useDeliveryInbox = useDeliveryInbox.getValue();
            this.redundancy = redundancy.getValue();
            this.walletAddress = walletAddress.getValue();
            this.feeAmount = feeAmount.getValue();
            this.feeToken = feeToken.getValue();
            this.verifier = verifier.getValue();
            this.coordinator = coordinator.getValue();
        }
    }

    public static class ComputeDeliveredEventResponse extends BaseEventResponse {

        public byte[] requestId;

        public String nodeWallet;

        public BigInteger numRedundantDeliveries;
    }

    public static class OwnershipTransferRequestedEventResponse extends BaseEventResponse {

        public String from;

        public String to;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {

        public String from;

        public String to;
    }

    public static class ProofVerifiedEventResponse extends BaseEventResponse {

        public BigInteger subscriptionId;

        public BigInteger interval;

        public String node;

        public Boolean valid;

        public String verifier;
    }

    public static class RequestCancelledEventResponse extends BaseEventResponse {

        public byte[] requestId;
    }

    public static class RequestStartedEventResponse extends BaseEventResponse {

        public byte[] requestId;

        public BigInteger subscriptionId;

        public byte[] containerId;

        public Commitment commitment;
    }
}
