package io.hpp.noosphere.agent.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint72;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.10.3.
 */
@SuppressWarnings("rawtypes")
public class Coordinator extends Contract {

    public static final String BINARY =
        "60a0346200016957601f6200371f38819003918201601f19168301916001600160401b038311848410176200016d57808492604094855283398101031262000169576200005a6020620000528362000181565b920162000181565b6001600160a01b039182168015620001575760805260016005551680156200011257600680546001600160a01b0319169190911790556040516135889081620001978239608051818181610151015281816105c401528181611069015281816110d5015281816111de015281816112da0152818161136a015281816114c50152818161153e015281816117b3015281816119bc01528181611a620152818161220d01528181612348015281816123d5015261285a0152f35b60405162461bcd60e51b815260206004820152601960248201527f43616e6e6f742073657420636c69656e7420746f207a65726f000000000000006044820152606490fd5b604051632530e88560e11b8152600490fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b0382168203620001695756fe6080806040526004361015610012575f80fd5b5f905f3560e01c908163109e94cf14612c8d57508063181f5a7714612c0e5780632317bfc114612b02578063298f7bdc14612ab5578063368bf46414612a6d5780633c43a84d1461183057806341e46a451461180e5780635012554614611769578063576edca31461174f5780635cf3296f14610e3457806379ba509714610d2a578063852ef02f14610cd8578063a5a4103114610c5c578063bc85694f14610c10578063c34cf5c714610b4f578063c3f909d414610a70578063c7fb32fb14610508578063f2fde38b146103f55763f5e5a31a146100ef575f80fd5b346102f45760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102f457610126612fa1565b9061012f612e7d565b91610138612e5a565b9073ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000169063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818816019081116103c8576040517f4720845700000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8516600482015263ffffffff91909116602482015294958695602091908281604481885afa8015610388578890610393575b60019150151514610213578680f35b6040517f1cfe615c00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8616600482015263ffffffff91909116602482015261018080826044818b895af180156103885761034c575b505060015460609581610306575b50508554901c1690803b1561030257818580946102c8604051978896879586947f1d013164000000000000000000000000000000000000000000000000000000008652600486016133b6565b03925af180156102f7576102e0575b80808080808680f35b6102e990612d14565b6102f457805f6102d7565b80fd5b6040513d84823e3d90fd5b8480fd5b9095506103116132b9565b958360025416846040519361032585612cdb565b16835283830152604082015261033a8661330a565b526103448561330a565b505f8061027c565b803d8211610381575b61035f8184612d9a565b8201908282031261037d578261037592016130d6565b505f8061026e565b8780fd5b503d610355565b6040513d8a823e3d90fd5b508281813d83116103c1575b6103a98183612d9a565b8101031261037d576103bc600191613009565b610204565b503d61039f565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b50346102f45760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102f45761042d612e37565b610435613016565b73ffffffffffffffffffffffffffffffffffffffff809116903382146104aa57817fffffffffffffffffffffffff00000000000000000000000000000000000000006007541617600755600654167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12788380a380f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152fd5b50346102f4576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102f45760243567ffffffffffffffff811681036109be576064359063ffffffff821682036109be5760843561ffff811681036109be5760a4359283151584036109be5760c4359373ffffffffffffffffffffffffffffffffffffffff9283861686036109be57610104359184831683036109be57610124359385851685036109be576105c0612fb8565b50857f0000000000000000000000000000000000000000000000000000000000000000163303610a46576105f2612fb8565b508585166108c2575b9261ffff67ffffffffffffffff989387959363ffffffff87958b60206040519e8f9261062684612d44565b6004358452169101528c60406044359101521660608c0152151560808b01521660a08901521660c087015260e43560e08701521661010085015216610120830152306101408301526040519260406020850161071c81868051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b6101609586815261072c81612d7d565b519020916004358152600360205220556040516107e381848051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b67ffffffffffffffff6044359216907fc2f86b99a2f1c678a8932761b141b6656cc75008064c693d41867a9b2ccc7c878560043592a46108c060405180928051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565bf35b9691926040517f1da664e800000000000000000000000000000000000000000000000000000000815286841660048201526020816024818a8a165afa9081156109ca578a91610a08575b50156109d5576040517f6fcca69b00000000000000000000000000000000000000000000000000000000815286841660048201526020816024818a8a165afa9081156109ca578a91610994575b5060e4351061096a579291966105fb565b60046040517f1c22661b000000000000000000000000000000000000000000000000000000008152fd5b90506020813d6020116109c2575b816109af60209383612d9a565b810103126109be57515f610959565b5f80fd5b3d91506109a2565b6040513d8c823e3d90fd5b60248387604051917f1fefad7d000000000000000000000000000000000000000000000000000000008352166004820152fd5b90506020813d602011610a3e575b81610a2360209383612d9a565b81010312610a3a57610a3490613009565b5f61090c565b8980fd5b3d9150610a16565b60046040517fc41a5b09000000000000000000000000000000000000000000000000000000008152fd5b50346102f457807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102f4578060a0916080604051610ab181612d28565b828152826020820152826040820152826060820152015260405190610ad582612d28565b5463ffffffff81169182815273ffffffffffffffffffffffffffffffffffffffff916020820190838160201c16825261ffff9081604085019160c01c168152846001549360608601948552608082600254169601958652604051978852511660208701525116604085015251606084015251166080820152f35b50346102f45760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102f457604061010091600435815260046020522067ffffffffffffffff8154169060018101549073ffffffffffffffffffffffffffffffffffffffff8060028301541690806003840154166004840154916005850154169263ffffffff600760068701549601541695604051978852602088015260408701526060860152608085015260a084015260c083015260e0820152f35b50346102f45760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102f45761ffff6040602092600435815260098452205416604051908152f35b50346102f457807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102f4575460c01c61ffff1668ffffffffffffffffff8111610cae57602090604051908152f35b60046040517fb8e5ea4b000000000000000000000000000000000000000000000000000000008152fd5b50346102f457807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102f457602073ffffffffffffffffffffffffffffffffffffffff60085416604051908152f35b50346102f457807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102f45760075473ffffffffffffffffffffffffffffffffffffffff8082163303610dd657600654917fffffffffffffffffffffffff0000000000000000000000000000000000000000903382851617600655166007553391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d7573742062652070726f706f73656420636c69656e740000000000000000006044820152fd5b50346102f45760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102f457610e6c612fa1565b610e74612e7d565b90610e7d612e5a565b6064351515606435036109be576040805167ffffffffffffffff84166020820190815263ffffffff86169282019290925273ffffffffffffffffffffffffffffffffffffffff83166060820152610eff81608081015b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282612d9a565b5190208085526004602052604085209063ffffffff600760405193610f2385612cf7565b67ffffffffffffffff81541685526001810154602086015273ffffffffffffffffffffffffffffffffffffffff600282015416604086015273ffffffffffffffffffffffffffffffffffffffff60038201541660608601526004810154608086015273ffffffffffffffffffffffffffffffffffffffff60058201541660a0860152600681015460c086015201541660e083015285526004602052846007604082208281555f60018201558260028201558260038201555f60048201558260058201555f6006820155015563ffffffff60e082015116156117255763ffffffff60e08201511663ffffffff4216101567ffffffffffffffff82511690604051917fa50366b800000000000000000000000000000000000000000000000000000000835260048301526101808260248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa91821561171a5787926115d7575b5073ffffffffffffffffffffffffffffffffffffffff6101208301511633036115ad57869273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b1561140e576040517f77bd924f00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff82511660048201526020820151602482015273ffffffffffffffffffffffffffffffffffffffff604083015116604482015273ffffffffffffffffffffffffffffffffffffffff60608301511660648201526080820151608482015273ffffffffffffffffffffffffffffffffffffffff60a08301511660a482015260c082015160c482015263ffffffff60e08301511660e48201528481610104818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af19081156115a257859161158e575b50506112186132b9565b91606435908115611586575b5015611412578073ffffffffffffffffffffffffffffffffffffffff606067ffffffffffffffff9301511673ffffffffffffffffffffffffffffffffffffffff60a0830151166080830151906040519261127d84612cdb565b8352602083015260408201526112928461330a565b5261129c8361330a565b5051169173ffffffffffffffffffffffffffffffffffffffff60608160e084015116920151169273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b1561030257611350859360405195869485947f1d013164000000000000000000000000000000000000000000000000000000008652600486015260248501526044840152608060648401526084830190613354565b03818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156102f7576113fa575b50505b7f89f6621aaa96daa4351dd7779ceb97eb7a093e09f2a405690d616013513eef3f604067ffffffffffffffff63ffffffff73ffffffffffffffffffffffffffffffffffffffff83519560643515158752336020880152169616941692a480f35b61140390612d14565b61140e57835f611397565b8380fd5b9173ffffffffffffffffffffffffffffffffffffffff60e08201511690604073ffffffffffffffffffffffffffffffffffffffff61010083015116910151906040519261145e84612cdb565b8352602083015260408201526114738261330a565b5261147d8161330a565b5067ffffffffffffffff8251169173ffffffffffffffffffffffffffffffffffffffff604081606084015116920151169273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b1561030257611524859360405195869485947f1d013164000000000000000000000000000000000000000000000000000000008652600486016133b6565b03818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156102f757611572575b505061139a565b61157b90612d14565b61140e57835f61156b565b90505f611224565b61159790612d14565b61140e57835f61120e565b6040513d87823e3d90fd5b60046040517fb9857aa1000000000000000000000000000000000000000000000000000000008152fd5b909150610180813d61018011611712575b816115f66101809383612d9a565b8101031261170e57604051908161018081011067ffffffffffffffff610180840111176116e1576101808201604052805182526020810151602083015260408101516040830152611649606082016130b5565b606083015261165a60808201613095565b608083015261166b60a08201613095565b60a083015261167c60c08201613095565b60c083015261168d60e082016130b5565b60e08301526101006116a08183016130b5565b908301526101206116b28183016130b5565b908301526101406116c48183016130a6565b908301526116d6610160809201613009565b90820152905f611099565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b8680fd5b3d91506115e8565b6040513d89823e3d90fd5b60046040517f70eb1be5000000000000000000000000000000000000000000000000000000008152fd5b50346102f45761176661176136612f04565b61319f565b80f35b50346102f45760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102f45760043573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163303610a465780825260036020525f60408320557ff903f4774c7bd27355f9d7fcbc382b079b164a697a44ac5d95267a4c3cb3bb228280a280f35b50346102f45761176661182036612f04565b611828613016565b611761613016565b50346109be5760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109be5760043563ffffffff811681036109be5760243567ffffffffffffffff81116109be57611890903690600401612e90565b60443567ffffffffffffffff81116109be576118b0903690600401612e90565b9160643567ffffffffffffffff81116109be576118d1903690600401612e90565b60843567ffffffffffffffff81116109be576118f1903690600401612e90565b73ffffffffffffffffffffffffffffffffffffffff60a4351660a435036109be57600260055414612a435760026005558051810190610160818303126109be57602080611940930191016130d6565b9384515f52600960205261ffff60405f2054169261ffff60a0870151168414612a195767ffffffffffffffff60208701511690604051917fc9f90505000000000000000000000000000000000000000000000000000000008352600483015260208260248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9182156125a0575f926129dd575b5063ffffffff811663ffffffff8316036129a657506040517f439a301200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff60a43516600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156125a0575f9161296c575b50156129425785515f52600960205260405f2061ffff60018601167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000825416179055610ed3611b3567ffffffffffffffff602089015116604051928391602083019533918791604091949363ffffffff73ffffffffffffffffffffffffffffffffffffffff9267ffffffffffffffff606087019816865216602085015216910152565b519020805f52600a60205260ff60405f205416612918575f52600a60205260405f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905584515f52600960205261ffff60405f205416907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff60a088015116019461ffff86116125ab5786515f52600360205260405f205480156128e6576040516020810190611c88828b8051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b6101608152611c9681612d7d565b519020036128b45761012087015173ffffffffffffffffffffffffffffffffffffffff16156127235760e08701519073ffffffffffffffffffffffffffffffffffffffff6101208901511673ffffffffffffffffffffffffffffffffffffffff6101008a015116604051907f1da664e80000000000000000000000000000000000000000000000000000000082526004820152602081602481855afa9081156125a0575f916126e9575b501561269d575f5490612710611d5d61ffff8460c01c168661353f565b0493848060011b04600214851517156125ab57611d7e908560011b90613532565b73ffffffffffffffffffffffffffffffffffffffff6101008c015116604051907f6fcca69b0000000000000000000000000000000000000000000000000000000082526004820152602081602481865afa9081156125a0575f9161266b575b5080911061096a578a94612710611dfb61ffff8660c01c168461353f565b049073ffffffffffffffffffffffffffffffffffffffff610100611e1d61326f565b9801511693828260011b018260011b116125ab576004948360209360405192611e4584612cdb565b73ffffffffffffffffffffffffffffffffffffffff8a871c1684528584015260011b016040820152611e768961330a565b52611e808861330a565b50604051948580927f2b1eaf290000000000000000000000000000000000000000000000000000000082525afa9283156125a0578c905f9461260e575b509073ffffffffffffffffffffffffffffffffffffffff610100611ee49301511692613532565b9073ffffffffffffffffffffffffffffffffffffffff60405193611f0785612cdb565b16835260208301526040820152611f1d84613344565b52611f2783613344565b50612710611f4161ffff60e08c01519360c01c168361353f565b04808060011b04600214811517156125ab5773ffffffffffffffffffffffffffffffffffffffff6101208b01511690602073ffffffffffffffffffffffffffffffffffffffff6101008d0151166024604051809581937f6fcca69b00000000000000000000000000000000000000000000000000000000835260048301525afa9182156125a0575f926125d8575b5090611fe1611fe69260011b84613532565b613532565b60208a8101516060808d01516040805167ffffffffffffffff90941694840194855263ffffffff9091169083015233908201529192916120298160808101610ed3565b5190209067ffffffffffffffff60208c015116928b519062093a80420142116125ab5773ffffffffffffffffffffffffffffffffffffffff6101008e015116916040519561207687612cf7565b8652602086015233604086015273ffffffffffffffffffffffffffffffffffffffff60a435166060860152608085015260a084015260c083015263ffffffff62093a8042011660e08301525f52600460205260405f209067ffffffffffffffff81511691827fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008254161781556020820151806001830155600282019073ffffffffffffffffffffffffffffffffffffffff6040850151167fffffffffffffffffffffffff0000000000000000000000000000000000000000928184825416179055600384019073ffffffffffffffffffffffffffffffffffffffff6060870151169182858254161790556080860151928360048701556005860173ffffffffffffffffffffffffffffffffffffffff60a089015116809682541617905563ffffffff60e0600760c08a015198896006820155019801511696877fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000082541617905573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b156109be57604051977ff22339510000000000000000000000000000000000000000000000000000000089526004890152602488015260448701526064860152608485015260a484015260c483015260e482015261232a61010482018a8051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b5f81610264818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156125a057612579575b50938093926123bb896020948c9860405197889687967f1e223a7800000000000000000000000000000000000000000000000000000000885260a4359360048901613417565b03818673ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af1801561256e5761253f575b5073ffffffffffffffffffffffffffffffffffffffff610120860151169067ffffffffffffffff6020870151169063ffffffff60608801511692803b156103025761249893858094604051968795869485937f6ee6261700000000000000000000000000000000000000000000000000000000855260048501526024840152336044840152608060648401526084830190612ddb565b03925af180156102f75761252b575b505061ffff6001925b161414612517575b51808252600960205261ffff604083205416906040519182527f70b14fe3afd588ffa8731df33ed01eae13ff43736d804f96416ef6d59fba228a602073ffffffffffffffffffffffffffffffffffffffff60a4351693a3600160055580f35b8051825260036020525f60408320556124b8565b61253490612d14565b61140e57835f6124a7565b6125609060203d602011612567575b6125588183612d9a565b8101906133ff565b505f612402565b503d61254e565b6040513d85823e3d90fd5b60209299509261258d869594969296612d14565b6123bb895f9b9450505092939490612375565b6040513d5f823e3d90fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b91506020823d602011612606575b816125f360209383612d9a565b810103126109be57905190611fe1611fcf565b3d91506125e6565b919350506020813d602011612663575b8161262b60209383612d9a565b810103126109be578b9273ffffffffffffffffffffffffffffffffffffffff610100612659611ee4946130b5565b9592935050611ebd565b3d915061261e565b90506020813d602011612695575b8161268660209383612d9a565b810103126109be57515f611ddd565b3d9150612679565b602473ffffffffffffffffffffffffffffffffffffffff6101008b015116604051907f1fefad7d0000000000000000000000000000000000000000000000000000000082526004820152fd5b90506020813d60201161271b575b8161270460209383612d9a565b810103126109be5761271590613009565b5f611d40565b3d91506126f7565b9194929060e08701515f548060bf1c906201fffe821661fffe8316036125ab576020956128409373ffffffffffffffffffffffffffffffffffffffff61277c6127106127748f9761fffe168561353f565b048093613532565b9161278561326f565b9461010087019183835116846040519361279e85612cdb565b8e1c1683528c83015260408201526127b58661330a565b526127bf8561330a565b50511690604051916127d083612cdb565b73ffffffffffffffffffffffffffffffffffffffff60a4351683528983015260408201526127fd83613344565b5261280782613344565b50604051998a9687967f1e223a7800000000000000000000000000000000000000000000000000000000885260a4359360048901613417565b03815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af19081156125a05760019361ffff92612895575b506124b0565b6128ad9060203d602011612567576125588183612d9a565b505f61288f565b60248751604051907f41dc962e0000000000000000000000000000000000000000000000000000000082526004820152fd5b60248851604051907f41dc962e0000000000000000000000000000000000000000000000000000000082526004820152fd5b60046040517f88a21e4f000000000000000000000000000000000000000000000000000000008152fd5b60046040517f23455ba1000000000000000000000000000000000000000000000000000000008152fd5b90506020813d60201161299e575b8161298760209383612d9a565b810103126109be5761299890613009565b5f611a92565b3d915061297a565b60249063ffffffff604051917f0363c8a6000000000000000000000000000000000000000000000000000000008352166004820152fd5b9091506020813d602011612a11575b816129f960209383612d9a565b810103126109be57612a0a90613095565b905f6119ec565b3d91506129ec565b60046040517f2f4ca85b000000000000000000000000000000000000000000000000000000008152fd5b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b346109be5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109be576004355f526003602052602060405f2054604051908152f35b346109be5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109be576004355f52600a602052602060ff60405f2054166040519015158152f35b346109be5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109be5773ffffffffffffffffffffffffffffffffffffffff612b4e612e37565b612b56613016565b168015612b8a577fffffffffffffffffffffffff000000000000000000000000000000000000000060085416176008555f80f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f436f6f7264696e61746f723a20496e76616c696420726561646572206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b346109be575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109be57612c89604051612c4b81612d61565b601281527f436f6f7264696e61746f725f76312e302e3000000000000000000000000000006020820152604051918291602083526020830190612ddb565b0390f35b346109be575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109be5760209073ffffffffffffffffffffffffffffffffffffffff600654168152f35b6060810190811067ffffffffffffffff8211176116e157604052565b610100810190811067ffffffffffffffff8211176116e157604052565b67ffffffffffffffff81116116e157604052565b60a0810190811067ffffffffffffffff8211176116e157604052565b610160810190811067ffffffffffffffff8211176116e157604052565b6040810190811067ffffffffffffffff8211176116e157604052565b610180810190811067ffffffffffffffff8211176116e157604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176116e157604052565b91908251928382525f5b848110612e235750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f845f6020809697860101520116010190565b602081830181015184830182015201612de5565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036109be57565b6044359073ffffffffffffffffffffffffffffffffffffffff821682036109be57565b6024359063ffffffff821682036109be57565b81601f820112156109be5780359067ffffffffffffffff82116116e15760405192612ee360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160185612d9a565b828452602083830101116109be57815f926020809301838601378301015290565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60a09101126109be57604051612f3a81612d28565b60043563ffffffff811681036109be57815273ffffffffffffffffffffffffffffffffffffffff60243581811681036109be57602083015260443561ffff811681036109be576040830152606435606083015260843590811681036109be57608082015290565b6004359067ffffffffffffffff821682036109be57565b60405190612fc582612d44565b5f610140838281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b519081151582036109be57565b73ffffffffffffffffffffffffffffffffffffffff60065416330361303757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c6520627920636c69656e740000000000000000006044820152fd5b519063ffffffff821682036109be57565b519061ffff821682036109be57565b519073ffffffffffffffffffffffffffffffffffffffff821682036109be57565b9190826101609103126109be576040516130ef81612d44565b809280518252602081015167ffffffffffffffff811681036109be5760208301526040810151604083015261312660608201613095565b606083015261313760808201613009565b608083015261314860a082016130a6565b60a083015261315960c082016130b5565b60c083015260e081015160e08301526101006131768183016130b5565b908301526101206131888183016130b5565b9083015261319a6101408092016130b5565b910152565b608073ffffffffffffffffffffffffffffffffffffffff916131bf613016565b63ffffffff8151165f549077ffffffffffffffffffffffffffffffffffffffff00000000602084015160201b16907fffffffffffff000000000000000000000000000000000000000000000000000079ffff000000000000000000000000000000000000000000000000604086015160c01b1693161717175f5560608101516001550151167fffffffffffffffffffffffff00000000000000000000000000000000000000006002541617600255565b6040906040519161327f83612cdb565b60028352825f5b82811061329257505050565b60209083516132a081612cdb565b5f8152825f818301525f86830152828501015201613286565b604090604051916132c983612d61565b6001835282915f5b602080821015613302578351602092916132ea82612cdb565b5f82525f818301525f868301528288010152016132d1565b505091925050565b8051156133175760200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b8051600110156133175760400190565b9081518082526020808093019301915f5b828110613373575050505090565b8351805173ffffffffffffffffffffffffffffffffffffffff90811687528184015116868401526040908101519086015260609094019392810192600101613365565b90916133fc949367ffffffffffffffff60809416835273ffffffffffffffffffffffffffffffffffffffff80921660208401521660408201528160608201520190613354565b90565b908160209103126109be575160038110156109be5790565b97969473ffffffffffffffffffffffffffffffffffffffff9061ffff61347461348e966134668d60c09a986134586135309e99610220808552840190612ddb565b916020818403910152612ddb565b8d810360408f015290612ddb565b941660608b015216608089015287820360a0890152613354565b9401908051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b565b919082039182116125ab57565b818102929181159184041417156125ab5756fea264697066735822122028f44677907cdd281e13678a611a8742311f2e2566037a27ed96df3e32eeeffc64736f6c63430008170033";

    public static final String FUNC_ACCEPTOWNERSHIP = "acceptOwnership";

    public static final String FUNC_CANCELREQUEST = "cancelRequest";

    public static final String FUNC_CLIENT = "client";

    public static final String FUNC_GETCONFIG = "getConfig";

    public static final String FUNC_GETPROTOCOLFEE = "getProtocolFee";

    public static final String FUNC_GETSUBSCRIPTIONBATCHREADER = "getSubscriptionBatchReader";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_NODERESPONDED = "nodeResponded";

    public static final String FUNC_PREPARENEXTINTERVAL = "prepareNextInterval";

    public static final String FUNC_PROOFREQUESTS = "proofRequests";

    public static final String FUNC_REDUNDANCYCOUNT = "redundancyCount";

    public static final String FUNC_REPORTCOMPUTERESULT = "reportComputeResult";

    public static final String FUNC_REPORTVERIFICATIONRESULT = "reportVerificationResult";

    public static final String FUNC_REQUESTCOMMITMENTS = "requestCommitments";

    public static final String FUNC_SETSUBSCRIPTIONBATCHREADER = "setSubscriptionBatchReader";

    public static final String FUNC_STARTREQUEST = "startRequest";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TYPEANDVERSION = "typeAndVersion";

    public static final String FUNC_UPDATECONFIG = "updateConfig";

    public static final Event COMPUTEDELIVERED_EVENT = new Event(
        "ComputeDelivered",
        Arrays.<TypeReference<?>>asList(
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Address>(true) {},
            new TypeReference<Uint16>() {}
        )
    );

    public static final Event OWNERSHIPTRANSFERREQUESTED_EVENT = new Event(
        "OwnershipTransferRequested",
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {})
    );

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event(
        "OwnershipTransferred",
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {})
    );

    public static final Event PROOFVERIFIED_EVENT = new Event(
        "ProofVerified",
        Arrays.<TypeReference<?>>asList(
            new TypeReference<Uint64>(true) {},
            new TypeReference<Uint32>(true) {},
            new TypeReference<Address>(true) {},
            new TypeReference<Bool>() {},
            new TypeReference<Address>() {}
        )
    );

    public static final Event REQUESTCANCELLED_EVENT = new Event(
        "RequestCancelled",
        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {})
    );

    public static final Event REQUESTSTARTED_EVENT = new Event(
        "RequestStarted",
        Arrays.<TypeReference<?>>asList(
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Uint64>(true) {},
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Commitment>() {}
        )
    );

    @Deprecated
    protected Coordinator(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Coordinator(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Coordinator(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        BigInteger gasPrice,
        BigInteger gasLimit
    ) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Coordinator(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        ContractGasProvider contractGasProvider
    ) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> acceptOwnership() {
        final Function function = new Function(FUNC_ACCEPTOWNERSHIP, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelRequest(byte[] requestId) {
        final Function function = new Function(
            FUNC_CANCELREQUEST,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(requestId)),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> client() {
        final Function function = new Function(
            FUNC_CLIENT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {})
        );
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BillingConfig> getConfig() {
        final Function function = new Function(
            FUNC_GETCONFIG,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<BillingConfig>() {})
        );
        return executeRemoteCallSingleValueReturn(function, BillingConfig.class);
    }

    public RemoteFunctionCall<BigInteger> getProtocolFee() {
        final Function function = new Function(
            FUNC_GETPROTOCOLFEE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint72>() {})
        );
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getSubscriptionBatchReader() {
        final Function function = new Function(
            FUNC_GETSUBSCRIPTIONBATCHREADER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {})
        );
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(BillingConfig _config) {
        final Function function = new Function(FUNC_INITIALIZE, Arrays.<Type>asList(_config), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> nodeResponded(byte[] param0) {
        final Function function = new Function(
            FUNC_NODERESPONDED,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {})
        );
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> prepareNextInterval(
        BigInteger subscriptionId,
        BigInteger nextInterval,
        String nodeWallet
    ) {
        final Function function = new Function(
            FUNC_PREPARENEXTINTERVAL,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Uint32(nextInterval),
                new org.web3j.abi.datatypes.Address(160, nodeWallet)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger>> proofRequests(
        byte[] param0
    ) {
        final Function function = new Function(
            FUNC_PROOFREQUESTS,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Uint64>() {},
                new TypeReference<Bytes32>() {},
                new TypeReference<Address>() {},
                new TypeReference<Address>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Address>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Uint32>() {}
            )
        );
        return new RemoteFunctionCall<Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger>>(
            function,
            new Callable<Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger>>() {
                @Override
                public Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger> call() throws Exception {
                    List<Type> results = executeCallMultipleValueReturn(function);
                    return new Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger>(
                        (BigInteger) results.get(0).getValue(),
                        (byte[]) results.get(1).getValue(),
                        (String) results.get(2).getValue(),
                        (String) results.get(3).getValue(),
                        (BigInteger) results.get(4).getValue(),
                        (String) results.get(5).getValue(),
                        (BigInteger) results.get(6).getValue(),
                        (BigInteger) results.get(7).getValue()
                    );
                }
            }
        );
    }

    public RemoteFunctionCall<BigInteger> redundancyCount(byte[] param0) {
        final Function function = new Function(
            FUNC_REDUNDANCYCOUNT,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {})
        );
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> reportComputeResult(
        BigInteger deliveryInterval,
        byte[] input,
        byte[] output,
        byte[] proof,
        byte[] commitmentData,
        String nodeWallet
    ) {
        final Function function = new Function(
            FUNC_REPORTCOMPUTERESULT,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint32(deliveryInterval),
                new org.web3j.abi.datatypes.DynamicBytes(input),
                new org.web3j.abi.datatypes.DynamicBytes(output),
                new org.web3j.abi.datatypes.DynamicBytes(proof),
                new org.web3j.abi.datatypes.DynamicBytes(commitmentData),
                new org.web3j.abi.datatypes.Address(160, nodeWallet)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reportVerificationResult(
        BigInteger subscriptionId,
        BigInteger interval,
        String node,
        Boolean valid
    ) {
        final Function function = new Function(
            FUNC_REPORTVERIFICATIONRESULT,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Uint32(interval),
                new org.web3j.abi.datatypes.Address(160, node),
                new org.web3j.abi.datatypes.Bool(valid)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> requestCommitments(byte[] param0) {
        final Function function = new Function(
            FUNC_REQUESTCOMMITMENTS,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {})
        );
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> setSubscriptionBatchReader(String _reader) {
        final Function function = new Function(
            FUNC_SETSUBSCRIPTIONBATCHREADER,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _reader)),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> startRequest(
        byte[] requestId,
        BigInteger subscriptionId,
        byte[] containerId,
        BigInteger interval,
        BigInteger redundancy,
        Boolean useDeliveryInbox,
        String feeToken,
        BigInteger feeAmount,
        String wallet,
        String verifier
    ) {
        final Function function = new Function(
            FUNC_STARTREQUEST,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Bytes32(requestId),
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Bytes32(containerId),
                new org.web3j.abi.datatypes.generated.Uint32(interval),
                new org.web3j.abi.datatypes.generated.Uint16(redundancy),
                new org.web3j.abi.datatypes.Bool(useDeliveryInbox),
                new org.web3j.abi.datatypes.Address(160, feeToken),
                new org.web3j.abi.datatypes.generated.Uint256(feeAmount),
                new org.web3j.abi.datatypes.Address(160, wallet),
                new org.web3j.abi.datatypes.Address(160, verifier)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String to) {
        final Function function = new Function(
            FUNC_TRANSFEROWNERSHIP,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to)),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> typeAndVersion() {
        final Function function = new Function(
            FUNC_TYPEANDVERSION,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {})
        );
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> updateConfig(BillingConfig config) {
        final Function function = new Function(FUNC_UPDATECONFIG, Arrays.<Type>asList(config), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<ComputeDeliveredEventResponse> getComputeDeliveredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(COMPUTEDELIVERED_EVENT, transactionReceipt);
        ArrayList<ComputeDeliveredEventResponse> responses = new ArrayList<ComputeDeliveredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ComputeDeliveredEventResponse typedResponse = new ComputeDeliveredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.nodeWallet = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.numRedundantDeliveries = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ComputeDeliveredEventResponse getComputeDeliveredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(COMPUTEDELIVERED_EVENT, log);
        ComputeDeliveredEventResponse typedResponse = new ComputeDeliveredEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.nodeWallet = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.numRedundantDeliveries = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ComputeDeliveredEventResponse> computeDeliveredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getComputeDeliveredEventFromLog(log));
    }

    public Flowable<ComputeDeliveredEventResponse> computeDeliveredEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(COMPUTEDELIVERED_EVENT));
        return computeDeliveredEventFlowable(filter);
    }

    public static List<OwnershipTransferRequestedEventResponse> getOwnershipTransferRequestedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(
            OWNERSHIPTRANSFERREQUESTED_EVENT,
            transactionReceipt
        );
        ArrayList<OwnershipTransferRequestedEventResponse> responses = new ArrayList<OwnershipTransferRequestedEventResponse>(
            valueList.size()
        );
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferRequestedEventResponse getOwnershipTransferRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERREQUESTED_EVENT, log);
        OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferRequestedEventFromLog(log));
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERREQUESTED_EVENT));
        return ownershipTransferRequestedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<ProofVerifiedEventResponse> getProofVerifiedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROOFVERIFIED_EVENT, transactionReceipt);
        ArrayList<ProofVerifiedEventResponse> responses = new ArrayList<ProofVerifiedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProofVerifiedEventResponse typedResponse = new ProofVerifiedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.interval = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.node = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.valid = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.verifier = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ProofVerifiedEventResponse getProofVerifiedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PROOFVERIFIED_EVENT, log);
        ProofVerifiedEventResponse typedResponse = new ProofVerifiedEventResponse();
        typedResponse.log = log;
        typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.interval = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.node = (String) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.valid = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.verifier = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ProofVerifiedEventResponse> proofVerifiedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getProofVerifiedEventFromLog(log));
    }

    public Flowable<ProofVerifiedEventResponse> proofVerifiedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROOFVERIFIED_EVENT));
        return proofVerifiedEventFlowable(filter);
    }

    public static List<RequestCancelledEventResponse> getRequestCancelledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTCANCELLED_EVENT, transactionReceipt);
        ArrayList<RequestCancelledEventResponse> responses = new ArrayList<RequestCancelledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestCancelledEventResponse typedResponse = new RequestCancelledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestCancelledEventResponse getRequestCancelledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTCANCELLED_EVENT, log);
        RequestCancelledEventResponse typedResponse = new RequestCancelledEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestCancelledEventResponse> requestCancelledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestCancelledEventFromLog(log));
    }

    public Flowable<RequestCancelledEventResponse> requestCancelledEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTCANCELLED_EVENT));
        return requestCancelledEventFlowable(filter);
    }

    public static List<RequestStartedEventResponse> getRequestStartedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTSTARTED_EVENT, transactionReceipt);
        ArrayList<RequestStartedEventResponse> responses = new ArrayList<RequestStartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestStartedEventResponse typedResponse = new RequestStartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.containerId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.commitment = (Commitment) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestStartedEventResponse getRequestStartedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTSTARTED_EVENT, log);
        RequestStartedEventResponse typedResponse = new RequestStartedEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.containerId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.commitment = (Commitment) eventValues.getNonIndexedValues().get(0);
        return typedResponse;
    }

    public Flowable<RequestStartedEventResponse> requestStartedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestStartedEventFromLog(log));
    }

    public Flowable<RequestStartedEventResponse> requestStartedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTSTARTED_EVENT));
        return requestStartedEventFlowable(filter);
    }

    @Deprecated
    public static Coordinator load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Coordinator(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Coordinator load(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        BigInteger gasPrice,
        BigInteger gasLimit
    ) {
        return new Coordinator(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Coordinator load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Coordinator(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Coordinator load(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        ContractGasProvider contractGasProvider
    ) {
        return new Coordinator(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Coordinator> deploy(
        Web3j web3j,
        Credentials credentials,
        ContractGasProvider contractGasProvider,
        String _routerAddress,
        String _initialOwner
    ) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(160, _routerAddress),
                new org.web3j.abi.datatypes.Address(160, _initialOwner)
            )
        );
        return deployRemoteCall(Coordinator.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Coordinator> deploy(
        Web3j web3j,
        TransactionManager transactionManager,
        ContractGasProvider contractGasProvider,
        String _routerAddress,
        String _initialOwner
    ) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(160, _routerAddress),
                new org.web3j.abi.datatypes.Address(160, _initialOwner)
            )
        );
        return deployRemoteCall(Coordinator.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Coordinator> deploy(
        Web3j web3j,
        Credentials credentials,
        BigInteger gasPrice,
        BigInteger gasLimit,
        String _routerAddress,
        String _initialOwner
    ) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(160, _routerAddress),
                new org.web3j.abi.datatypes.Address(160, _initialOwner)
            )
        );
        return deployRemoteCall(Coordinator.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Coordinator> deploy(
        Web3j web3j,
        TransactionManager transactionManager,
        BigInteger gasPrice,
        BigInteger gasLimit,
        String _routerAddress,
        String _initialOwner
    ) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(160, _routerAddress),
                new org.web3j.abi.datatypes.Address(160, _initialOwner)
            )
        );
        return deployRemoteCall(Coordinator.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class BillingConfig extends StaticStruct {

        public BigInteger verificationTimeout;

        public String protocolFeeRecipient;

        public BigInteger protocolFee;

        public BigInteger tickNodeFee;

        public String tickNodeFeeToken;

        public BillingConfig(
            BigInteger verificationTimeout,
            String protocolFeeRecipient,
            BigInteger protocolFee,
            BigInteger tickNodeFee,
            String tickNodeFeeToken
        ) {
            super(
                new org.web3j.abi.datatypes.generated.Uint32(verificationTimeout),
                new org.web3j.abi.datatypes.Address(160, protocolFeeRecipient),
                new org.web3j.abi.datatypes.generated.Uint16(protocolFee),
                new org.web3j.abi.datatypes.generated.Uint256(tickNodeFee),
                new org.web3j.abi.datatypes.Address(160, tickNodeFeeToken)
            );
            this.verificationTimeout = verificationTimeout;
            this.protocolFeeRecipient = protocolFeeRecipient;
            this.protocolFee = protocolFee;
            this.tickNodeFee = tickNodeFee;
            this.tickNodeFeeToken = tickNodeFeeToken;
        }

        public BillingConfig(
            Uint32 verificationTimeout,
            Address protocolFeeRecipient,
            Uint16 protocolFee,
            Uint256 tickNodeFee,
            Address tickNodeFeeToken
        ) {
            super(verificationTimeout, protocolFeeRecipient, protocolFee, tickNodeFee, tickNodeFeeToken);
            this.verificationTimeout = verificationTimeout.getValue();
            this.protocolFeeRecipient = protocolFeeRecipient.getValue();
            this.protocolFee = protocolFee.getValue();
            this.tickNodeFee = tickNodeFee.getValue();
            this.tickNodeFeeToken = tickNodeFeeToken.getValue();
        }
    }

    public static class Commitment extends StaticStruct {

        public byte[] requestId;

        public BigInteger subscriptionId;

        public byte[] containerId;

        public BigInteger interval;

        public Boolean useDeliveryInbox;

        public BigInteger redundancy;

        public String walletAddress;

        public BigInteger feeAmount;

        public String feeToken;

        public String verifier;

        public String coordinator;

        public Commitment(
            byte[] requestId,
            BigInteger subscriptionId,
            byte[] containerId,
            BigInteger interval,
            Boolean useDeliveryInbox,
            BigInteger redundancy,
            String walletAddress,
            BigInteger feeAmount,
            String feeToken,
            String verifier,
            String coordinator
        ) {
            super(
                new org.web3j.abi.datatypes.generated.Bytes32(requestId),
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Bytes32(containerId),
                new org.web3j.abi.datatypes.generated.Uint32(interval),
                new org.web3j.abi.datatypes.Bool(useDeliveryInbox),
                new org.web3j.abi.datatypes.generated.Uint16(redundancy),
                new org.web3j.abi.datatypes.Address(160, walletAddress),
                new org.web3j.abi.datatypes.generated.Uint256(feeAmount),
                new org.web3j.abi.datatypes.Address(160, feeToken),
                new org.web3j.abi.datatypes.Address(160, verifier),
                new org.web3j.abi.datatypes.Address(160, coordinator)
            );
            this.requestId = requestId;
            this.subscriptionId = subscriptionId;
            this.containerId = containerId;
            this.interval = interval;
            this.useDeliveryInbox = useDeliveryInbox;
            this.redundancy = redundancy;
            this.walletAddress = walletAddress;
            this.feeAmount = feeAmount;
            this.feeToken = feeToken;
            this.verifier = verifier;
            this.coordinator = coordinator;
        }

        public Commitment(
            Bytes32 requestId,
            Uint64 subscriptionId,
            Bytes32 containerId,
            Uint32 interval,
            Bool useDeliveryInbox,
            Uint16 redundancy,
            Address walletAddress,
            Uint256 feeAmount,
            Address feeToken,
            Address verifier,
            Address coordinator
        ) {
            super(
                requestId,
                subscriptionId,
                containerId,
                interval,
                useDeliveryInbox,
                redundancy,
                walletAddress,
                feeAmount,
                feeToken,
                verifier,
                coordinator
            );
            this.requestId = requestId.getValue();
            this.subscriptionId = subscriptionId.getValue();
            this.containerId = containerId.getValue();
            this.interval = interval.getValue();
            this.useDeliveryInbox = useDeliveryInbox.getValue();
            this.redundancy = redundancy.getValue();
            this.walletAddress = walletAddress.getValue();
            this.feeAmount = feeAmount.getValue();
            this.feeToken = feeToken.getValue();
            this.verifier = verifier.getValue();
            this.coordinator = coordinator.getValue();
        }
    }

    public static class ComputeDeliveredEventResponse extends BaseEventResponse {

        public byte[] requestId;

        public String nodeWallet;

        public BigInteger numRedundantDeliveries;
    }

    public static class OwnershipTransferRequestedEventResponse extends BaseEventResponse {

        public String from;

        public String to;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {

        public String from;

        public String to;
    }

    public static class ProofVerifiedEventResponse extends BaseEventResponse {

        public BigInteger subscriptionId;

        public BigInteger interval;

        public String node;

        public Boolean valid;

        public String verifier;
    }

    public static class RequestCancelledEventResponse extends BaseEventResponse {

        public byte[] requestId;
    }

    public static class RequestStartedEventResponse extends BaseEventResponse {

        public byte[] requestId;

        public BigInteger subscriptionId;

        public byte[] containerId;

        public Commitment commitment;
    }
}
