package io.hpp.noosphere.agent.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes1;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.10.3.
 */
@SuppressWarnings("rawtypes")
public class Router extends Contract {

    public static final String BINARY =
        "61016060409080825234620001bc576200001981620001c0565b600981526020810190686e6f6f73706865726560b81b82528251926200003f84620001c0565b6001845260208401603160f81b81526200005983620001dc565b936101209485526200006b86620003a6565b93610140948552519020948560e05251902093610100948086524660a05282519060208201927f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f84528483015260608201524660808201523060a082015260a0815260c081019181831060018060401b03841117620001a857828452815190206080523060c05233156200016457505060088054610100600160a81b03191633821b610100600160a81b0316179055516159b193909290846200054e853960805184615708015260a051846157d4015260c051846156d9015260e051846157570152518361577d01525182611029015251816110530152f35b62461bcd60e51b8252602060c4820152601960e48201527f43616e6e6f742073657420636c69656e7420746f207a65726f0000000000000061010490910152606490fd5b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b604081019081106001600160401b03821117620001a857604052565b805160209081811015620002765750601f8251116200021757808251920151908083106200020957501790565b825f19910360031b1b161790565b90604051809263305a27a960e01b82528060048301528251908160248401525f935b8285106200025c575050604492505f838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935062000239565b906001600160401b038211620001a8575f54926001938481811c911680156200039b575b838210146200038757601f811162000351575b5081601f8411600114620002eb57509282939183925f94620002df575b50501b915f199060031b1c1916175f5560ff90565b015192505f80620002ca565b919083601f1981165f8052845f20945f905b888383106200033657505050106200031d575b505050811b015f5560ff90565b01515f1960f88460031b161c191690555f808062000310565b858701518855909601959485019487935090810190620002fd565b5f805284601f845f20920160051c820191601f860160051c015b8281106200037b575050620002ad565b5f81550185906200036b565b634e487b7160e01b5f52602260045260245ffd5b90607f16906200029a565b805160209081811015620004325750601f825111620003d357808251920151908083106200020957501790565b90604051809263305a27a960e01b82528060048301528251908160248401525f935b82851062000418575050604492505f838284010152601f80199101168101030190fd5b8481018201518686016044015293810193859350620003f5565b9192916001600160401b038111620001a85760019182548381811c9116801562000542575b828210146200038757601f81116200050c575b5080601f8311600114620004a85750819293945f926200049c575b50505f19600383901b1c191690821b17905560ff90565b015190505f8062000485565b90601f19831695845f52825f20925f905b888210620004f45750508385969710620004db575b505050811b01905560ff90565b01515f1960f88460031b161c191690555f8080620004ce565b808785968294968601518155019501930190620004b9565b835f5283601f835f20920160051c820191601f850160051c015b828110620005365750506200046a565b5f815501849062000526565b90607f16906200045756fe60806040526004361015610011575f80fd5b5f803560e01c806302bcc5b6146136aa5780630b76f77414613563578063109e94cf1461350e57806312faee6f146134bc578063146e869d146131a4578063181f5a77146131285780631cfe615c146128ff5780631d013164146126835780631e223a781461248a5780633177e0e8146124445780633b2fb7a8146123c85780633e871e4d146120595780633f4ba83a14611f9a578063439a301214611eb15780634720845714611e665780634879bf5014611d945780635c975abb14611d5357806360ed0f6114611d0157806363c13a89146117275780636a2215de146116ea57806372723ce61461167857806377bd924f146114fd57806379ba5097146113b75780637ebf879c146112695780637fb61b27146112005780638456cb591461116957806384b0196e14610ff5578063a50366b814610d7d578063a9c9a91814610d02578063aab396bd14610cc6578063b734c0f414610b20578063bb0a28021461085c578063c9f905051461080c578063d1ad3b5c146107b8578063e82ad7d41461076c578063ea320e0b14610706578063eccec5a814610686578063f2233951146102df5763f2fde38b146101c7575f80fd5b346102dc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc576101fe6139df565b61020661493c565b73ffffffffffffffffffffffffffffffffffffffff8091169033821461027e57817fffffffffffffffffffffffff0000000000000000000000000000000000000000600954161760095560085460081c167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12788380a380f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152fd5b80fd5b50346102dc577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360161026081126105e1576101008091126105e157610160807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffefc360112610682576040519061035482613a54565b6101043582526101243567ffffffffffffffff811681036106825760208301526101443560408301526101643563ffffffff811681036106825760608301526101843580151581036106825760808301526101a43561ffff811681036106825760a083015273ffffffffffffffffffffffffffffffffffffffff926101c43584811681036106825760c08401526101e43560e084015261020435908482168203610682578301526102243583811681036106825761012083015261024435838116908181036106825761014084015233036106585781518452600360205260408420549081156106265760405160208101916104ea83868051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b81526104f581613a23565b519020036105f457508181610508613c8b565b16610511613cae565b610519613cd1565b90823b156105f0576040517f303d0c6b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201529116602482015260c43560448201529082908290606490829084905af180156105e5576105cd575b5050610596613cae565b9060405191608435835216907f86b3c6cd112e577d6718b4db3f703d34c465b139abccfa785baf082f32b0d1d7602060243592a380f35b6105d690613a40565b6105e157815f61058c565b5080fd5b6040513d84823e3d90fd5b8380fd5b60249051604051907f41dc962e0000000000000000000000000000000000000000000000000000000082526004820152fd5b60248351604051907f41dc962e0000000000000000000000000000000000000000000000000000000082526004820152fd5b60046040517f8bec23e7000000000000000000000000000000000000000000000000000000008152fd5b5f80fd5b50346102dc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc576107026040516106c481613a71565b600181527f3100000000000000000000000000000000000000000000000000000000000000602082015260405191829160208352602083019061393a565b0390f35b50346102dc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc5760043561074161493c565b80600d557f9e61804d6612d246c631ef274d8536564cec547c96c34bf65526f43f1a2b35f88280a280f35b50346102dc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc5760206107ae6107a9613923565b6147b0565b6040519015158152f35b50346102dc5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc576108096107f3613923565b6107fb613996565b6108036139a9565b91614482565b80f35b50346102dc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc57602061084e610849613923565b6153f6565b63ffffffff60405191168152f35b50346102dc5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc5760243567ffffffffffffffff8116600435818303610682576108ac6139a9565b91808552600260205273ffffffffffffffffffffffffffffffffffffffff90816108f960408820545f52600a60205273ffffffffffffffffffffffffffffffffffffffff60405f20541690565b16916109068315156147ed565b8361092a86889190916040519260a01b9060c01b1782526020600c83209201604052565b03610af6578387526003602052604087205415610af65761095f908288526002602052604088209663ffffffff9283916153f6565b168015610acc576003880154839160c082901c8316610ac1575060a01c1682421610155b15610a975760048897015416803b15610a93578680916024604051809481937fec8669bd0000000000000000000000000000000000000000000000000000000083528a60048401525af1908115610a88578791610a70575b5084905260036020525f6040872055604051941690837f4758a8497c4ad627d70ac39125f4a224d8e0f0da580747522c0f6f7dbbb136d78780a4803b15610a6b5760248385819381957f5012554600000000000000000000000000000000000000000000000000000000845260048401525af180156105e557610a5b5750f35b610a6490613a40565b6102dc5780f35b505050fd5b610a7990613a40565b610a8457855f6109db565b8580fd5b6040513d89823e3d90fd5b8680fd5b60046040517fdcdd9ec3000000000000000000000000000000000000000000000000000000008152fd5b919050871610610983565b60046040517fefb74efe000000000000000000000000000000000000000000000000000000008152fd5b60046040517ffc5ae87d000000000000000000000000000000000000000000000000000000008152fd5b50346102dc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc57610b5761493c565b805b600b54811015610c2457807f097aaa1df767cddef542d98d7e8530f358b603bdcad52fbd99b1ca17f1eb24986040610b9260019461437a565b905460039173ffffffffffffffffffffffffffffffffffffffff90610bb6876143af565b905490851b1c895281602093600a8552868b2092861b1c167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055610bfe866143af565b905490841b1c92610c0e8761437a565b9054911b1c16908351928352820152a101610b59565b50600b545f600b5580610c84575b50600c545f600c5580610c43575080f35b600c5f527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7908101905b818110610c7957505080f35b5f8155600101610c6d565b600b5f527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9908101905b818110610cbb5750610c32565b5f8155600101610cae565b50346102dc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc576020600d54604051908152f35b50346102dc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc576020610d5f6004355f52600a60205273ffffffffffffffffffffffffffffffffffffffff60405f20541690565b73ffffffffffffffffffffffffffffffffffffffff60405191168152f35b50346102dc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc5760406101809167ffffffffffffffff610dc4613923565b826101608551610dd381613a23565b82815282602082015282878201528260608201528260808201528260a08201528260c08201528260e08201528261010082015282610120820152826101408201520152168152600260205220610160604051610e2e81613a23565b60ff60068454948584526001810154602085015260028101546040850152600381015473ffffffffffffffffffffffffffffffffffffffff8116606086015263ffffffff8160a01c16608086015263ffffffff8160c01c1660a086015260e01c60c085015273ffffffffffffffffffffffffffffffffffffffff60048201541660e085015273ffffffffffffffffffffffffffffffffffffffff600582015416610100850152015473ffffffffffffffffffffffffffffffffffffffff811661012084015261ffff8160a01c1661014084015260b01c16151582820152604051928352602081015160208401526040810151604084015273ffffffffffffffffffffffffffffffffffffffff606082015116606084015263ffffffff608082015116608084015263ffffffff60a08201511660a084015263ffffffff60c08201511660c084015273ffffffffffffffffffffffffffffffffffffffff60e08201511660e084015273ffffffffffffffffffffffffffffffffffffffff6101008201511661010084015273ffffffffffffffffffffffffffffffffffffffff6101208201511661012084015261ffff6101408201511661014084015201511515610160820152f35b50346102dc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc5761104d7f0000000000000000000000000000000000000000000000000000000000000000615480565b906110777f00000000000000000000000000000000000000000000000000000000000000006155f1565b9060405190602090602083019383851067ffffffffffffffff86111761113c5792849260206110f288966110e4986040528585526040519889987f0f000000000000000000000000000000000000000000000000000000000000008a5260e0858b015260e08a019061393a565b9088820360408a015261393a565b924660608801523060808801528460a088015286840360c088015251928381520193925b82811061112557505050500390f35b835185528695509381019392810192600101611116565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b50346102dc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc576111a061493c565b6111a86153c0565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0060085416176008557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b50346102dc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc5763ffffffff604060209273ffffffffffffffffffffffffffffffffffffffff6112576139df565b16815260048452205416604051908152f35b50346102dc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc576112a16139df565b6112a961493c565b600f549073ffffffffffffffffffffffffffffffffffffffff9081831661135957169081156112fb577fffffffffffffffffffffffff00000000000000000000000000000000000000001617600f5580f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f496e76616c69642057616c6c6574466163746f727920616464726573730000006044820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f57616c6c6574466163746f727920616c726561647920736574000000000000006044820152fd5b50346102dc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc5760095473ffffffffffffffffffffffffffffffffffffffff808216330361149f577fffffffffffffffffffffffff00000000000000000000000000000000000000006008549274ffffffffffffffffffffffffffffffffffffffff003360081b167fffffffffffffffffffffff0000000000000000000000000000000000000000ff85161760085516600955339160081c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d7573742062652070726f706f73656420636c69656e740000000000000000006044820152fd5b50346102dc576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc5760043567ffffffffffffffff81168091036105e1578152600260205261157760408220545f52600a60205273ffffffffffffffffffffffffffffffffffffffff60405f20541690565b73ffffffffffffffffffffffffffffffffffffffff809116330361065857818161159f613c8b565b166115a8613cae565b6115b0613cd1565b90823b156105f0576040517fb676899800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201529116602482015260c43560448201529082908290606490829084905af180156105e557611664575b505061162d613cae565b9060405191608435835216907fac42dfa0c3108216736b316015e667f8371ff8ebba59963eafbb7c9600fb2b85602060243592a380f35b61166d90613a40565b6105e157815f611623565b50346102dc5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc576116b0613923565b506116b9613996565b506116c26139bc565b5060643573ffffffffffffffffffffffffffffffffffffffff811603610682576108096153c0565b50346102dc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc576020610d5f6004356143e4565b50346102dc576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc5760043567ffffffffffffffff81116105e157366023820112156105e157611789903690602481600401359101613b81565b611791613996565b9061179a6139a9565b916117a3613c03565b6084359182151583036106825760a43573ffffffffffffffffffffffffffffffffffffffff811681036106825760e43573ffffffffffffffffffffffffffffffffffffffff8116810361068257610104359273ffffffffffffffffffffffffffffffffffffffff84168403610682576024602073ffffffffffffffffffffffffffffffffffffffff600f5416604051928380927f439a301200000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff881660048301525afa908115611cf6578a91611cb8575b5015611c8e57600654976118a267ffffffffffffffff8a16613c45565b67ffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000819a1617600655804263ffffffff16906118e691614362565b9760405180602081019260208452604082016119019161393a565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810182526119319082613a8d565b51902097604051986119428a613a23565b610124358a5260208a015260c43560408a01523360608a015263ffffffff16608089015263ffffffff1660a088015263ffffffff1660c087015273ffffffffffffffffffffffffffffffffffffffff1660e086015273ffffffffffffffffffffffffffffffffffffffff1661010085015273ffffffffffffffffffffffffffffffffffffffff1661012084015261ffff166101408301521515610160820152818352600260205260408320908051825560208101516001830155604081015160028301556003820191606082015173ffffffffffffffffffffffffffffffffffffffff16927fffffffffffffffffffffffff00000000000000000000000000000000000000009384825416178155608083015163ffffffff16611aa99082907fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff77ffffffff000000000000000000000000000000000000000083549260a01b169116179055565b60a083015181547fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff1660c09190911b7bffffffff0000000000000000000000000000000000000000000000001617815560c083015181547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660e09190911b7fffffffff00000000000000000000000000000000000000000000000000000000161790556004810160e083015173ffffffffffffffffffffffffffffffffffffffff16848254161790556005810161010083015173ffffffffffffffffffffffffffffffffffffffff16848254161790556006019161012082015173ffffffffffffffffffffffffffffffffffffffff169083541617825561014081015161ffff16611c139083907fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff75ffff000000000000000000000000000000000000000083549260a01b169116179055565b610160015181547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff1690151560b01b76ff00000000000000000000000000000000000000000000161790558060405192807f589597baf2ab6b17bd19e91d8731821ee0d411638aa2cfe6c696227301f0fa8691a28152602090f35b60046040517f23455ba1000000000000000000000000000000000000000000000000000000008152fd5b90506020813d602011611cee575b81611cd360209383613a8d565b81010312611cea57611ce490614340565b5f611885565b8980fd5b3d9150611cc6565b6040513d8c823e3d90fd5b50346102dc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc5767ffffffffffffffff6040602092600435815260058452205416604051908152f35b50346102dc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc57602060ff600854166040519015158152f35b50346102dc576101e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc5760043563ffffffff8116810361068257611ddd613996565b906101807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc360112611e625767ffffffffffffffff916101c435838111611e5e5736602382011215611e5e578060040135948486116102dc5736602487840101116102dc575091602094916024611e55940191614c5b565b60405191168152f35b8480fd5b8280fd5b50346102dc5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc5760206107ae611ea3613923565b611eab613996565b906149be565b50346102dc57602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc57611eeb6139df565b8273ffffffffffffffffffffffffffffffffffffffff602481600f54169360405194859384927f439a30120000000000000000000000000000000000000000000000000000000084521660048301525afa918215611f8e578092611f56575b50506040519015158152f35b9091508282813d8311611f87575b611f6e8183613a8d565b810103126102dc5750611f8090614340565b5f80611f4a565b503d611f64565b604051903d90823e3d90fd5b50346102dc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc57611fd161493c565b60085460ff81161561202f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166008557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b60046040517f8dfc202b000000000000000000000000000000000000000000000000000000008152fd5b50346102dc5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc5767ffffffffffffffff600435818111611e62576120aa903690600401613c14565b9190602435828111611e5e576120c4903690600401613c14565b9190928285148015906123c0575b61237e57855b85811061232e575080851161228957680100000000000000009081861161113c57600b5486600b558087106122ea575b5082600b8852875b8781106122b6575050831161228957821161113c57600c5482600c55808310612245575b5082600c8652855b83811061220a57505060405193604085528060408601527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111610a845760051b809160608601378301906080606083019282602094606088840301602089015252019291855b8281106121d457867f7506726dacdc314a20fa5c1f94f56eba44f3680a139a6bc48157fc97b09d86c587870388a180f35b90919293828060019273ffffffffffffffffffffffffffffffffffffffff6121fb89613a02565b168152019501939291016121a3565b600190602061221884613cf4565b930192817fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701550161213c565b600c5f52827fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c791820191015b81811061227e5750612134565b5f8155600101612271565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b60019060208335930192817f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9015501612110565b600b5f52867f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db991820191015b8181106123235750612108565b5f8155600101612316565b6123398187856142f0565b3573ffffffffffffffffffffffffffffffffffffffff8061236361235e85898b6142f0565b613cf4565b169081159283156123a8575b50505061237e576001016120d8565b60046040517fea9b3bb6000000000000000000000000000000000000000000000000000000008152fd5b8a52600a60205260408a2054161490505f808061236f565b5084156120d2565b50346102dc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc5761070260405161240681613a71565b600981527f6e6f6f7370686572650000000000000000000000000000000000000000000000602082015260405191829160208352602083019061393a565b50346102dc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc57602067ffffffffffffffff60065416604051908152f35b50346102dc576102207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc5767ffffffffffffffff600435818111611e62576124dc903690600401613be5565b6024358281116105f0576124f4903690600401613be5565b604435838111611e5e5761250c903690600401613be5565b612514613c03565b906084359273ffffffffffffffffffffffffffffffffffffffff9687851685036106825760a435908782116102dc5750612552903690600401613ace565b946101607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3c360112610682576040519661258b88613a54565b60c435885260e43590811681036106825760208801526101043560408801526101243563ffffffff811681036106825760608801526101443580151581036106825760808801526101643561ffff811681036106825760a08801526101843588811681036106825760c08801526101a43560e08801526101c4358881168103610682576101008801526101e4358881168103610682576101208801526102043597881688036106825761264397610140880152613d66565b6040516003821015612656576020918152f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b50346102dc5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc576126bb613923565b6024359073ffffffffffffffffffffffffffffffffffffffff90818316809303610682576126e76139bc565b9067ffffffffffffffff606435818111610a9357612709903690600401613ace565b9161271381614873565b156128d557168552602060028152836127e46040882060405161273581613a23565b61016060ff6006845494858552600181015489860152600281015460408601526003810154888116606087015263ffffffff808260a01c1660808801528160c01c1660a087015260e01c60c08601528760048201541660e086015287600582015416610100860152015486811661012085015261ffff8160a01c1661014085015260b01c1615159101525f52600a60205273ffffffffffffffffffffffffffffffffffffffff60405f20541690565b1633036106585760248185600f5416604051928380927f439a30120000000000000000000000000000000000000000000000000000000082528a60048301525afa918215610a8857879261289f575b505015611c8e578385943b15611e5e5761288e93858094604051968795869485937fa04889e90000000000000000000000000000000000000000000000000000000085521660048401526040602484015260448301906148da565b03925af180156105e557610a5b5750f35b90809250813d83116128ce575b6128b68183613a8d565b81010312610a84576128c790614340565b5f80612833565b503d6128ac565b60046040517f1f6a65b6000000000000000000000000000000000000000000000000000000008152fd5b50346102dc5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc57612937613923565b90612940613996565b612948613d15565b50612951613d15565b5061295a6153c0565b61296383614873565b156130ca5767ffffffffffffffff8316825260026020526040822073ffffffffffffffffffffffffffffffffffffffff6129bd82545f52600a60205273ffffffffffffffffffffffffffffffffffffffff60405f20541690565b16916129ca8315156147ed565b6129ed81869190916040519260a01b9060c01b1782526020600c83209201604052565b936129f6613d15565b508481526003602052604081205415612bf6575090612bf49291847f35f9cf70f5d58f985dc3e2224afa25b20b8f02703cf91ef7e6f968cbeb85317660e067ffffffffffffffff61018099600187015473ffffffffffffffffffffffffffffffffffffffff60068901548160048b01541660028b01548360058d0154169160405195612a8187613a54565b8b87528888166020880152604087015263ffffffff8c16606087015260ff8460b01c161515608087015261ffff8460a01c1660a087015260c0860152878501526101008401521661012082015288610140820152975b6001880154978960068201549160ff73ffffffffffffffffffffffffffffffffffffffff610120816005600286015495015416940151169363ffffffff6040519c168c5261ffff8160a01c1660208d015260b01c16151560408b015260608a0152608089015260a088015260c08701521693a460405192835260208301908051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565bf35b9473ffffffffffffffffffffffffffffffffffffffff60048401541661ffff600685015460a01c1673ffffffffffffffffffffffffffffffffffffffff60058601541690612c4881600288015461432d565b916024602073ffffffffffffffffffffffffffffffffffffffff600f5416604051928380927f439a30120000000000000000000000000000000000000000000000000000000082528960048301525afa9081156130bf578b91613081575b50158015613079575b611c8e57899367ffffffffffffffff86168552600260205273ffffffffffffffffffffffffffffffffffffffff600360408720015416813b15610a84578560a492819560405197889687957f11d8668c0000000000000000000000000000000000000000000000000000000087526004870152602486015260448501528d606485015260848401525af180156105e557613065575b505060018301549373ffffffffffffffffffffffffffffffffffffffff60068501548160058701541660028701548360048901541691604051997fc7fb32fb000000000000000000000000000000000000000000000000000000008b528b60048c015267ffffffffffffffff881660248c015260448b015263ffffffff881660648b015261ffff8460a01c1660848b015260ff8460b01c16151560a48b015260c48a015260e489015261010488015216610124860152610160948581610144818b865af190811561305a578891612f1e575b5060e067ffffffffffffffff612bf49796959489946101809b6040867f35f9cf70f5d58f985dc3e2224afa25b20b8f02703cf91ef7e6f968cbeb853176979b825190612f006020830180948051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b8152612f0b81613a23565b5190209188815260036020522055612ad7565b90508581813d8311613053575b612f358183613a8d565b8101031261304f5760405190612f4a82613a54565b80518252602081015167ffffffffffffffff81168103611cea57602083015260408101516040830152606081015163ffffffff81168103611cea576060830152612f9660808201614340565b608083015260a081015161ffff81168103611cea57612bf49796959489946101809b60408660e09667ffffffffffffffff9660a07f35f9cf70f5d58f985dc3e2224afa25b20b8f02703cf91ef7e6f968cbeb8531769a0152612ffa60c08201614852565b60c08301528781015188830152610100613015818301614852565b90830152610120613027818301614852565b90830152613039610140809201614852565b908201529650509b509450949596975050612e16565b8780fd5b503d612f2b565b6040513d8a823e3d90fd5b61306e90613a40565b610a8457855f612d44565b508315612caf565b90506020813d6020116130b7575b8161309c60209383613a8d565b810103126130b3576130ad90614340565b5f612ca6565b8a80fd5b3d915061308f565b6040513d8d823e3d90fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f496e76616c6964537562736372697074696f6e000000000000000000000000006044820152fd5b50346102dc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc5761070260405161316681613a71565b600d81527f526f757465725f76312e302e3000000000000000000000000000000000000000602082015260405191829160208352602083019061393a565b50346102dc576101807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc577fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000060065467ffffffffffffffff61320d818316613c45565b169182911617600655805f52600260205260405f2090600435825560243560018301556044356002830155600382016064359273ffffffffffffffffffffffffffffffffffffffff91828516809503610682577fffffffffffffffffffffffff0000000000000000000000000000000000000000948582541617815560843563ffffffff9081811681036106825782547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b77ffffffff00000000000000000000000000000000000000001617825560a43581811681036106825782547fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff1660c09190911b7bffffffff0000000000000000000000000000000000000000000000001617825560c43590811681036106825781547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1660e09190911b7fffffffff00000000000000000000000000000000000000000000000000000000161790556004810160e4358381168091036106825785825416179055600581019061010435918383168093036106825760069286825416179055019261012435918216809203610682578354161782556101443561ffff811681036106825782547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff1660a09190911b75ffff000000000000000000000000000000000000000016178255610164359182151583036106825760209261348f91907fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff76ff00000000000000000000000000000000000000000000835492151560b01b169116179055565b807f589597baf2ab6b17bd19e91d8731821ee0d411638aa2cfe6c696227301f0fa865f80a2604051908152f35b50346102dc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc57602073ffffffffffffffffffffffffffffffffffffffff600f5416604051908152f35b50346102dc57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc57602073ffffffffffffffffffffffffffffffffffffffff60085460081c16604051908152f35b50346102dc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102dc5761359b613923565b67ffffffffffffffff811690818352600260205273ffffffffffffffffffffffffffffffffffffffff6003604085200154163303613680576135dc906147b0565b6136565780825260026020526003604083200177ffffffff00000000000000000000000000000000000000007fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff8254161790557f03b17ad6569d65108b59dea7f9a46de06d69926d23606764e8c086cac35e18d38280a280f35b60046040517f06eb10c8000000000000000000000000000000000000000000000000000000008152fd5b60046040517fa7fba711000000000000000000000000000000000000000000000000000000008152fd5b503461068257602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610682576136e4613923565b916136ed61493c565b67ffffffffffffffff831690815f526002815260405f209360405161371181613a23565b855481526001860154838201526002860154604082015260038601549073ffffffffffffffffffffffffffffffffffffffff918281166060830152608063ffffffff928284809460c01c1660a083015260e01c60c082015260ff60068660048d0154169b60e084019c8d5287600582015416610100850152015486811661012084015261ffff8160a01c1661014084015260b01c16151561016082015201526137b9836153f6565b908116928361383a575b8686600287828452526003604083200177ffffffff00000000000000000000000000000000000000007fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff8254161790557f03b17ad6569d65108b59dea7f9a46de06d69926d23606764e8c086cac35e18d38280a280f35b9061385b90916040519260a01b9060c01b1782526020600c83209201604052565b95865f526003845260405f2054613873575b806137c3565b5116803b15610682575f80916024604051809481937fec8669bd0000000000000000000000000000000000000000000000000000000083528b60048401525af1801561391857613900575b50828585966002959652600384525f60408820557f4758a8497c4ad627d70ac39125f4a224d8e0f0da580747522c0f6f7dbbb136d78780a48392915f8061386d565b600293945061390e90613a40565b835f9493506138be565b6040513d5f823e3d90fd5b6004359067ffffffffffffffff8216820361068257565b91908251928382525f5b8481106139825750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f845f6020809697860101520116010190565b602081830181015184830182015201613944565b6024359063ffffffff8216820361068257565b6044359063ffffffff8216820361068257565b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361068257565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361068257565b359073ffffffffffffffffffffffffffffffffffffffff8216820361068257565b610180810190811067ffffffffffffffff82111761113c57604052565b67ffffffffffffffff811161113c57604052565b610160810190811067ffffffffffffffff82111761113c57604052565b6040810190811067ffffffffffffffff82111761113c57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761113c57604052565b81601f8201121561068257803590602067ffffffffffffffff9384841161113c5760409460405195613b05848760051b0188613a8d565b8587528387019284606080980287010195818711610682578501935b868510613b3357505050505050505090565b878583031261068257825190888201908282108683111761113c57899288928652613b5d88613a02565b8152613b6a838901613a02565b838201528588013586820152815201940193613b21565b92919267ffffffffffffffff821161113c5760405191613bc960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184613a8d565b829481845281830111610682578281602093845f960137010152565b9080601f8301121561068257816020613c0093359101613b81565b90565b6064359061ffff8216820361068257565b9181601f840112156106825782359167ffffffffffffffff8311610682576020808501948460051b01011161068257565b67ffffffffffffffff809116908114613c5e5760010190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60643573ffffffffffffffffffffffffffffffffffffffff811681036106825790565b60443573ffffffffffffffffffffffffffffffffffffffff811681036106825790565b60a43573ffffffffffffffffffffffffffffffffffffffff811681036106825790565b3573ffffffffffffffffffffffffffffffffffffffff811681036106825790565b60405190613d2282613a54565b5f610140838281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b93919695966101408801519573ffffffffffffffffffffffffffffffffffffffff5f971633036106585788515f52600360205260405f205480156142e2576040516020810190613e50828d8051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b6101608152613e5e81613a23565b519020036142d557885173ffffffffffffffffffffffffffffffffffffffff60c08b01511691815f52600360205260405f205415610af6576024602073ffffffffffffffffffffffffffffffffffffffff600f5416604051928380927f439a30120000000000000000000000000000000000000000000000000000000082528860048301525afa908115613918575f9161429b575b5015611c8e57823b1561068257613f49925f92836040518096819582947f711dc79200000000000000000000000000000000000000000000000000000000845260048401526040602484015260448301906148da565b03925af1801561391857614288575b5061ffff60a08901511661ffff851614614274575b67ffffffffffffffff6020890151169063ffffffff60608a0151169260808a015115159683895260026020526040892095604051613faa81613a23565b87548152600188015460208201526002880154604082015261016060ff600660038b01549a73ffffffffffffffffffffffffffffffffffffffff8c16606086015263ffffffff8c60a01c16608086015263ffffffff8c60c01c1660a08601528b60e01c60c086015273ffffffffffffffffffffffffffffffffffffffff60048201541660e086015273ffffffffffffffffffffffffffffffffffffffff600582015416610100860152015473ffffffffffffffffffffffffffffffffffffffff811661012085015261ffff8160a01c1661014085015260b01c16151591015273ffffffffffffffffffffffffffffffffffffffff87163b15611cea5791899796959492918894926040519a8b998a9889977f4a93fe990000000000000000000000000000000000000000000000000000000089526004890152602488015261ffff166044870152606486015273ffffffffffffffffffffffffffffffffffffffff16608485015260a48401610120905261012484016141289161393a565b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc91828582030160c486015261415e9161393a565b908382030160e48401526141719161393a565b82610104830152039273ffffffffffffffffffffffffffffffffffffffff165af180156105e557908291614260575b505091805167ffffffffffffffff602083015116907fba77b3b4a018fa7a7aadc251579fd79d3d694fa8c4407af24f30823f10fb2eb060e060408501519463ffffffff6060820151169060808101511515908381015173ffffffffffffffffffffffffffffffffffffffff610100830151169073ffffffffffffffffffffffffffffffffffffffff61014081610120860151169401511693604051958652602086015260408501526060840152608083015260a08201525f60c0820152a4565b61426990613a40565b6102dc57805f6141a0565b8751865260036020525f6040872055613f6d565b614293919650613a40565b5f945f613f58565b90506020813d6020116142cd575b816142b660209383613a8d565b81010312610682576142c790614340565b5f613ef3565b3d91506142a9565b5060029750505050505050565b506001985050505050505050565b91908110156143005760051b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b81810292918115918404141715613c5e57565b5190811515820361068257565b90600163ffffffff80931601918211613c5e57565b91909163ffffffff80809416911601918211613c5e57565b600c5481101561430057600c5f527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701905f90565b600b5481101561430057600b5f527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db901905f90565b600b545f5b81811061442157602483604051907f80833e330000000000000000000000000000000000000000000000000000000082526004820152fd5b8261442b826143af565b919054600392831b1c1461444257506001016143e9565b915073ffffffffffffffffffffffffffffffffffffffff92506144649061437a565b9054911b1c1690565b63ffffffff809116908114613c5e5760010190565b90919267ffffffffffffffff82165f52600260205260405f20916144a5816153f6565b9163ffffffff8316156147a85763ffffffff831663ffffffff86161161479f575b67ffffffffffffffff82165f5260076020526144eb63ffffffff60405f20541661434d565b63ffffffff811615614797575b5f9681975b63ffffffff881663ffffffff8a16111580614782575b156146d25761453b89869190916040519260a01b9060c01b1782526020600c83209201604052565b5f818152600360205260409020541561468257600388015463ffffffff8160c01c16155f1461466d5763ffffffff9060a01c1663ffffffff421610155b61459d575b5061459561458f63ffffffff9261446d565b9961446d565b9890506144fd565b9060049073ffffffffffffffffffffffffffffffffffffffff828a01541691823b15610682578360245f928360405196879485937fec8669bd0000000000000000000000000000000000000000000000000000000085528401525af19081156139185763ffffffff936145959361458f9361465e575b50805f5260036020525f6040812055848d169067ffffffffffffffff8a16907f4758a8497c4ad627d70ac39125f4a224d8e0f0da580747522c0f6f7dbbb136d75f80a492505061457d565b61466790613a40565b5f614613565b5063ffffffff871663ffffffff8b1610614578565b509761459563ffffffff9167ffffffffffffffff87165f52600760205260405f208382167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000082541617905561446d565b94505093509450925063ffffffff81166146eb57505050565b61471b63ffffffff917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93614362565b16019063ffffffff8211613c5e5767ffffffffffffffff165f52600760205260405f209063ffffffff825491169063ffffffff8116821161475b57505050565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000016179055565b5063ffffffff821663ffffffff821610614513565b5060016144f8565b935081936144c6565b945050505050565b6147dc906147bd816153f6565b909190916040519260a01b9060c01b1782526020600c83209201604052565b5f52600360205260405f2054151590565b156147f457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f436f6f7264696e61746f72206e6f7420666f756e6400000000000000000000006044820152fd5b519073ffffffffffffffffffffffffffffffffffffffff8216820361068257565b67ffffffffffffffff16801580156148ad575b6148a8575f52600260205263ffffffff80600360405f20015460a01c16141590565b505f90565b50805f52600260205273ffffffffffffffffffffffffffffffffffffffff600360405f2001541615614886565b9081518082526020808093019301915f5b8281106148f9575050505090565b8351805173ffffffffffffffffffffffffffffffffffffffff908116875281840151168684015260409081015190860152606090940193928101926001016148eb565b73ffffffffffffffffffffffffffffffffffffffff60085460081c16330361496057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c6520627920636c69656e740000000000000000006044820152fd5b6149c781614873565b158015614c2f575b614c295767ffffffffffffffff81165f52602060028152604092835f2060028101549081614a1c575b50506003926147bd614a099261434d565b5f52525f2054614a1857600190565b5f90565b73ffffffffffffffffffffffffffffffffffffffff90614a4f826004830154169361ffff600684015460a01c169061432d565b9160058160038401541692015416908751907fdd62ed3e00000000000000000000000000000000000000000000000000000000825260048201528160248201528581604481875afa908115614be3579083915f91614bf8575b5010614bed5780614b6957848331915b60248951809681937fc3909fa100000000000000000000000000000000000000000000000000000000835260048301525afa928315614b5f575f93614b30575b50828110928315614b1a575b505050614b12575f806149f8565b505050505f90565b908092935003908111613c5e57105f8080614b04565b9092508481813d8311614b58575b614b488183613a8d565b810103126106825751915f614af8565b503d614b3e565b87513d5f823e3d90fd5b86517f70a082310000000000000000000000000000000000000000000000000000000081528360048201528581602481855afa908115614be3579086915f91614bb4575b5091614ab8565b82819392503d8311614bdc575b614bcb8183613a8d565b81010312610682578590515f614bad565b503d614bc1565b88513d5f823e3d90fd5b505050505050505f90565b809250878092503d8311614c22575b614c118183613a8d565b81010312610682578290515f614aa8565b503d614c07565b50505f90565b5067ffffffffffffffff81165f526002602052600360405f20015460e01c63ffffffff831610156149cf565b9160a4359173ffffffffffffffffffffffffffffffffffffffff831683036106825760405160208101907fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b1682527fffffffff000000000000000000000000000000000000000000000000000000008660e01b16603482015260188152614ce581613a71565b51902094855f52600560205267ffffffffffffffff60405f205416806153b6575063ffffffff821642101561538c5763ffffffff60c4351660c435036106825763ffffffff60e4351660e435036106825763ffffffff610104351661010435036106825761ffff61018435166101843503610682576101a43515156101a435036106825773ffffffffffffffffffffffffffffffffffffffff610164351661016435036106825773ffffffffffffffffffffffffffffffffffffffff610144351661014435036106825773ffffffffffffffffffffffffffffffffffffffff6101243516610124350361068257604051602081017fb8788b250b84860cd5f64702d6e150c7e2008d8b76193c378ebcc633baea3aee815273ffffffffffffffffffffffffffffffffffffffff8616604083015263ffffffff60c43516606083015263ffffffff60e43516608083015263ffffffff610104351660a083015261ffff610184351660c083015260643560e08301526101a435151561010083015273ffffffffffffffffffffffffffffffffffffffff610164351661012083015260843561014083015273ffffffffffffffffffffffffffffffffffffffff610144351661016083015273ffffffffffffffffffffffffffffffffffffffff61012435166101808301526101a06044358184015282526101c082019180831067ffffffffffffffff84111761113c5761026091836040528151902063ffffffff6101e08301967f509241746ef564967d98a33c0f644a9ce106efeae4094643f44a2ab1cffcfbb98852818b166102008501521661022083015261024082015260808352019381851067ffffffffffffffff86111761113c576042614fb894614fb293614fc197604052519020614f776156c2565b90604051917f190100000000000000000000000000000000000000000000000000000000000083526002830152602282015220923691613b81565b906157fa565b90929192615834565b6040517f7ac3c02f00000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff87165afa908115613918575f9161533b575b5073ffffffffffffffffffffffffffffffffffffffff8091169116036153115773ffffffffffffffffffffffffffffffffffffffff906006549361506167ffffffffffffffff8616613c45565b947fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000067ffffffffffffffff871691161760065567ffffffffffffffff85165f52600260205261524660405f2060443581556064356001820155608435600282015560066003820191615186876150d5613cd1565b60e43560c01b7bffffffff0000000000000000000000000000000000000000000000001677ffffffff000000000000000000000000000000000000000060c43560a01b169190921673ffffffffffffffffffffffffffffffffffffffff1617177fffffffff000000000000000000000000000000000000000000000000000000006101043560e01b16179093557fffffffffffffffffffffffff000000000000000000000000000000000000000092565b600481018054841661012435891617905560058101805484166101443589161790550180547fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff921661016435871617919091166101843560a01b75ffff00000000000000000000000000000000000000001617815580547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff166101a435151560b01b76ff0000000000000000000000000000000000000000000016179055565b67ffffffffffffffff85167f589597baf2ab6b17bd19e91d8731821ee0d411638aa2cfe6c696227301f0fa865f80a25f52600560205260405f2067ffffffffffffffff85167fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000825416179055165f52600460205260405f209081549063ffffffff821663ffffffff8216116152dc575b50505090565b63ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000911691161790555f80806152d6565b60046040517f10c74b03000000000000000000000000000000000000000000000000000000008152fd5b90506020813d602011615384575b8161535660209383613a8d565b810103126106825773ffffffffffffffffffffffffffffffffffffffff61537d8192614852565b9150615014565b3d9150615349565b60046040517f0819bdcd000000000000000000000000000000000000000000000000000000008152fd5b9550505050505090565b60ff600854166153cc57565b60046040517fd93c0665000000000000000000000000000000000000000000000000000000008152fd5b67ffffffffffffffff81165f52600260205261541560405f2091614873565b15615456576003015463ffffffff9081808260a01c169160c01c16824216828110614b1257811561544d576001928491031604011690565b50505050600190565b60046040517f1a00354f000000000000000000000000000000000000000000000000000000008152fd5b60ff81146154d65760ff811690601f82116154ac57604051916154a283613a71565b8252602082015290565b60046040517fb3512b0c000000000000000000000000000000000000000000000000000000008152fd5b506040515f8054906001908260011c600184169283156155e7575b60209485831085146155ba57828752869490811561557b5750600114615520575b5050613c0092500382613a8d565b5f8080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56395935091905b818310615563575050613c0093508201015f80615512565b8554878401850152948501948694509183019161554b565b9050613c009593507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201015f80615512565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b90607f16906154f1565b60ff81146156135760ff811690601f82116154ac57604051916154a283613a71565b506040515f60018054918260011c600184169283156156b8575b60209485831085146155ba57828752869490811561557b575060011461565b575050613c0092500382613a8d565b9093915060015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6935f915b8183106156a0575050613c0093508201015f80615512565b85548784018501529485019486945091830191615688565b90607f169061562d565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163014806157d1575b1561572a577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a0815260c0810181811067ffffffffffffffff82111761113c5760405251902090565b507f00000000000000000000000000000000000000000000000000000000000000004614615701565b815191906041830361582a576158239250602082015190606060408401519301515f1a906158ec565b9192909190565b50505f9160029190565b60048110156126565780615846575050565b600181036158785760046040517ff645eedf000000000000000000000000000000000000000000000000000000008152fd5b600281036158b157602482604051907ffce698f70000000000000000000000000000000000000000000000000000000082526004820152fd5b6003146158bb5750565b602490604051907fd78bce0c0000000000000000000000000000000000000000000000000000000082526004820152fd5b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411615970579160209360809260ff5f9560405194855216868401526040830152606082015282805260015afa15613918575f5173ffffffffffffffffffffffffffffffffffffffff81161561596657905f905f90565b505f906001905f90565b5050505f916003919056fea2646970667358221220c543d1fd8e8b4e94559b5a72959bf4ee68cb3114af50514c5a89a0ad05d3bc0864736f6c63430008170033";

    public static final String FUNC_EIP712_NAME = "EIP712_NAME";

    public static final String FUNC_EIP712_VERSION = "EIP712_VERSION";

    public static final String FUNC_ACCEPTOWNERSHIP = "acceptOwnership";

    public static final String FUNC_CANCELCOMPUTESUBSCRIPTION = "cancelComputeSubscription";

    public static final String FUNC_CLIENT = "client";

    public static final String FUNC_CREATECOMPUTESUBSCRIPTION = "createComputeSubscription";

    public static final String FUNC_CREATESUBSCRIPTIONDELEGATEE = "createSubscriptionDelegatee";

    public static final String FUNC_CREATESUBSCRIPTIONFOR = "createSubscriptionFor";

    public static final String FUNC_DELEGATECREATEDIDS = "delegateCreatedIds";

    public static final String FUNC_EIP712DOMAIN = "eip712Domain";

    public static final String FUNC_FULFILL = "fulfill";

    public static final String FUNC_GETALLOWLISTID = "getAllowListId";

    public static final String FUNC_GETCOMPUTESUBSCRIPTION = "getComputeSubscription";

    public static final String FUNC_GETCOMPUTESUBSCRIPTIONINTERVAL = "getComputeSubscriptionInterval";

    public static final String FUNC_GETCONTRACTBYID = "getContractById";

    public static final String FUNC_GETLASTSUBSCRIPTIONID = "getLastSubscriptionId";

    public static final String FUNC_GETPROPOSEDCONTRACTBYID = "getProposedContractById";

    public static final String FUNC_GETWALLETFACTORY = "getWalletFactory";

    public static final String FUNC_HASSUBSCRIPTIONNEXTINTERVAL = "hasSubscriptionNextInterval";

    public static final String FUNC_ISVALIDWALLET = "isValidWallet";

    public static final String FUNC_LOCKFORVERIFICATION = "lockForVerification";

    public static final String FUNC_MAXSUBSCRIBERNONCE = "maxSubscriberNonce";

    public static final String FUNC_OWNERCANCELSUBSCRIPTION = "ownerCancelSubscription";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_PAYFROMCOORDINATOR = "payFromCoordinator";

    public static final String FUNC_PENDINGREQUESTEXISTS = "pendingRequestExists";

    public static final String FUNC_PREPARENODEVERIFICATION = "prepareNodeVerification";

    public static final String FUNC_PROPOSECONTRACTSUPDATE = "proposeContractsUpdate";

    public static final String FUNC_SENDREQUEST = "sendRequest";

    public static final String FUNC_SETALLOWLISTID = "setAllowListId";

    public static final String FUNC_SETWALLETFACTORY = "setWalletFactory";

    public static final String FUNC_TIMEOUTREQUEST = "timeoutRequest";

    public static final String FUNC_TIMEOUTSUBSCRIPTIONINTERVALSUPTO = "timeoutSubscriptionIntervalsUpTo";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TYPEANDVERSION = "typeAndVersion";

    public static final String FUNC_UNLOCKFORVERIFICATION = "unlockForVerification";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_UPDATECONTRACTS = "updateContracts";

    public static final Event ALLOWLISTIDSET_EVENT = new Event(
        "AllowListIdSet",
        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {})
    );

    public static final Event COMMITMENTTIMEDOUT_EVENT = new Event(
        "CommitmentTimedOut",
        Arrays.<TypeReference<?>>asList(
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Uint64>(true) {},
            new TypeReference<Uint32>(true) {}
        )
    );

    public static final Event CONTRACTSUPDATEPROPOSED_EVENT = new Event(
        "ContractsUpdateProposed",
        Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Address>>() {})
    );

    public static final Event CONTRACTSUPDATED_EVENT = new Event(
        "ContractsUpdated",
        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Address>() {})
    );

    public static final Event EIP712DOMAINCHANGED_EVENT = new Event("EIP712DomainChanged", Arrays.<TypeReference<?>>asList());

    public static final Event OWNERSHIPTRANSFERREQUESTED_EVENT = new Event(
        "OwnershipTransferRequested",
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {})
    );

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event(
        "OwnershipTransferred",
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {})
    );

    public static final Event PAUSED_EVENT = new Event("Paused", Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));

    public static final Event REQUESTPROCESSED_EVENT = new Event(
        "RequestProcessed",
        Arrays.<TypeReference<?>>asList(
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Uint64>(true) {},
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Uint32>() {},
            new TypeReference<Bool>() {},
            new TypeReference<Uint256>() {},
            new TypeReference<Address>() {},
            new TypeReference<Address>() {},
            new TypeReference<Address>() {},
            new TypeReference<Uint8>() {}
        )
    );

    public static final Event REQUESTSTART_EVENT = new Event(
        "RequestStart",
        Arrays.<TypeReference<?>>asList(
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Uint64>(true) {},
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Uint32>() {},
            new TypeReference<Uint16>() {},
            new TypeReference<Bool>() {},
            new TypeReference<Uint256>() {},
            new TypeReference<Address>() {},
            new TypeReference<Address>() {},
            new TypeReference<Address>() {}
        )
    );

    public static final Event SUBSCRIPTIONCANCELLED_EVENT = new Event(
        "SubscriptionCancelled",
        Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>(true) {})
    );

    public static final Event SUBSCRIPTIONCREATED_EVENT = new Event(
        "SubscriptionCreated",
        Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>(true) {})
    );

    public static final Event SUBSCRIPTIONFULFILLED_EVENT = new Event(
        "SubscriptionFulfilled",
        Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>(true) {}, new TypeReference<Address>(true) {})
    );

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));

    public static final Event VERIFICATIONFUNDSLOCKED_EVENT = new Event(
        "VerificationFundsLocked",
        Arrays.<TypeReference<?>>asList(
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Address>(true) {},
            new TypeReference<Uint256>() {}
        )
    );

    public static final Event VERIFICATIONFUNDSUNLOCKED_EVENT = new Event(
        "VerificationFundsUnlocked",
        Arrays.<TypeReference<?>>asList(
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Address>(true) {},
            new TypeReference<Uint256>() {}
        )
    );

    @Deprecated
    protected Router(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Router(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Router(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Router(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<String> EIP712_NAME() {
        final Function function = new Function(
            FUNC_EIP712_NAME,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {})
        );
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> EIP712_VERSION() {
        final Function function = new Function(
            FUNC_EIP712_VERSION,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {})
        );
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> acceptOwnership() {
        final Function function = new Function(FUNC_ACCEPTOWNERSHIP, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelComputeSubscription(BigInteger subscriptionId) {
        final Function function = new Function(
            FUNC_CANCELCOMPUTESUBSCRIPTION,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(subscriptionId)),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> client() {
        final Function function = new Function(
            FUNC_CLIENT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {})
        );
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createComputeSubscription(
        String containerId,
        BigInteger maxExecutions,
        BigInteger intervalSeconds,
        BigInteger redundancy,
        Boolean useDeliveryInbox,
        String feeToken,
        BigInteger feeAmount,
        String wallet,
        String verifier,
        byte[] routeId
    ) {
        final Function function = new Function(
            FUNC_CREATECOMPUTESUBSCRIPTION,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Utf8String(containerId),
                new org.web3j.abi.datatypes.generated.Uint32(maxExecutions),
                new org.web3j.abi.datatypes.generated.Uint32(intervalSeconds),
                new org.web3j.abi.datatypes.generated.Uint16(redundancy),
                new org.web3j.abi.datatypes.Bool(useDeliveryInbox),
                new org.web3j.abi.datatypes.Address(160, feeToken),
                new org.web3j.abi.datatypes.generated.Uint256(feeAmount),
                new org.web3j.abi.datatypes.Address(160, wallet),
                new org.web3j.abi.datatypes.Address(160, verifier),
                new org.web3j.abi.datatypes.generated.Bytes32(routeId)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createSubscriptionDelegatee(
        BigInteger nonce,
        BigInteger expiry,
        ComputeSubscription sub,
        byte[] signature
    ) {
        final Function function = new Function(
            FUNC_CREATESUBSCRIPTIONDELEGATEE,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint32(nonce),
                new org.web3j.abi.datatypes.generated.Uint32(expiry),
                sub,
                new org.web3j.abi.datatypes.DynamicBytes(signature)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createSubscriptionFor(ComputeSubscription sub) {
        final Function function = new Function(
            FUNC_CREATESUBSCRIPTIONFOR,
            Arrays.<Type>asList(sub),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> delegateCreatedIds(byte[] param0) {
        final Function function = new Function(
            FUNC_DELEGATECREATEDIDS,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {})
        );
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>> eip712Domain() {
        final Function function = new Function(
            FUNC_EIP712DOMAIN,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Bytes1>() {},
                new TypeReference<Utf8String>() {},
                new TypeReference<Utf8String>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Address>() {},
                new TypeReference<Bytes32>() {},
                new TypeReference<DynamicArray<Uint256>>() {}
            )
        );
        return new RemoteFunctionCall<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>(
            function,
            new Callable<Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>>() {
                @Override
                public Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>> call() throws Exception {
                    List<Type> results = executeCallMultipleValueReturn(function);
                    return new Tuple7<byte[], String, String, BigInteger, String, byte[], List<BigInteger>>(
                        (byte[]) results.get(0).getValue(),
                        (String) results.get(1).getValue(),
                        (String) results.get(2).getValue(),
                        (BigInteger) results.get(3).getValue(),
                        (String) results.get(4).getValue(),
                        (byte[]) results.get(5).getValue(),
                        convertToNative((List<Uint256>) results.get(6).getValue())
                    );
                }
            }
        );
    }

    public RemoteFunctionCall<TransactionReceipt> fulfill(
        byte[] input,
        byte[] output,
        byte[] proof,
        BigInteger numRedundantDeliveries,
        String nodeWallet,
        List<Payment> payments,
        Commitment commitment
    ) {
        final Function function = new Function(
            FUNC_FULFILL,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.DynamicBytes(input),
                new org.web3j.abi.datatypes.DynamicBytes(output),
                new org.web3j.abi.datatypes.DynamicBytes(proof),
                new org.web3j.abi.datatypes.generated.Uint16(numRedundantDeliveries),
                new org.web3j.abi.datatypes.Address(160, nodeWallet),
                new org.web3j.abi.datatypes.DynamicArray<Payment>(Payment.class, payments),
                commitment
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> getAllowListId() {
        final Function function = new Function(
            FUNC_GETALLOWLISTID,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {})
        );
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<ComputeSubscription> getComputeSubscription(BigInteger subscriptionId) {
        final Function function = new Function(
            FUNC_GETCOMPUTESUBSCRIPTION,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(subscriptionId)),
            Arrays.<TypeReference<?>>asList(new TypeReference<ComputeSubscription>() {})
        );
        return executeRemoteCallSingleValueReturn(function, ComputeSubscription.class);
    }

    public RemoteFunctionCall<BigInteger> getComputeSubscriptionInterval(BigInteger subscriptionId) {
        final Function function = new Function(
            FUNC_GETCOMPUTESUBSCRIPTIONINTERVAL,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(subscriptionId)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {})
        );
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getContractById(byte[] id) {
        final Function function = new Function(
            FUNC_GETCONTRACTBYID,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(id)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {})
        );
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getLastSubscriptionId() {
        final Function function = new Function(
            FUNC_GETLASTSUBSCRIPTIONID,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {})
        );
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getProposedContractById(byte[] id) {
        final Function function = new Function(
            FUNC_GETPROPOSEDCONTRACTBYID,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(id)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {})
        );
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getWalletFactory() {
        final Function function = new Function(
            FUNC_GETWALLETFACTORY,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {})
        );
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> hasSubscriptionNextInterval(BigInteger subscriptionId, BigInteger currentInterval) {
        final Function function = new Function(
            FUNC_HASSUBSCRIPTIONNEXTINTERVAL,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Uint32(currentInterval)
            ),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {})
        );
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isValidWallet(String walletAddr) {
        final Function function = new Function(
            FUNC_ISVALIDWALLET,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, walletAddr)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {})
        );
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> lockForVerification(ProofVerificationRequest proofRequest, Commitment commitment) {
        final Function function = new Function(
            FUNC_LOCKFORVERIFICATION,
            Arrays.<Type>asList(proofRequest, commitment),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> maxSubscriberNonce(String param0) {
        final Function function = new Function(
            FUNC_MAXSUBSCRIBERNONCE,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {})
        );
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> ownerCancelSubscription(BigInteger subscriptionId) {
        final Function function = new Function(
            FUNC_OWNERCANCELSUBSCRIPTION,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(subscriptionId)),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final Function function = new Function(FUNC_PAUSE, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final Function function = new Function(
            FUNC_PAUSED,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {})
        );
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> payFromCoordinator(
        BigInteger subscriptionId,
        String spenderWallet,
        String spenderAddress,
        List<Payment> payments
    ) {
        final Function function = new Function(
            FUNC_PAYFROMCOORDINATOR,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.Address(160, spenderWallet),
                new org.web3j.abi.datatypes.Address(160, spenderAddress),
                new org.web3j.abi.datatypes.DynamicArray<Payment>(Payment.class, payments)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> pendingRequestExists(BigInteger subscriptionId) {
        final Function function = new Function(
            FUNC_PENDINGREQUESTEXISTS,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(subscriptionId)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {})
        );
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> prepareNodeVerification(
        BigInteger subscriptionId,
        BigInteger nextInterval,
        String nodeWallet,
        String token,
        BigInteger amount
    ) {
        final Function function = new Function(
            FUNC_PREPARENODEVERIFICATION,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Uint32(nextInterval),
                new org.web3j.abi.datatypes.Address(160, nodeWallet),
                new org.web3j.abi.datatypes.Address(160, token),
                new org.web3j.abi.datatypes.generated.Uint256(amount)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> proposeContractsUpdate(List<byte[]> proposalSetIds, List<String> proposalSetAddresses) {
        final Function function = new Function(
            FUNC_PROPOSECONTRACTSUPDATE,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                    org.web3j.abi.datatypes.generated.Bytes32.class,
                    org.web3j.abi.Utils.typeMap(proposalSetIds, org.web3j.abi.datatypes.generated.Bytes32.class)
                ),
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                    org.web3j.abi.datatypes.Address.class,
                    org.web3j.abi.Utils.typeMap(proposalSetAddresses, org.web3j.abi.datatypes.Address.class)
                )
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sendRequest(BigInteger subscriptionId, BigInteger interval) {
        final Function function = new Function(
            FUNC_SENDREQUEST,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Uint32(interval)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAllowListId(byte[] newAllowListId) {
        final Function function = new Function(
            FUNC_SETALLOWLISTID,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(newAllowListId)),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setWalletFactory(String _walletFactory) {
        final Function function = new Function(
            FUNC_SETWALLETFACTORY,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _walletFactory)),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> timeoutRequest(byte[] requestId, BigInteger subscriptionId, BigInteger interval) {
        final Function function = new Function(
            FUNC_TIMEOUTREQUEST,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Bytes32(requestId),
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Uint32(interval)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> timeoutSubscriptionIntervalsUpTo(
        BigInteger subscriptionId,
        BigInteger uptoInterval,
        BigInteger maxIter
    ) {
        final Function function = new Function(
            FUNC_TIMEOUTSUBSCRIPTIONINTERVALSUPTO,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Uint32(uptoInterval),
                new org.web3j.abi.datatypes.generated.Uint32(maxIter)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String to) {
        final Function function = new Function(
            FUNC_TRANSFEROWNERSHIP,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to)),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> typeAndVersion() {
        final Function function = new Function(
            FUNC_TYPEANDVERSION,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {})
        );
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> unlockForVerification(ProofVerificationRequest proofRequest) {
        final Function function = new Function(
            FUNC_UNLOCKFORVERIFICATION,
            Arrays.<Type>asList(proofRequest),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final Function function = new Function(FUNC_UNPAUSE, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateContracts() {
        final Function function = new Function(FUNC_UPDATECONTRACTS, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<AllowListIdSetEventResponse> getAllowListIdSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ALLOWLISTIDSET_EVENT, transactionReceipt);
        ArrayList<AllowListIdSetEventResponse> responses = new ArrayList<AllowListIdSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AllowListIdSetEventResponse typedResponse = new AllowListIdSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newAllowListId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AllowListIdSetEventResponse getAllowListIdSetEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ALLOWLISTIDSET_EVENT, log);
        AllowListIdSetEventResponse typedResponse = new AllowListIdSetEventResponse();
        typedResponse.log = log;
        typedResponse.newAllowListId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<AllowListIdSetEventResponse> allowListIdSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAllowListIdSetEventFromLog(log));
    }

    public Flowable<AllowListIdSetEventResponse> allowListIdSetEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ALLOWLISTIDSET_EVENT));
        return allowListIdSetEventFlowable(filter);
    }

    public static List<CommitmentTimedOutEventResponse> getCommitmentTimedOutEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(COMMITMENTTIMEDOUT_EVENT, transactionReceipt);
        ArrayList<CommitmentTimedOutEventResponse> responses = new ArrayList<CommitmentTimedOutEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CommitmentTimedOutEventResponse typedResponse = new CommitmentTimedOutEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.interval = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static CommitmentTimedOutEventResponse getCommitmentTimedOutEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(COMMITMENTTIMEDOUT_EVENT, log);
        CommitmentTimedOutEventResponse typedResponse = new CommitmentTimedOutEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.interval = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<CommitmentTimedOutEventResponse> commitmentTimedOutEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getCommitmentTimedOutEventFromLog(log));
    }

    public Flowable<CommitmentTimedOutEventResponse> commitmentTimedOutEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(COMMITMENTTIMEDOUT_EVENT));
        return commitmentTimedOutEventFlowable(filter);
    }

    public static List<ContractsUpdateProposedEventResponse> getContractsUpdateProposedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(
            CONTRACTSUPDATEPROPOSED_EVENT,
            transactionReceipt
        );
        ArrayList<ContractsUpdateProposedEventResponse> responses = new ArrayList<ContractsUpdateProposedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ContractsUpdateProposedEventResponse typedResponse = new ContractsUpdateProposedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ids = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            typedResponse.addresses = (List<String>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ContractsUpdateProposedEventResponse getContractsUpdateProposedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CONTRACTSUPDATEPROPOSED_EVENT, log);
        ContractsUpdateProposedEventResponse typedResponse = new ContractsUpdateProposedEventResponse();
        typedResponse.log = log;
        typedResponse.ids = (List<byte[]>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
        typedResponse.addresses = (List<String>) ((Array) eventValues.getNonIndexedValues().get(1)).getNativeValueCopy();
        return typedResponse;
    }

    public Flowable<ContractsUpdateProposedEventResponse> contractsUpdateProposedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getContractsUpdateProposedEventFromLog(log));
    }

    public Flowable<ContractsUpdateProposedEventResponse> contractsUpdateProposedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CONTRACTSUPDATEPROPOSED_EVENT));
        return contractsUpdateProposedEventFlowable(filter);
    }

    public static List<ContractsUpdatedEventResponse> getContractsUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CONTRACTSUPDATED_EVENT, transactionReceipt);
        ArrayList<ContractsUpdatedEventResponse> responses = new ArrayList<ContractsUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ContractsUpdatedEventResponse typedResponse = new ContractsUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ContractsUpdatedEventResponse getContractsUpdatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CONTRACTSUPDATED_EVENT, log);
        ContractsUpdatedEventResponse typedResponse = new ContractsUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.id = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.contractAddress = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ContractsUpdatedEventResponse> contractsUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getContractsUpdatedEventFromLog(log));
    }

    public Flowable<ContractsUpdatedEventResponse> contractsUpdatedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CONTRACTSUPDATED_EVENT));
        return contractsUpdatedEventFlowable(filter);
    }

    public static List<EIP712DomainChangedEventResponse> getEIP712DomainChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, transactionReceipt);
        ArrayList<EIP712DomainChangedEventResponse> responses = new ArrayList<EIP712DomainChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static EIP712DomainChangedEventResponse getEIP712DomainChangedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EIP712DOMAINCHANGED_EVENT, log);
        EIP712DomainChangedEventResponse typedResponse = new EIP712DomainChangedEventResponse();
        typedResponse.log = log;
        return typedResponse;
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getEIP712DomainChangedEventFromLog(log));
    }

    public Flowable<EIP712DomainChangedEventResponse> eIP712DomainChangedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EIP712DOMAINCHANGED_EVENT));
        return eIP712DomainChangedEventFlowable(filter);
    }

    public static List<OwnershipTransferRequestedEventResponse> getOwnershipTransferRequestedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(
            OWNERSHIPTRANSFERREQUESTED_EVENT,
            transactionReceipt
        );
        ArrayList<OwnershipTransferRequestedEventResponse> responses = new ArrayList<OwnershipTransferRequestedEventResponse>(
            valueList.size()
        );
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferRequestedEventResponse getOwnershipTransferRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERREQUESTED_EVENT, log);
        OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferRequestedEventFromLog(log));
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERREQUESTED_EVENT));
        return ownershipTransferRequestedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static PausedEventResponse getPausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PAUSED_EVENT, log);
        PausedEventResponse typedResponse = new PausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getPausedEventFromLog(log));
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public static List<RequestProcessedEventResponse> getRequestProcessedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTPROCESSED_EVENT, transactionReceipt);
        ArrayList<RequestProcessedEventResponse> responses = new ArrayList<RequestProcessedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestProcessedEventResponse typedResponse = new RequestProcessedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.containerId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.interval = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.useDeliveryInbox = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.feeAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.feeToken = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.verifier = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.coordinator = (String) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.result = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestProcessedEventResponse getRequestProcessedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTPROCESSED_EVENT, log);
        RequestProcessedEventResponse typedResponse = new RequestProcessedEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.containerId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.interval = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.useDeliveryInbox = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.feeAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.feeToken = (String) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.verifier = (String) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.coordinator = (String) eventValues.getNonIndexedValues().get(5).getValue();
        typedResponse.result = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
        return typedResponse;
    }

    public Flowable<RequestProcessedEventResponse> requestProcessedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestProcessedEventFromLog(log));
    }

    public Flowable<RequestProcessedEventResponse> requestProcessedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTPROCESSED_EVENT));
        return requestProcessedEventFlowable(filter);
    }

    public static List<RequestStartEventResponse> getRequestStartEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTSTART_EVENT, transactionReceipt);
        ArrayList<RequestStartEventResponse> responses = new ArrayList<RequestStartEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestStartEventResponse typedResponse = new RequestStartEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.containerId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.interval = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.redundancy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.useDeliveryInbox = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.feeAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.feeToken = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.verifier = (String) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.coordinator = (String) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestStartEventResponse getRequestStartEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTSTART_EVENT, log);
        RequestStartEventResponse typedResponse = new RequestStartEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.containerId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.interval = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.redundancy = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.useDeliveryInbox = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.feeAmount = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.feeToken = (String) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.verifier = (String) eventValues.getNonIndexedValues().get(5).getValue();
        typedResponse.coordinator = (String) eventValues.getNonIndexedValues().get(6).getValue();
        return typedResponse;
    }

    public Flowable<RequestStartEventResponse> requestStartEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestStartEventFromLog(log));
    }

    public Flowable<RequestStartEventResponse> requestStartEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTSTART_EVENT));
        return requestStartEventFlowable(filter);
    }

    public static List<SubscriptionCancelledEventResponse> getSubscriptionCancelledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SUBSCRIPTIONCANCELLED_EVENT, transactionReceipt);
        ArrayList<SubscriptionCancelledEventResponse> responses = new ArrayList<SubscriptionCancelledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SubscriptionCancelledEventResponse typedResponse = new SubscriptionCancelledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SubscriptionCancelledEventResponse getSubscriptionCancelledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SUBSCRIPTIONCANCELLED_EVENT, log);
        SubscriptionCancelledEventResponse typedResponse = new SubscriptionCancelledEventResponse();
        typedResponse.log = log;
        typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<SubscriptionCancelledEventResponse> subscriptionCancelledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSubscriptionCancelledEventFromLog(log));
    }

    public Flowable<SubscriptionCancelledEventResponse> subscriptionCancelledEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUBSCRIPTIONCANCELLED_EVENT));
        return subscriptionCancelledEventFlowable(filter);
    }

    public static List<SubscriptionCreatedEventResponse> getSubscriptionCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SUBSCRIPTIONCREATED_EVENT, transactionReceipt);
        ArrayList<SubscriptionCreatedEventResponse> responses = new ArrayList<SubscriptionCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SubscriptionCreatedEventResponse typedResponse = new SubscriptionCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SubscriptionCreatedEventResponse getSubscriptionCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SUBSCRIPTIONCREATED_EVENT, log);
        SubscriptionCreatedEventResponse typedResponse = new SubscriptionCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<SubscriptionCreatedEventResponse> subscriptionCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSubscriptionCreatedEventFromLog(log));
    }

    public Flowable<SubscriptionCreatedEventResponse> subscriptionCreatedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUBSCRIPTIONCREATED_EVENT));
        return subscriptionCreatedEventFlowable(filter);
    }

    public static List<SubscriptionFulfilledEventResponse> getSubscriptionFulfilledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SUBSCRIPTIONFULFILLED_EVENT, transactionReceipt);
        ArrayList<SubscriptionFulfilledEventResponse> responses = new ArrayList<SubscriptionFulfilledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SubscriptionFulfilledEventResponse typedResponse = new SubscriptionFulfilledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.node = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SubscriptionFulfilledEventResponse getSubscriptionFulfilledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SUBSCRIPTIONFULFILLED_EVENT, log);
        SubscriptionFulfilledEventResponse typedResponse = new SubscriptionFulfilledEventResponse();
        typedResponse.log = log;
        typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.node = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<SubscriptionFulfilledEventResponse> subscriptionFulfilledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSubscriptionFulfilledEventFromLog(log));
    }

    public Flowable<SubscriptionFulfilledEventResponse> subscriptionFulfilledEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUBSCRIPTIONFULFILLED_EVENT));
        return subscriptionFulfilledEventFlowable(filter);
    }

    public static List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static UnpausedEventResponse getUnpausedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(UNPAUSED_EVENT, log);
        UnpausedEventResponse typedResponse = new UnpausedEventResponse();
        typedResponse.log = log;
        typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getUnpausedEventFromLog(log));
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public static List<VerificationFundsLockedEventResponse> getVerificationFundsLockedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(
            VERIFICATIONFUNDSLOCKED_EVENT,
            transactionReceipt
        );
        ArrayList<VerificationFundsLockedEventResponse> responses = new ArrayList<VerificationFundsLockedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerificationFundsLockedEventResponse typedResponse = new VerificationFundsLockedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static VerificationFundsLockedEventResponse getVerificationFundsLockedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(VERIFICATIONFUNDSLOCKED_EVENT, log);
        VerificationFundsLockedEventResponse typedResponse = new VerificationFundsLockedEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<VerificationFundsLockedEventResponse> verificationFundsLockedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getVerificationFundsLockedEventFromLog(log));
    }

    public Flowable<VerificationFundsLockedEventResponse> verificationFundsLockedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFICATIONFUNDSLOCKED_EVENT));
        return verificationFundsLockedEventFlowable(filter);
    }

    public static List<VerificationFundsUnlockedEventResponse> getVerificationFundsUnlockedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(
            VERIFICATIONFUNDSUNLOCKED_EVENT,
            transactionReceipt
        );
        ArrayList<VerificationFundsUnlockedEventResponse> responses = new ArrayList<VerificationFundsUnlockedEventResponse>(
            valueList.size()
        );
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VerificationFundsUnlockedEventResponse typedResponse = new VerificationFundsUnlockedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static VerificationFundsUnlockedEventResponse getVerificationFundsUnlockedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(VERIFICATIONFUNDSUNLOCKED_EVENT, log);
        VerificationFundsUnlockedEventResponse typedResponse = new VerificationFundsUnlockedEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<VerificationFundsUnlockedEventResponse> verificationFundsUnlockedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getVerificationFundsUnlockedEventFromLog(log));
    }

    public Flowable<VerificationFundsUnlockedEventResponse> verificationFundsUnlockedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VERIFICATIONFUNDSUNLOCKED_EVENT));
        return verificationFundsUnlockedEventFlowable(filter);
    }

    @Deprecated
    public static Router load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Router(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Router load(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        BigInteger gasPrice,
        BigInteger gasLimit
    ) {
        return new Router(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Router load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Router(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Router load(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        ContractGasProvider contractGasProvider
    ) {
        return new Router(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Router> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Router.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Router> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Router.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Router> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Router.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Router> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Router.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ComputeSubscription extends StaticStruct {

        public byte[] routeId;

        public byte[] containerId;

        public BigInteger feeAmount;

        public String client;

        public BigInteger activeAt;

        public BigInteger intervalSeconds;

        public BigInteger maxExecutions;

        public String wallet;

        public String feeToken;

        public String verifier;

        public BigInteger redundancy;

        public Boolean useDeliveryInbox;

        public ComputeSubscription(
            byte[] routeId,
            byte[] containerId,
            BigInteger feeAmount,
            String client,
            BigInteger activeAt,
            BigInteger intervalSeconds,
            BigInteger maxExecutions,
            String wallet,
            String feeToken,
            String verifier,
            BigInteger redundancy,
            Boolean useDeliveryInbox
        ) {
            super(
                new org.web3j.abi.datatypes.generated.Bytes32(routeId),
                new org.web3j.abi.datatypes.generated.Bytes32(containerId),
                new org.web3j.abi.datatypes.generated.Uint256(feeAmount),
                new org.web3j.abi.datatypes.Address(160, client),
                new org.web3j.abi.datatypes.generated.Uint32(activeAt),
                new org.web3j.abi.datatypes.generated.Uint32(intervalSeconds),
                new org.web3j.abi.datatypes.generated.Uint32(maxExecutions),
                new org.web3j.abi.datatypes.Address(160, wallet),
                new org.web3j.abi.datatypes.Address(160, feeToken),
                new org.web3j.abi.datatypes.Address(160, verifier),
                new org.web3j.abi.datatypes.generated.Uint16(redundancy),
                new org.web3j.abi.datatypes.Bool(useDeliveryInbox)
            );
            this.routeId = routeId;
            this.containerId = containerId;
            this.feeAmount = feeAmount;
            this.client = client;
            this.activeAt = activeAt;
            this.intervalSeconds = intervalSeconds;
            this.maxExecutions = maxExecutions;
            this.wallet = wallet;
            this.feeToken = feeToken;
            this.verifier = verifier;
            this.redundancy = redundancy;
            this.useDeliveryInbox = useDeliveryInbox;
        }

        public ComputeSubscription(
            Bytes32 routeId,
            Bytes32 containerId,
            Uint256 feeAmount,
            Address client,
            Uint32 activeAt,
            Uint32 intervalSeconds,
            Uint32 maxExecutions,
            Address wallet,
            Address feeToken,
            Address verifier,
            Uint16 redundancy,
            Bool useDeliveryInbox
        ) {
            super(
                routeId,
                containerId,
                feeAmount,
                client,
                activeAt,
                intervalSeconds,
                maxExecutions,
                wallet,
                feeToken,
                verifier,
                redundancy,
                useDeliveryInbox
            );
            this.routeId = routeId.getValue();
            this.containerId = containerId.getValue();
            this.feeAmount = feeAmount.getValue();
            this.client = client.getValue();
            this.activeAt = activeAt.getValue();
            this.intervalSeconds = intervalSeconds.getValue();
            this.maxExecutions = maxExecutions.getValue();
            this.wallet = wallet.getValue();
            this.feeToken = feeToken.getValue();
            this.verifier = verifier.getValue();
            this.redundancy = redundancy.getValue();
            this.useDeliveryInbox = useDeliveryInbox.getValue();
        }
    }

    public static class Payment extends StaticStruct {

        public String recipient;

        public String feeToken;

        public BigInteger feeAmount;

        public Payment(String recipient, String feeToken, BigInteger feeAmount) {
            super(
                new org.web3j.abi.datatypes.Address(160, recipient),
                new org.web3j.abi.datatypes.Address(160, feeToken),
                new org.web3j.abi.datatypes.generated.Uint256(feeAmount)
            );
            this.recipient = recipient;
            this.feeToken = feeToken;
            this.feeAmount = feeAmount;
        }

        public Payment(Address recipient, Address feeToken, Uint256 feeAmount) {
            super(recipient, feeToken, feeAmount);
            this.recipient = recipient.getValue();
            this.feeToken = feeToken.getValue();
            this.feeAmount = feeAmount.getValue();
        }
    }

    public static class Commitment extends StaticStruct {

        public byte[] requestId;

        public BigInteger subscriptionId;

        public byte[] containerId;

        public BigInteger interval;

        public Boolean useDeliveryInbox;

        public BigInteger redundancy;

        public String walletAddress;

        public BigInteger feeAmount;

        public String feeToken;

        public String verifier;

        public String coordinator;

        public Commitment(
            byte[] requestId,
            BigInteger subscriptionId,
            byte[] containerId,
            BigInteger interval,
            Boolean useDeliveryInbox,
            BigInteger redundancy,
            String walletAddress,
            BigInteger feeAmount,
            String feeToken,
            String verifier,
            String coordinator
        ) {
            super(
                new org.web3j.abi.datatypes.generated.Bytes32(requestId),
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Bytes32(containerId),
                new org.web3j.abi.datatypes.generated.Uint32(interval),
                new org.web3j.abi.datatypes.Bool(useDeliveryInbox),
                new org.web3j.abi.datatypes.generated.Uint16(redundancy),
                new org.web3j.abi.datatypes.Address(160, walletAddress),
                new org.web3j.abi.datatypes.generated.Uint256(feeAmount),
                new org.web3j.abi.datatypes.Address(160, feeToken),
                new org.web3j.abi.datatypes.Address(160, verifier),
                new org.web3j.abi.datatypes.Address(160, coordinator)
            );
            this.requestId = requestId;
            this.subscriptionId = subscriptionId;
            this.containerId = containerId;
            this.interval = interval;
            this.useDeliveryInbox = useDeliveryInbox;
            this.redundancy = redundancy;
            this.walletAddress = walletAddress;
            this.feeAmount = feeAmount;
            this.feeToken = feeToken;
            this.verifier = verifier;
            this.coordinator = coordinator;
        }

        public Commitment(
            Bytes32 requestId,
            Uint64 subscriptionId,
            Bytes32 containerId,
            Uint32 interval,
            Bool useDeliveryInbox,
            Uint16 redundancy,
            Address walletAddress,
            Uint256 feeAmount,
            Address feeToken,
            Address verifier,
            Address coordinator
        ) {
            super(
                requestId,
                subscriptionId,
                containerId,
                interval,
                useDeliveryInbox,
                redundancy,
                walletAddress,
                feeAmount,
                feeToken,
                verifier,
                coordinator
            );
            this.requestId = requestId.getValue();
            this.subscriptionId = subscriptionId.getValue();
            this.containerId = containerId.getValue();
            this.interval = interval.getValue();
            this.useDeliveryInbox = useDeliveryInbox.getValue();
            this.redundancy = redundancy.getValue();
            this.walletAddress = walletAddress.getValue();
            this.feeAmount = feeAmount.getValue();
            this.feeToken = feeToken.getValue();
            this.verifier = verifier.getValue();
            this.coordinator = coordinator.getValue();
        }
    }

    public static class ProofVerificationRequest extends StaticStruct {

        public BigInteger subscriptionId;

        public byte[] requestId;

        public String submitterAddress;

        public String submitterWallet;

        public BigInteger escrowedAmount;

        public String escrowToken;

        public BigInteger slashAmount;

        public BigInteger expiry;

        public ProofVerificationRequest(
            BigInteger subscriptionId,
            byte[] requestId,
            String submitterAddress,
            String submitterWallet,
            BigInteger escrowedAmount,
            String escrowToken,
            BigInteger slashAmount,
            BigInteger expiry
        ) {
            super(
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Bytes32(requestId),
                new org.web3j.abi.datatypes.Address(160, submitterAddress),
                new org.web3j.abi.datatypes.Address(160, submitterWallet),
                new org.web3j.abi.datatypes.generated.Uint256(escrowedAmount),
                new org.web3j.abi.datatypes.Address(160, escrowToken),
                new org.web3j.abi.datatypes.generated.Uint256(slashAmount),
                new org.web3j.abi.datatypes.generated.Uint32(expiry)
            );
            this.subscriptionId = subscriptionId;
            this.requestId = requestId;
            this.submitterAddress = submitterAddress;
            this.submitterWallet = submitterWallet;
            this.escrowedAmount = escrowedAmount;
            this.escrowToken = escrowToken;
            this.slashAmount = slashAmount;
            this.expiry = expiry;
        }

        public ProofVerificationRequest(
            Uint64 subscriptionId,
            Bytes32 requestId,
            Address submitterAddress,
            Address submitterWallet,
            Uint256 escrowedAmount,
            Address escrowToken,
            Uint256 slashAmount,
            Uint32 expiry
        ) {
            super(subscriptionId, requestId, submitterAddress, submitterWallet, escrowedAmount, escrowToken, slashAmount, expiry);
            this.subscriptionId = subscriptionId.getValue();
            this.requestId = requestId.getValue();
            this.submitterAddress = submitterAddress.getValue();
            this.submitterWallet = submitterWallet.getValue();
            this.escrowedAmount = escrowedAmount.getValue();
            this.escrowToken = escrowToken.getValue();
            this.slashAmount = slashAmount.getValue();
            this.expiry = expiry.getValue();
        }
    }

    public static class AllowListIdSetEventResponse extends BaseEventResponse {

        public byte[] newAllowListId;
    }

    public static class CommitmentTimedOutEventResponse extends BaseEventResponse {

        public byte[] requestId;

        public BigInteger subscriptionId;

        public BigInteger interval;
    }

    public static class ContractsUpdateProposedEventResponse extends BaseEventResponse {

        public List<byte[]> ids;

        public List<String> addresses;
    }

    public static class ContractsUpdatedEventResponse extends BaseEventResponse {

        public byte[] id;

        public String contractAddress;
    }

    public static class EIP712DomainChangedEventResponse extends BaseEventResponse {}

    public static class OwnershipTransferRequestedEventResponse extends BaseEventResponse {

        public String from;

        public String to;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {

        public String from;

        public String to;
    }

    public static class PausedEventResponse extends BaseEventResponse {

        public String account;
    }

    public static class RequestProcessedEventResponse extends BaseEventResponse {

        public byte[] requestId;

        public BigInteger subscriptionId;

        public byte[] containerId;

        public BigInteger interval;

        public Boolean useDeliveryInbox;

        public BigInteger feeAmount;

        public String feeToken;

        public String verifier;

        public String coordinator;

        public BigInteger result;
    }

    public static class RequestStartEventResponse extends BaseEventResponse {

        public byte[] requestId;

        public BigInteger subscriptionId;

        public byte[] containerId;

        public BigInteger interval;

        public BigInteger redundancy;

        public Boolean useDeliveryInbox;

        public BigInteger feeAmount;

        public String feeToken;

        public String verifier;

        public String coordinator;
    }

    public static class SubscriptionCancelledEventResponse extends BaseEventResponse {

        public BigInteger subscriptionId;
    }

    public static class SubscriptionCreatedEventResponse extends BaseEventResponse {

        public BigInteger subscriptionId;
    }

    public static class SubscriptionFulfilledEventResponse extends BaseEventResponse {

        public BigInteger id;

        public String node;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {

        public String account;
    }

    public static class VerificationFundsLockedEventResponse extends BaseEventResponse {

        public byte[] requestId;

        public String spender;

        public BigInteger amount;
    }

    public static class VerificationFundsUnlockedEventResponse extends BaseEventResponse {

        public byte[] requestId;

        public String spender;

        public BigInteger amount;
    }
}
