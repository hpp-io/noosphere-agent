package io.hpp.noosphere.agent.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint72;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.10.3.
 */
@SuppressWarnings("rawtypes")
public class DelegateeCoordinator extends Contract {

    public static final String BINARY =
        "60a0346200017757601f62003cbf38819003918201601f19168301916001600160401b038311848410176200017b57808492604094855283398101031262000177576200005a602062000052836200018f565b92016200018f565b6001600160a01b039182168015620001655760805260016005551680156200012057600680546001600160a01b031916919091179055604051613b1a9081620001a5823960805181818161015c015281816105be01528181611063015281816110cd015281816111d6015281816112d201528181611362015281816114bd015281816115360152818161179c01528181611c7501528181611d0f015281816126940152818161273801528181612ece015281816130090152818161309401526135100152f35b60405162461bcd60e51b815260206004820152601960248201527f43616e6e6f742073657420636c69656e7420746f207a65726f000000000000006044820152606490fd5b604051632530e88560e11b8152600490fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b0382168203620001775756fe6080806040526004361015610012575f80fd5b5f905f3560e01c908163109e94cf1461202757508063181f5a7714611fa85780632317bfc114611e9c57806323dfe6f2146119a2578063298f7bdc14611955578063368bf4641461190d5780633c43a84d1461181757806341e46a45146117f65780635012554614611753578063576edca31461173b5780635cf3296f14610e2e57806379ba509714610d24578063852ef02f14610cd2578063a5a4103114610c56578063bc85694f14610c0a578063c34cf5c714610b49578063c3f909d414610a6a578063c7fb32fb14610507578063f2fde38b146103f45763f5e5a31a146100fa575f80fd5b346103005760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610300576101316123d1565b9061013a612271565b91610143612217565b9073ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000169063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818816019081116103c7576040517f4720845700000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8516600482015263ffffffff91909116602482015294958695602091908281604481885afa801561038357889061038e575b6001915015151461021e578680f35b6040517f1cfe615c00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8616600482015263ffffffff9190911660248201526101809081816044818b895af1801561038357610358575b505060015460609581610312575b50508554901c1690803b1561030e57818580946102d4604051978896879586947f1d0131640000000000000000000000000000000000000000000000000000000086526004860161394b565b03925af18015610303576102ec575b80808080808680f35b6102f590612092565b61030057805f6102e3565b80fd5b6040513d84823e3d90fd5b8480fd5b90955061031d613804565b9583600254168460405193610331856120a6565b1683528383015260408201526103468661389f565b526103508561389f565b505f80610288565b8161037792903d1061037c575b61036f8183612134565b8101906125da565b61027a565b503d610365565b6040513d8a823e3d90fd5b508281813d83116103c0575b6103a48183612134565b810103126103bc576103b7600191612439565b61020f565b8780fd5b503d61039a565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b50346103005760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103005761042c6121d1565b610434612446565b73ffffffffffffffffffffffffffffffffffffffff809116903382146104a957817fffffffffffffffffffffffff00000000000000000000000000000000000000006007541617600755600654167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12788380a380f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152fd5b5034610300576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103005760243567ffffffffffffffff811681036109b8576064359063ffffffff821682036109b85760843561ffff811681036109b85760a4359283151584036109b85760c4359373ffffffffffffffffffffffffffffffffffffffff9283861686036109b857610104359184831683036109b8576105b161223a565b936105ba6123e8565b50857f0000000000000000000000000000000000000000000000000000000000000000163303610a40576105ec6123e8565b508585166108bc575b9261ffff67ffffffffffffffff989387959363ffffffff87958b60206040519e8f92610620846120de565b6004358452169101528c60406044359101521660608c0152151560808b01521660a08901521660c087015260e43560e08701521661010085015216610120830152306101408301526040519260406020850161071681868051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b6101609586815261072681612117565b519020916004358152600360205220556040516107dd81848051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b67ffffffffffffffff6044359216907fc2f86b99a2f1c678a8932761b141b6656cc75008064c693d41867a9b2ccc7c878560043592a46108ba60405180928051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565bf35b9691926040517f1da664e800000000000000000000000000000000000000000000000000000000815286841660048201526020816024818a8a165afa9081156109c4578a91610a02575b50156109cf576040517f6fcca69b00000000000000000000000000000000000000000000000000000000815286841660048201526020816024818a8a165afa9081156109c4578a9161098e575b5060e43510610964579291966105f5565b60046040517f1c22661b000000000000000000000000000000000000000000000000000000008152fd5b90506020813d6020116109bc575b816109a960209383612134565b810103126109b857515f610953565b5f80fd5b3d915061099c565b6040513d8c823e3d90fd5b60248387604051917f1fefad7d000000000000000000000000000000000000000000000000000000008352166004820152fd5b90506020813d602011610a38575b81610a1d60209383612134565b81010312610a3457610a2e90612439565b5f610906565b8980fd5b3d9150610a10565b60046040517fc41a5b09000000000000000000000000000000000000000000000000000000008152fd5b503461030057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610300578060a0916080604051610aab816120c2565b828152826020820152826040820152826060820152015260405190610acf826120c2565b5463ffffffff81169182815273ffffffffffffffffffffffffffffffffffffffff916020820190838160201c16825261ffff9081604085019160c01c168152846001549360608601948552608082600254169601958652604051978852511660208701525116604085015251606084015251166080820152f35b50346103005760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261030057604061010091600435815260046020522067ffffffffffffffff8154169060018101549073ffffffffffffffffffffffffffffffffffffffff8060028301541690806003840154166004840154916005850154169263ffffffff600760068701549601541695604051978852602088015260408701526060860152608085015260a084015260c083015260e0820152f35b50346103005760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103005761ffff6040602092600435815260098452205416604051908152f35b503461030057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610300575460c01c61ffff1668ffffffffffffffffff8111610ca857602090604051908152f35b60046040517fb8e5ea4b000000000000000000000000000000000000000000000000000000008152fd5b503461030057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261030057602073ffffffffffffffffffffffffffffffffffffffff60085416604051908152f35b503461030057807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103005760075473ffffffffffffffffffffffffffffffffffffffff8082163303610dd057600654917fffffffffffffffffffffffff0000000000000000000000000000000000000000903382851617600655166007553391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d7573742062652070726f706f73656420636c69656e740000000000000000006044820152fd5b50346109b85760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109b857610e666123d1565b610e6e612271565b90610e77612217565b6064351515606435036109b8576040805167ffffffffffffffff84166020820190815263ffffffff86169282019290925273ffffffffffffffffffffffffffffffffffffffff83166060820152610ef981608081015b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282612134565b519020805f52600460205260405f209063ffffffff600760405193610f1d85612075565b67ffffffffffffffff81541685526001810154602086015273ffffffffffffffffffffffffffffffffffffffff600282015416604086015273ffffffffffffffffffffffffffffffffffffffff60038201541660608601526004810154608086015273ffffffffffffffffffffffffffffffffffffffff60058201541660a0860152600681015460c086015201541660e08301525f5260046020525f600760408220828155826001820155826002820155826003820155826004820155826005820155826006820155015563ffffffff60e082015116156117115763ffffffff60e08201511663ffffffff4216101567ffffffffffffffff82511691604051927fa50366b800000000000000000000000000000000000000000000000000000000845260048401526101808360248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa92831561159d575f936115d2575b5073ffffffffffffffffffffffffffffffffffffffff6101208401511633036115a85773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b156109b8576040517f77bd924f00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff82511660048201526020820151602482015273ffffffffffffffffffffffffffffffffffffffff604083015116604482015273ffffffffffffffffffffffffffffffffffffffff60608301511660648201526080820151608482015273ffffffffffffffffffffffffffffffffffffffff60a08301511660a482015260c082015160c482015263ffffffff60e08301511660e48201525f81610104818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af1801561159d57611586575b5090869291611210613804565b9160643590811561157e575b501561140a578073ffffffffffffffffffffffffffffffffffffffff606067ffffffffffffffff9301511673ffffffffffffffffffffffffffffffffffffffff60a08301511660808301519060405192611275846120a6565b83526020830152604082015261128a8461389f565b526112948361389f565b5051169173ffffffffffffffffffffffffffffffffffffffff60608160e084015116920151169273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b1561030e57611348859360405195869485947f1d0131640000000000000000000000000000000000000000000000000000000086526004860152602485015260448401526080606484015260848301906138e9565b03818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af18015610303576113f2575b50505b7f89f6621aaa96daa4351dd7779ceb97eb7a093e09f2a405690d616013513eef3f604067ffffffffffffffff63ffffffff73ffffffffffffffffffffffffffffffffffffffff83519560643515158752336020880152169616941692a480f35b6113fb90612092565b61140657835f61138f565b8380fd5b9173ffffffffffffffffffffffffffffffffffffffff60e08201511690604073ffffffffffffffffffffffffffffffffffffffff610100830151169101519060405192611456846120a6565b83526020830152604082015261146b8261389f565b526114758161389f565b5067ffffffffffffffff8251169173ffffffffffffffffffffffffffffffffffffffff604081606084015116920151169273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b1561030e5761151c859360405195869485947f1d0131640000000000000000000000000000000000000000000000000000000086526004860161394b565b03818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156103035761156a575b5050611392565b61157390612092565b61140657835f611563565b90505f61121c565b6115939193929750612092565b5f9590915f611203565b6040513d5f823e3d90fd5b60046040517fb9857aa1000000000000000000000000000000000000000000000000000000008152fd5b909250610180813d61018011611709575b816115f16101809383612134565b810103126109b857604051908161018081011067ffffffffffffffff610180840111176116dc576101808201604052805182526020810151602083015260408101516040830152611644606082016124fa565b6060830152611655608082016124da565b608083015261166660a082016124da565b60a083015261167760c082016124da565b60c083015261168860e082016124fa565b60e083015261010061169b8183016124fa565b908301526101206116ad8183016124fa565b908301526101406116bf8183016124eb565b908301526116d1610160809201612439565b90820152915f611093565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b3d91506115e3565b60046040517f70eb1be5000000000000000000000000000000000000000000000000000000008152fd5b346109b85761175161174c36612334565b613734565b005b346109b85760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109b85760043573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163303610a4057805f5260036020525f60408120557ff903f4774c7bd27355f9d7fcbc382b079b164a697a44ac5d95267a4c3cb3bb225f80a2005b346109b85761175161180736612334565b61180f612446565b61174c612446565b346109b85760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109b85761184e61225e565b67ffffffffffffffff6024358181116109b85761186f903690600401612316565b906044358181116109b857611888903690600401612316565b906064358181116109b8576118a1903690600401612316565b906084359081116109b8576118ba903690600401612316565b916118c36121f4565b936002600554146118e3576118dc9560026005556125f6565b6001600555005b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b346109b85760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109b8576004355f526003602052602060405f2054604051908152f35b346109b85760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109b8576004355f52600a602052602060ff60405f2054166040519015158152f35b346109b8576102807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109b8576119da61225e565b6119e2612271565b61018091827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc3601126109b85767ffffffffffffffff6101c4358181116109b857611a31903690600401612284565b63ffffffff6101e435166101e435036109b857610204358381116109b857611a5d903690600401612284565b9390610224358281116109b857611a78903690600401612284565b959092610244359081116109b857611a94903690600401612284565b959094610264359973ffffffffffffffffffffffffffffffffffffffff8b168b036109b85763ffffffff90816040519b7f4879bf50000000000000000000000000000000000000000000000000000000008d521660048c01521660248a015260443560448a015260643560648a015260843560848a015273ffffffffffffffffffffffffffffffffffffffff611b286121f4565b1660a48a015260c43563ffffffff81168091036109b85760c48a015260e43563ffffffff81168091036109b85760e48a015261010480359063ffffffff82168092036109b8578a015273ffffffffffffffffffffffffffffffffffffffff611b8e61223a565b166101248a015261014480359073ffffffffffffffffffffffffffffffffffffffff82168092036109b8578a015261016480359073ffffffffffffffffffffffffffffffffffffffff82168092036109b8578a015261018480359061ffff82168092036109b8578a01526101a4908135918215158093036109b8577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83610204946020978f9788968701526101e06101c4870152816101e4870152868601375f858286010152011681010301815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af1801561159d5789905f90611e5f575b6040517f1cfe615c00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff909116600482015263ffffffff6101e43516602482015297508780604481015b03815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af196871561159d57611751995f98611e2c575b505091611e12611e1a92611e229594611dfd6040519a60208c01908051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b6101608a52611e0b8a612117565b36916122b2565b9536916122b2565b9236916122b2565b916101e4356125f6565b611e22959492985092611e52611e129285611e1a96903d1061037c5761036f8183612134565b9050989294955092611d43565b50506020873d602011611e94575b81611e7a60209383612134565b810103126109b85788611e8f611cf5986124c5565b611ca6565b3d9150611e6d565b346109b85760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109b85773ffffffffffffffffffffffffffffffffffffffff611ee86121d1565b611ef0612446565b168015611f24577fffffffffffffffffffffffff000000000000000000000000000000000000000060085416176008555f80f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f436f6f7264696e61746f723a20496e76616c696420726561646572206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b346109b8575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109b857612023604051611fe5816120fb565b601281527f436f6f7264696e61746f725f76312e302e3000000000000000000000000000006020820152604051918291602083526020830190612175565b0390f35b346109b8575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126109b85760209073ffffffffffffffffffffffffffffffffffffffff600654168152f35b610100810190811067ffffffffffffffff8211176116dc57604052565b67ffffffffffffffff81116116dc57604052565b6060810190811067ffffffffffffffff8211176116dc57604052565b60a0810190811067ffffffffffffffff8211176116dc57604052565b610160810190811067ffffffffffffffff8211176116dc57604052565b6040810190811067ffffffffffffffff8211176116dc57604052565b610180810190811067ffffffffffffffff8211176116dc57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176116dc57604052565b91908251928382525f5b8481106121bd5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f845f6020809697860101520116010190565b60208183018101518483018201520161217f565b6004359073ffffffffffffffffffffffffffffffffffffffff821682036109b857565b60a4359073ffffffffffffffffffffffffffffffffffffffff821682036109b857565b6044359073ffffffffffffffffffffffffffffffffffffffff821682036109b857565b610124359073ffffffffffffffffffffffffffffffffffffffff821682036109b857565b6004359063ffffffff821682036109b857565b6024359063ffffffff821682036109b857565b9181601f840112156109b85782359167ffffffffffffffff83116109b857602083818601950101116109b857565b92919267ffffffffffffffff82116116dc57604051916122fa60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184612134565b8294818452818301116109b8578281602093845f960137010152565b9080601f830112156109b857816020612331933591016122b2565b90565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60a09101126109b85760405161236a816120c2565b60043563ffffffff811681036109b857815273ffffffffffffffffffffffffffffffffffffffff60243581811681036109b857602083015260443561ffff811681036109b8576040830152606435606083015260843590811681036109b857608082015290565b6004359067ffffffffffffffff821682036109b857565b604051906123f5826120de565b5f610140838281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b519081151582036109b857565b73ffffffffffffffffffffffffffffffffffffffff60065416330361246757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c6520627920636c69656e740000000000000000006044820152fd5b519067ffffffffffffffff821682036109b857565b519063ffffffff821682036109b857565b519061ffff821682036109b857565b519073ffffffffffffffffffffffffffffffffffffffff821682036109b857565b9190826101609103126109b857604051612534816120de565b809280518252612546602082016124c5565b602083015260408101516040830152612561606082016124da565b606083015261257260808201612439565b608083015261258360a082016124eb565b60a083015261259460c082016124fa565b60c083015260e081015160e08301526101006125b18183016124fa565b908301526101206125c38183016124fa565b908301526125d56101408092016124fa565b910152565b9190610180838203126109b8576123319060208451940161251b565b9192845185015f95610160818303126109b8576020806126189301910161251b565b9384515f52600960205261ffff60405f2054169361ffff60a087015116851461370a5767ffffffffffffffff60208701511690604051917fc9f90505000000000000000000000000000000000000000000000000000000008352600483015260208260248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa91821561159d575f926136c9575b5063ffffffff168063ffffffff83160361369857506040517f439a301200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8916600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561159d575f9161365e575b50156136345785515f52600960205260405f2061ffff60018701167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000825416179055610ecd61280b67ffffffffffffffff602089015116604051928391602083019533918791604091949363ffffffff73ffffffffffffffffffffffffffffffffffffffff9267ffffffffffffffff606087019816865216602085015216910152565b519020805f52600a60205260ff60405f20541661360a575f52600a60205260405f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905584515f52600960205261ffff60405f205416927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff60a088015116019361ffff85116132625786515f52600360205260405f205480156135d857604051602081019061295e828b8051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b610160815261296c81612117565b519020036135a65761012087015173ffffffffffffffffffffffffffffffffffffffff16156133da5760e08701519073ffffffffffffffffffffffffffffffffffffffff610120890151169073ffffffffffffffffffffffffffffffffffffffff6101008a015116604051907f1da664e80000000000000000000000000000000000000000000000000000000082526004820152602081602481865afa90811561159d575f916133a0575b5015613354575f5491612710612a3461ffff8560c01c1686613ad1565b0493848060011b046002148515171561326257612a55908560011b90613ac4565b73ffffffffffffffffffffffffffffffffffffffff6101008c015116604051907f6fcca69b0000000000000000000000000000000000000000000000000000000082526004820152602081602481865afa90811561159d575f91613322575b50809110610964578a94612710612ad261ffff8760c01c1684613ad1565b049073ffffffffffffffffffffffffffffffffffffffff610100612af4613855565b9801511693828260011b018260011b11613262576004948360209360405192612b1c846120a6565b73ffffffffffffffffffffffffffffffffffffffff8b871c1684528584015260011b016040820152612b4d8961389f565b52612b578861389f565b50604051948580927f2b1eaf290000000000000000000000000000000000000000000000000000000082525afa92831561159d578c905f946132c5575b509073ffffffffffffffffffffffffffffffffffffffff610100612bbb9301511692613ac4565b9073ffffffffffffffffffffffffffffffffffffffff60405193612bde856120a6565b16835260208301526040820152612bf4846138d9565b52612bfe836138d9565b50612710612c1861ffff60e08c01519460c01c1684613ad1565b04808060011b04600214811517156132625773ffffffffffffffffffffffffffffffffffffffff6101208b01511690602073ffffffffffffffffffffffffffffffffffffffff6101008d0151166024604051809581937f6fcca69b00000000000000000000000000000000000000000000000000000000835260048301525afa91821561159d575f9261328f575b5090612cb8612cbd9260011b85613ac4565b613ac4565b60208a8101516060808d01516040805167ffffffffffffffff90941694840194855263ffffffff909116908301523390820152919391612d008160808101610ecd565b5190209067ffffffffffffffff60208c015116938b519062093a80420142116132625773ffffffffffffffffffffffffffffffffffffffff8f818f6101000151169360405198612d4f8a612075565b89526020890152336040890152166060870152608086015260a085015260c084015263ffffffff62093a8042011660e08401525f52600460205260405f209167ffffffffffffffff81511692837fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008254161781556020820151806001830155600282019073ffffffffffffffffffffffffffffffffffffffff6040850151167fffffffffffffffffffffffff0000000000000000000000000000000000000000928184825416179055600384019073ffffffffffffffffffffffffffffffffffffffff6060870151169182858254161790556080860151928360048701556005860173ffffffffffffffffffffffffffffffffffffffff60a089015116809682541617905563ffffffff60e0600760c08a015198896006820155019801511696877fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000082541617905573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b156109b857604051987ff2233951000000000000000000000000000000000000000000000000000000008a5260048a0152602489015260448801526064870152608486015260a485015260c484015260e4830152612feb61010483018a8051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b5f82610264818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af191821561159d578b9261323a575b50888695936020959361307a9360405198899788977f1e223a78000000000000000000000000000000000000000000000000000000008952600489016139a9565b03818973ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af1801561322f57613200575b5073ffffffffffffffffffffffffffffffffffffffff6101208501511667ffffffffffffffff60208601511663ffffffff60608701511690823b156103bc57916131579391888094604051968795869485937f6ee6261700000000000000000000000000000000000000000000000000000000855260048501526024840152336044840152608060648401526084830190612175565b03925af180156131f5579085916131e1575b505061ffff60407f70b14fe3afd588ffa8731df33ed01eae13ff43736d804f96416ef6d59fba228a9460016020958473ffffffffffffffffffffffffffffffffffffffff965b1614146131cf575b519586815260098552205416946040519586521693a3565b80518752600385525f828820556131b7565b6131ea90612092565b61140657835f613169565b6040513d87823e3d90fd5b6132219060203d602011613228575b6132198183612134565b810190613991565b505f6130c1565b503d61320f565b6040513d88823e3d90fd5b61307a919a5060209492508695936132528b92612092565b8c5f9c9350939550939550613039565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b91506020823d6020116132bd575b816132aa60209383612134565b810103126109b857905190612cb8612ca6565b3d915061329d565b919350506020813d60201161331a575b816132e260209383612134565b810103126109b8578b9273ffffffffffffffffffffffffffffffffffffffff610100613310612bbb946124fa565b9592935050612b94565b3d91506132d5565b90506020813d60201161334c575b8161333d60209383612134565b810103126109b857515f612ab4565b3d9150613330565b602473ffffffffffffffffffffffffffffffffffffffff6101008b015116604051907f1fefad7d0000000000000000000000000000000000000000000000000000000082526004820152fd5b90506020813d6020116133d2575b816133bb60209383612134565b810103126109b8576133cc90612439565b5f612a17565b3d91506133ae565b919060e087969594960151925f54938460bf1c946201fffe861661fffe871603613262578b6134f6938b9373ffffffffffffffffffffffffffffffffffffffff61343861271061343061fffe60209d1685613ad1565b048093613ac4565b91613441613855565b9561010088019183835116846040519361345a856120a6565b8f1c1683528d83015260408201526134718761389f565b5261347b8661389f565b505116906040519161348c836120a6565b73ffffffffffffffffffffffffffffffffffffffff851683528a83015260408201526134b7846138d9565b526134c1836138d9565b506040519a8b9788977f1e223a78000000000000000000000000000000000000000000000000000000008952600489016139a9565b03815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af190811561159d577f70b14fe3afd588ffa8731df33ed01eae13ff43736d804f96416ef6d59fba228a94600173ffffffffffffffffffffffffffffffffffffffff9461ffff6040946020988297613589575b506131af565b61359f908a3d8c11613228576132198183612134565b505f613583565b60248751604051907f41dc962e0000000000000000000000000000000000000000000000000000000082526004820152fd5b60248851604051907f41dc962e0000000000000000000000000000000000000000000000000000000082526004820152fd5b60046040517f88a21e4f000000000000000000000000000000000000000000000000000000008152fd5b60046040517f23455ba1000000000000000000000000000000000000000000000000000000008152fd5b90506020813d602011613690575b8161367960209383612134565b810103126109b85761368a90612439565b5f612768565b3d915061366c565b602490604051907f0363c8a60000000000000000000000000000000000000000000000000000000082526004820152fd5b9091506020813d602011613702575b816136e560209383612134565b810103126109b8576136fb63ffffffff916124da565b91906126c4565b3d91506136d8565b60046040517f2f4ca85b000000000000000000000000000000000000000000000000000000008152fd5b608073ffffffffffffffffffffffffffffffffffffffff91613754612446565b63ffffffff8151165f549077ffffffffffffffffffffffffffffffffffffffff00000000602084015160201b16907fffffffffffff000000000000000000000000000000000000000000000000000079ffff000000000000000000000000000000000000000000000000604086015160c01b1693161717175f5560608101516001550151167fffffffffffffffffffffffff00000000000000000000000000000000000000006002541617600255565b60409060405191613814836120fb565b6001835282915f5b60208082101561384d57835160209291613835826120a6565b5f82525f818301525f8683015282880101520161381c565b505091925050565b60409060405191613865836120a6565b60028352825f5b82811061387857505050565b6020908351613886816120a6565b5f8152825f818301525f8683015282850101520161386c565b8051156138ac5760200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b8051600110156138ac5760400190565b9081518082526020808093019301915f5b828110613908575050505090565b8351805173ffffffffffffffffffffffffffffffffffffffff908116875281840151168684015260409081015190860152606090940193928101926001016138fa565b9091612331949367ffffffffffffffff60809416835273ffffffffffffffffffffffffffffffffffffffff809216602084015216604082015281606082015201906138e9565b908160209103126109b8575160038110156109b85790565b97969473ffffffffffffffffffffffffffffffffffffffff9061ffff613a06613a20966139f88d60c09a986139ea613ac29e99610220808552840190612175565b916020818403910152612175565b8d810360408f015290612175565b941660608b015216608089015287820360a08901526138e9565b9401908051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b565b9190820391821161326257565b818102929181159184041417156132625756fea2646970667358221220b8edc6a3d01b639de786b4f87a4ab33727075b6194f3d4522b440eb4d9197cfa64736f6c63430008170033";

    public static final String FUNC_ACCEPTOWNERSHIP = "acceptOwnership";

    public static final String FUNC_CANCELREQUEST = "cancelRequest";

    public static final String FUNC_CLIENT = "client";

    public static final String FUNC_GETCONFIG = "getConfig";

    public static final String FUNC_GETPROTOCOLFEE = "getProtocolFee";

    public static final String FUNC_GETSUBSCRIPTIONBATCHREADER = "getSubscriptionBatchReader";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_NODERESPONDED = "nodeResponded";

    public static final String FUNC_PREPARENEXTINTERVAL = "prepareNextInterval";

    public static final String FUNC_PROOFREQUESTS = "proofRequests";

    public static final String FUNC_REDUNDANCYCOUNT = "redundancyCount";

    public static final String FUNC_REPORTCOMPUTERESULT = "reportComputeResult";

    public static final String FUNC_REPORTDELEGATEDCOMPUTERESULT = "reportDelegatedComputeResult";

    public static final String FUNC_REPORTVERIFICATIONRESULT = "reportVerificationResult";

    public static final String FUNC_REQUESTCOMMITMENTS = "requestCommitments";

    public static final String FUNC_SETSUBSCRIPTIONBATCHREADER = "setSubscriptionBatchReader";

    public static final String FUNC_STARTREQUEST = "startRequest";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TYPEANDVERSION = "typeAndVersion";

    public static final String FUNC_UPDATECONFIG = "updateConfig";

    public static final Event COMPUTEDELIVERED_EVENT = new Event(
        "ComputeDelivered",
        Arrays.<TypeReference<?>>asList(
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Address>(true) {},
            new TypeReference<Uint16>() {}
        )
    );

    public static final Event OWNERSHIPTRANSFERREQUESTED_EVENT = new Event(
        "OwnershipTransferRequested",
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {})
    );

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event(
        "OwnershipTransferred",
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {})
    );

    public static final Event PROOFVERIFIED_EVENT = new Event(
        "ProofVerified",
        Arrays.<TypeReference<?>>asList(
            new TypeReference<Uint64>(true) {},
            new TypeReference<Uint32>(true) {},
            new TypeReference<Address>(true) {},
            new TypeReference<Bool>() {},
            new TypeReference<Address>() {}
        )
    );

    public static final Event REQUESTCANCELLED_EVENT = new Event(
        "RequestCancelled",
        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {})
    );

    public static final Event REQUESTSTARTED_EVENT = new Event(
        "RequestStarted",
        Arrays.<TypeReference<?>>asList(
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Uint64>(true) {},
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Commitment>() {}
        )
    );

    @Deprecated
    protected DelegateeCoordinator(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DelegateeCoordinator(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DelegateeCoordinator(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        BigInteger gasPrice,
        BigInteger gasLimit
    ) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DelegateeCoordinator(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        ContractGasProvider contractGasProvider
    ) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> acceptOwnership() {
        final Function function = new Function(FUNC_ACCEPTOWNERSHIP, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelRequest(byte[] requestId) {
        final Function function = new Function(
            FUNC_CANCELREQUEST,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(requestId)),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> client() {
        final Function function = new Function(
            FUNC_CLIENT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {})
        );
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BillingConfig> getConfig() {
        final Function function = new Function(
            FUNC_GETCONFIG,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<BillingConfig>() {})
        );
        return executeRemoteCallSingleValueReturn(function, BillingConfig.class);
    }

    public RemoteFunctionCall<BigInteger> getProtocolFee() {
        final Function function = new Function(
            FUNC_GETPROTOCOLFEE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint72>() {})
        );
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getSubscriptionBatchReader() {
        final Function function = new Function(
            FUNC_GETSUBSCRIPTIONBATCHREADER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {})
        );
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(BillingConfig _config) {
        final Function function = new Function(FUNC_INITIALIZE, Arrays.<Type>asList(_config), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> nodeResponded(byte[] param0) {
        final Function function = new Function(
            FUNC_NODERESPONDED,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {})
        );
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> prepareNextInterval(
        BigInteger subscriptionId,
        BigInteger nextInterval,
        String nodeWallet
    ) {
        final Function function = new Function(
            FUNC_PREPARENEXTINTERVAL,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Uint32(nextInterval),
                new org.web3j.abi.datatypes.Address(160, nodeWallet)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger>> proofRequests(
        byte[] param0
    ) {
        final Function function = new Function(
            FUNC_PROOFREQUESTS,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Uint64>() {},
                new TypeReference<Bytes32>() {},
                new TypeReference<Address>() {},
                new TypeReference<Address>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Address>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Uint32>() {}
            )
        );
        return new RemoteFunctionCall<Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger>>(
            function,
            new Callable<Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger>>() {
                @Override
                public Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger> call() throws Exception {
                    List<Type> results = executeCallMultipleValueReturn(function);
                    return new Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger>(
                        (BigInteger) results.get(0).getValue(),
                        (byte[]) results.get(1).getValue(),
                        (String) results.get(2).getValue(),
                        (String) results.get(3).getValue(),
                        (BigInteger) results.get(4).getValue(),
                        (String) results.get(5).getValue(),
                        (BigInteger) results.get(6).getValue(),
                        (BigInteger) results.get(7).getValue()
                    );
                }
            }
        );
    }

    public RemoteFunctionCall<BigInteger> redundancyCount(byte[] param0) {
        final Function function = new Function(
            FUNC_REDUNDANCYCOUNT,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {})
        );
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> reportComputeResult(
        BigInteger deliveryInterval,
        byte[] input,
        byte[] output,
        byte[] proof,
        byte[] commitmentData,
        String nodeWallet
    ) {
        final Function function = new Function(
            FUNC_REPORTCOMPUTERESULT,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint32(deliveryInterval),
                new org.web3j.abi.datatypes.DynamicBytes(input),
                new org.web3j.abi.datatypes.DynamicBytes(output),
                new org.web3j.abi.datatypes.DynamicBytes(proof),
                new org.web3j.abi.datatypes.DynamicBytes(commitmentData),
                new org.web3j.abi.datatypes.Address(160, nodeWallet)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reportDelegatedComputeResult(
        BigInteger nonce,
        BigInteger expiry,
        ComputeSubscription sub,
        byte[] signature,
        BigInteger deliveryInterval,
        byte[] input,
        byte[] output,
        byte[] proof,
        String nodeWallet
    ) {
        final Function function = new Function(
            FUNC_REPORTDELEGATEDCOMPUTERESULT,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint32(nonce),
                new org.web3j.abi.datatypes.generated.Uint32(expiry),
                sub,
                new org.web3j.abi.datatypes.DynamicBytes(signature),
                new org.web3j.abi.datatypes.generated.Uint32(deliveryInterval),
                new org.web3j.abi.datatypes.DynamicBytes(input),
                new org.web3j.abi.datatypes.DynamicBytes(output),
                new org.web3j.abi.datatypes.DynamicBytes(proof),
                new org.web3j.abi.datatypes.Address(160, nodeWallet)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reportVerificationResult(
        BigInteger subscriptionId,
        BigInteger interval,
        String node,
        Boolean valid
    ) {
        final Function function = new Function(
            FUNC_REPORTVERIFICATIONRESULT,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Uint32(interval),
                new org.web3j.abi.datatypes.Address(160, node),
                new org.web3j.abi.datatypes.Bool(valid)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> requestCommitments(byte[] param0) {
        final Function function = new Function(
            FUNC_REQUESTCOMMITMENTS,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {})
        );
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> setSubscriptionBatchReader(String _reader) {
        final Function function = new Function(
            FUNC_SETSUBSCRIPTIONBATCHREADER,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _reader)),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> startRequest(
        byte[] requestId,
        BigInteger subscriptionId,
        byte[] containerId,
        BigInteger interval,
        BigInteger redundancy,
        Boolean useDeliveryInbox,
        String feeToken,
        BigInteger feeAmount,
        String wallet,
        String verifier
    ) {
        final Function function = new Function(
            FUNC_STARTREQUEST,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Bytes32(requestId),
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Bytes32(containerId),
                new org.web3j.abi.datatypes.generated.Uint32(interval),
                new org.web3j.abi.datatypes.generated.Uint16(redundancy),
                new org.web3j.abi.datatypes.Bool(useDeliveryInbox),
                new org.web3j.abi.datatypes.Address(160, feeToken),
                new org.web3j.abi.datatypes.generated.Uint256(feeAmount),
                new org.web3j.abi.datatypes.Address(160, wallet),
                new org.web3j.abi.datatypes.Address(160, verifier)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String to) {
        final Function function = new Function(
            FUNC_TRANSFEROWNERSHIP,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to)),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> typeAndVersion() {
        final Function function = new Function(
            FUNC_TYPEANDVERSION,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {})
        );
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> updateConfig(BillingConfig config) {
        final Function function = new Function(FUNC_UPDATECONFIG, Arrays.<Type>asList(config), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<ComputeDeliveredEventResponse> getComputeDeliveredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(COMPUTEDELIVERED_EVENT, transactionReceipt);
        ArrayList<ComputeDeliveredEventResponse> responses = new ArrayList<ComputeDeliveredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ComputeDeliveredEventResponse typedResponse = new ComputeDeliveredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.nodeWallet = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.numRedundantDeliveries = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ComputeDeliveredEventResponse getComputeDeliveredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(COMPUTEDELIVERED_EVENT, log);
        ComputeDeliveredEventResponse typedResponse = new ComputeDeliveredEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.nodeWallet = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.numRedundantDeliveries = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ComputeDeliveredEventResponse> computeDeliveredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getComputeDeliveredEventFromLog(log));
    }

    public Flowable<ComputeDeliveredEventResponse> computeDeliveredEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(COMPUTEDELIVERED_EVENT));
        return computeDeliveredEventFlowable(filter);
    }

    public static List<OwnershipTransferRequestedEventResponse> getOwnershipTransferRequestedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(
            OWNERSHIPTRANSFERREQUESTED_EVENT,
            transactionReceipt
        );
        ArrayList<OwnershipTransferRequestedEventResponse> responses = new ArrayList<OwnershipTransferRequestedEventResponse>(
            valueList.size()
        );
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferRequestedEventResponse getOwnershipTransferRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERREQUESTED_EVENT, log);
        OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferRequestedEventFromLog(log));
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERREQUESTED_EVENT));
        return ownershipTransferRequestedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<ProofVerifiedEventResponse> getProofVerifiedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROOFVERIFIED_EVENT, transactionReceipt);
        ArrayList<ProofVerifiedEventResponse> responses = new ArrayList<ProofVerifiedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProofVerifiedEventResponse typedResponse = new ProofVerifiedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.interval = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.node = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.valid = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.verifier = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ProofVerifiedEventResponse getProofVerifiedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PROOFVERIFIED_EVENT, log);
        ProofVerifiedEventResponse typedResponse = new ProofVerifiedEventResponse();
        typedResponse.log = log;
        typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.interval = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.node = (String) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.valid = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.verifier = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ProofVerifiedEventResponse> proofVerifiedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getProofVerifiedEventFromLog(log));
    }

    public Flowable<ProofVerifiedEventResponse> proofVerifiedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROOFVERIFIED_EVENT));
        return proofVerifiedEventFlowable(filter);
    }

    public static List<RequestCancelledEventResponse> getRequestCancelledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTCANCELLED_EVENT, transactionReceipt);
        ArrayList<RequestCancelledEventResponse> responses = new ArrayList<RequestCancelledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestCancelledEventResponse typedResponse = new RequestCancelledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestCancelledEventResponse getRequestCancelledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTCANCELLED_EVENT, log);
        RequestCancelledEventResponse typedResponse = new RequestCancelledEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestCancelledEventResponse> requestCancelledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestCancelledEventFromLog(log));
    }

    public Flowable<RequestCancelledEventResponse> requestCancelledEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTCANCELLED_EVENT));
        return requestCancelledEventFlowable(filter);
    }

    public static List<RequestStartedEventResponse> getRequestStartedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTSTARTED_EVENT, transactionReceipt);
        ArrayList<RequestStartedEventResponse> responses = new ArrayList<RequestStartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestStartedEventResponse typedResponse = new RequestStartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.containerId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.commitment = (Commitment) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestStartedEventResponse getRequestStartedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTSTARTED_EVENT, log);
        RequestStartedEventResponse typedResponse = new RequestStartedEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.containerId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.commitment = (Commitment) eventValues.getNonIndexedValues().get(0);
        return typedResponse;
    }

    public Flowable<RequestStartedEventResponse> requestStartedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestStartedEventFromLog(log));
    }

    public Flowable<RequestStartedEventResponse> requestStartedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTSTARTED_EVENT));
        return requestStartedEventFlowable(filter);
    }

    @Deprecated
    public static DelegateeCoordinator load(
        String contractAddress,
        Web3j web3j,
        Credentials credentials,
        BigInteger gasPrice,
        BigInteger gasLimit
    ) {
        return new DelegateeCoordinator(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DelegateeCoordinator load(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        BigInteger gasPrice,
        BigInteger gasLimit
    ) {
        return new DelegateeCoordinator(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DelegateeCoordinator load(
        String contractAddress,
        Web3j web3j,
        Credentials credentials,
        ContractGasProvider contractGasProvider
    ) {
        return new DelegateeCoordinator(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DelegateeCoordinator load(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        ContractGasProvider contractGasProvider
    ) {
        return new DelegateeCoordinator(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DelegateeCoordinator> deploy(
        Web3j web3j,
        Credentials credentials,
        ContractGasProvider contractGasProvider,
        String routerAddress,
        String initialOwner
    ) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(160, routerAddress),
                new org.web3j.abi.datatypes.Address(160, initialOwner)
            )
        );
        return deployRemoteCall(DelegateeCoordinator.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<DelegateeCoordinator> deploy(
        Web3j web3j,
        TransactionManager transactionManager,
        ContractGasProvider contractGasProvider,
        String routerAddress,
        String initialOwner
    ) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(160, routerAddress),
                new org.web3j.abi.datatypes.Address(160, initialOwner)
            )
        );
        return deployRemoteCall(DelegateeCoordinator.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DelegateeCoordinator> deploy(
        Web3j web3j,
        Credentials credentials,
        BigInteger gasPrice,
        BigInteger gasLimit,
        String routerAddress,
        String initialOwner
    ) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(160, routerAddress),
                new org.web3j.abi.datatypes.Address(160, initialOwner)
            )
        );
        return deployRemoteCall(DelegateeCoordinator.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DelegateeCoordinator> deploy(
        Web3j web3j,
        TransactionManager transactionManager,
        BigInteger gasPrice,
        BigInteger gasLimit,
        String routerAddress,
        String initialOwner
    ) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(160, routerAddress),
                new org.web3j.abi.datatypes.Address(160, initialOwner)
            )
        );
        return deployRemoteCall(DelegateeCoordinator.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class BillingConfig extends StaticStruct {

        public BigInteger verificationTimeout;

        public String protocolFeeRecipient;

        public BigInteger protocolFee;

        public BigInteger tickNodeFee;

        public String tickNodeFeeToken;

        public BillingConfig(
            BigInteger verificationTimeout,
            String protocolFeeRecipient,
            BigInteger protocolFee,
            BigInteger tickNodeFee,
            String tickNodeFeeToken
        ) {
            super(
                new org.web3j.abi.datatypes.generated.Uint32(verificationTimeout),
                new org.web3j.abi.datatypes.Address(160, protocolFeeRecipient),
                new org.web3j.abi.datatypes.generated.Uint16(protocolFee),
                new org.web3j.abi.datatypes.generated.Uint256(tickNodeFee),
                new org.web3j.abi.datatypes.Address(160, tickNodeFeeToken)
            );
            this.verificationTimeout = verificationTimeout;
            this.protocolFeeRecipient = protocolFeeRecipient;
            this.protocolFee = protocolFee;
            this.tickNodeFee = tickNodeFee;
            this.tickNodeFeeToken = tickNodeFeeToken;
        }

        public BillingConfig(
            Uint32 verificationTimeout,
            Address protocolFeeRecipient,
            Uint16 protocolFee,
            Uint256 tickNodeFee,
            Address tickNodeFeeToken
        ) {
            super(verificationTimeout, protocolFeeRecipient, protocolFee, tickNodeFee, tickNodeFeeToken);
            this.verificationTimeout = verificationTimeout.getValue();
            this.protocolFeeRecipient = protocolFeeRecipient.getValue();
            this.protocolFee = protocolFee.getValue();
            this.tickNodeFee = tickNodeFee.getValue();
            this.tickNodeFeeToken = tickNodeFeeToken.getValue();
        }
    }

    public static class ComputeSubscription extends StaticStruct {

        public byte[] routeId;

        public byte[] containerId;

        public BigInteger feeAmount;

        public String client;

        public BigInteger activeAt;

        public BigInteger intervalSeconds;

        public BigInteger maxExecutions;

        public String wallet;

        public String feeToken;

        public String verifier;

        public BigInteger redundancy;

        public Boolean useDeliveryInbox;

        public ComputeSubscription(
            byte[] routeId,
            byte[] containerId,
            BigInteger feeAmount,
            String client,
            BigInteger activeAt,
            BigInteger intervalSeconds,
            BigInteger maxExecutions,
            String wallet,
            String feeToken,
            String verifier,
            BigInteger redundancy,
            Boolean useDeliveryInbox
        ) {
            super(
                new org.web3j.abi.datatypes.generated.Bytes32(routeId),
                new org.web3j.abi.datatypes.generated.Bytes32(containerId),
                new org.web3j.abi.datatypes.generated.Uint256(feeAmount),
                new org.web3j.abi.datatypes.Address(160, client),
                new org.web3j.abi.datatypes.generated.Uint32(activeAt),
                new org.web3j.abi.datatypes.generated.Uint32(intervalSeconds),
                new org.web3j.abi.datatypes.generated.Uint32(maxExecutions),
                new org.web3j.abi.datatypes.Address(160, wallet),
                new org.web3j.abi.datatypes.Address(160, feeToken),
                new org.web3j.abi.datatypes.Address(160, verifier),
                new org.web3j.abi.datatypes.generated.Uint16(redundancy),
                new org.web3j.abi.datatypes.Bool(useDeliveryInbox)
            );
            this.routeId = routeId;
            this.containerId = containerId;
            this.feeAmount = feeAmount;
            this.client = client;
            this.activeAt = activeAt;
            this.intervalSeconds = intervalSeconds;
            this.maxExecutions = maxExecutions;
            this.wallet = wallet;
            this.feeToken = feeToken;
            this.verifier = verifier;
            this.redundancy = redundancy;
            this.useDeliveryInbox = useDeliveryInbox;
        }

        public ComputeSubscription(
            Bytes32 routeId,
            Bytes32 containerId,
            Uint256 feeAmount,
            Address client,
            Uint32 activeAt,
            Uint32 intervalSeconds,
            Uint32 maxExecutions,
            Address wallet,
            Address feeToken,
            Address verifier,
            Uint16 redundancy,
            Bool useDeliveryInbox
        ) {
            super(
                routeId,
                containerId,
                feeAmount,
                client,
                activeAt,
                intervalSeconds,
                maxExecutions,
                wallet,
                feeToken,
                verifier,
                redundancy,
                useDeliveryInbox
            );
            this.routeId = routeId.getValue();
            this.containerId = containerId.getValue();
            this.feeAmount = feeAmount.getValue();
            this.client = client.getValue();
            this.activeAt = activeAt.getValue();
            this.intervalSeconds = intervalSeconds.getValue();
            this.maxExecutions = maxExecutions.getValue();
            this.wallet = wallet.getValue();
            this.feeToken = feeToken.getValue();
            this.verifier = verifier.getValue();
            this.redundancy = redundancy.getValue();
            this.useDeliveryInbox = useDeliveryInbox.getValue();
        }
    }

    public static class Commitment extends StaticStruct {

        public byte[] requestId;

        public BigInteger subscriptionId;

        public byte[] containerId;

        public BigInteger interval;

        public Boolean useDeliveryInbox;

        public BigInteger redundancy;

        public String walletAddress;

        public BigInteger feeAmount;

        public String feeToken;

        public String verifier;

        public String coordinator;

        public Commitment(
            byte[] requestId,
            BigInteger subscriptionId,
            byte[] containerId,
            BigInteger interval,
            Boolean useDeliveryInbox,
            BigInteger redundancy,
            String walletAddress,
            BigInteger feeAmount,
            String feeToken,
            String verifier,
            String coordinator
        ) {
            super(
                new org.web3j.abi.datatypes.generated.Bytes32(requestId),
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Bytes32(containerId),
                new org.web3j.abi.datatypes.generated.Uint32(interval),
                new org.web3j.abi.datatypes.Bool(useDeliveryInbox),
                new org.web3j.abi.datatypes.generated.Uint16(redundancy),
                new org.web3j.abi.datatypes.Address(160, walletAddress),
                new org.web3j.abi.datatypes.generated.Uint256(feeAmount),
                new org.web3j.abi.datatypes.Address(160, feeToken),
                new org.web3j.abi.datatypes.Address(160, verifier),
                new org.web3j.abi.datatypes.Address(160, coordinator)
            );
            this.requestId = requestId;
            this.subscriptionId = subscriptionId;
            this.containerId = containerId;
            this.interval = interval;
            this.useDeliveryInbox = useDeliveryInbox;
            this.redundancy = redundancy;
            this.walletAddress = walletAddress;
            this.feeAmount = feeAmount;
            this.feeToken = feeToken;
            this.verifier = verifier;
            this.coordinator = coordinator;
        }

        public Commitment(
            Bytes32 requestId,
            Uint64 subscriptionId,
            Bytes32 containerId,
            Uint32 interval,
            Bool useDeliveryInbox,
            Uint16 redundancy,
            Address walletAddress,
            Uint256 feeAmount,
            Address feeToken,
            Address verifier,
            Address coordinator
        ) {
            super(
                requestId,
                subscriptionId,
                containerId,
                interval,
                useDeliveryInbox,
                redundancy,
                walletAddress,
                feeAmount,
                feeToken,
                verifier,
                coordinator
            );
            this.requestId = requestId.getValue();
            this.subscriptionId = subscriptionId.getValue();
            this.containerId = containerId.getValue();
            this.interval = interval.getValue();
            this.useDeliveryInbox = useDeliveryInbox.getValue();
            this.redundancy = redundancy.getValue();
            this.walletAddress = walletAddress.getValue();
            this.feeAmount = feeAmount.getValue();
            this.feeToken = feeToken.getValue();
            this.verifier = verifier.getValue();
            this.coordinator = coordinator.getValue();
        }
    }

    public static class ComputeDeliveredEventResponse extends BaseEventResponse {

        public byte[] requestId;

        public String nodeWallet;

        public BigInteger numRedundantDeliveries;
    }

    public static class OwnershipTransferRequestedEventResponse extends BaseEventResponse {

        public String from;

        public String to;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {

        public String from;

        public String to;
    }

    public static class ProofVerifiedEventResponse extends BaseEventResponse {

        public BigInteger subscriptionId;

        public BigInteger interval;

        public String node;

        public Boolean valid;

        public String verifier;
    }

    public static class RequestCancelledEventResponse extends BaseEventResponse {

        public byte[] requestId;
    }

    public static class RequestStartedEventResponse extends BaseEventResponse {

        public byte[] requestId;

        public BigInteger subscriptionId;

        public byte[] containerId;

        public Commitment commitment;
    }
}
