package io.hpp.noosphere.agent.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint72;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.10.3.
 */
@SuppressWarnings("rawtypes")
public class DelegateeCoordinator extends Contract {

    public static final String BINARY =
        "60a0346200017757601f62003b2938819003918201601f19168301916001600160401b038311848410176200017b57808492604094855283398101031262000177576200005a602062000052836200018f565b92016200018f565b6001600160a01b039182168015620001655760805260016005551680156200012057600680546001600160a01b0319169190911790556040516139849081620001a58239608051818181610146015281816105ad01528181610ffc015281816110660152818161116f0152818161126b015281816112fb01528181611456015281816114cf0152818161173501528181611c0e01528181611ca80152818161245d0152818161252301528181612cb901528181612df401528181612e7f01526132fb0152f35b60405162461bcd60e51b815260206004820152601960248201527f43616e6e6f742073657420636c69656e7420746f207a65726f000000000000006044820152606490fd5b604051632530e88560e11b8152600490fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b0382168203620001775756fe6080806040526004361015610012575f80fd5b5f905f3560e01c908163109e94cf14611eb457508063181f5a7714611e3557806323dfe6f21461193b578063298f7bdc146118ee578063368bf464146118a65780633c43a84d146117b057806341e46a451461178f57806350125546146116ec578063576edca3146116d45780635cf3296f14610dc757806379ba509714610cbd578063a5a4103114610c41578063bc85694f14610bf5578063c34cf5c714610b34578063c3f909d414610a55578063c7fb32fb146104f6578063f2fde38b146103de5763f5e5a31a146100e4575f80fd5b346102ea5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102ea5761011b61223b565b90610124612071565b9161012d6120d5565b9073ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000169063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818816019081116103b1576040517f4720845700000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8516600482015263ffffffff91909116602482015294958695602091908281604481885afa801561036d578890610378575b60019150151514610208578680f35b6040517f1cfe615c00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff8616600482015263ffffffff9190911660248201526101809081816044818b895af1801561036d57610342575b5050600154606095816102fc575b50508554901c1690803b156102f857818580946102be604051978896879586947f1d013164000000000000000000000000000000000000000000000000000000008652600486016137b5565b03925af180156102ed576102d6575b80808080808680f35b6102df90611f1f565b6102ea57805f6102cd565b80fd5b6040513d84823e3d90fd5b8480fd5b90955061030761366e565b958360025416846040519361031b85611f33565b16835283830152604082015261033086613709565b5261033a85613709565b505f80610272565b8161036192903d10610366575b6103598183611fc1565b8101906123c5565b610264565b503d61034f565b6040513d8a823e3d90fd5b508281813d83116103aa575b61038e8183611fc1565b810103126103a6576103a16001916122a3565b6101f9565b8780fd5b503d610384565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b50346102ea5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102ea5760043573ffffffffffffffffffffffffffffffffffffffff8082168092036104f25761043861351f565b33821461049457817fffffffffffffffffffffffff00000000000000000000000000000000000000006007541617600755600654167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12788380a380f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152fd5b5f80fd5b50346102ea576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102ea5760243567ffffffffffffffff811681036104f2576064359063ffffffff821682036104f25760843561ffff811681036104f25760a4359283151584036104f25760c4359373ffffffffffffffffffffffffffffffffffffffff9283861686036104f257610104359184831683036104f2576105a06120f8565b936105a9612252565b50857f0000000000000000000000000000000000000000000000000000000000000000163303610a2b576105db612252565b508585166108ab575b9261ffff67ffffffffffffffff989387959363ffffffff87958b60206040519e8f9261060f84611f6b565b6004358452169101528c60406044359101521660608c0152151560808b01521660a08901521660c087015260e43560e08701521661010085015216610120830152306101408301526040519260406020850161070581868051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b6101609586815261071581611fa4565b519020916004358152600360205220556040516107cc81848051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b67ffffffffffffffff6044359216907fc2f86b99a2f1c678a8932761b141b6656cc75008064c693d41867a9b2ccc7c878560043592a46108a960405180928051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565bf35b9691926040517f1da664e800000000000000000000000000000000000000000000000000000000815286841660048201526020816024818a8a165afa9081156109af578a916109ed575b50156109ba576040517f6fcca69b00000000000000000000000000000000000000000000000000000000815286841660048201526020816024818a8a165afa9081156109af578a9161097d575b5060e43510610953579291966105e4565b60046040517f1c22661b000000000000000000000000000000000000000000000000000000008152fd5b90506020813d6020116109a7575b8161099860209383611fc1565b810103126104f257515f610942565b3d915061098b565b6040513d8c823e3d90fd5b60248387604051917f1fefad7d000000000000000000000000000000000000000000000000000000008352166004820152fd5b90506020813d602011610a23575b81610a0860209383611fc1565b81010312610a1f57610a19906122a3565b5f6108f5565b8980fd5b3d91506109fb565b60046040517fc41a5b09000000000000000000000000000000000000000000000000000000008152fd5b50346102ea57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102ea578060a0916080604051610a9681611f4f565b828152826020820152826040820152826060820152015260405190610aba82611f4f565b5463ffffffff81169182815273ffffffffffffffffffffffffffffffffffffffff916020820190838160201c16825261ffff9081604085019160c01c168152846001549360608601948552608082600254169601958652604051978852511660208701525116604085015251606084015251166080820152f35b50346102ea5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102ea57604061010091600435815260046020522067ffffffffffffffff8154169060018101549073ffffffffffffffffffffffffffffffffffffffff8060028301541690806003840154166004840154916005850154169263ffffffff600760068701549601541695604051978852602088015260408701526060860152608085015260a084015260c083015260e0820152f35b50346102ea5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102ea5761ffff6040602092600435815260088452205416604051908152f35b50346102ea57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102ea575460c01c61ffff1668ffffffffffffffffff8111610c9357602090604051908152f35b60046040517fb8e5ea4b000000000000000000000000000000000000000000000000000000008152fd5b50346102ea57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102ea5760075473ffffffffffffffffffffffffffffffffffffffff8082163303610d6957600654917fffffffffffffffffffffffff0000000000000000000000000000000000000000903382851617600655166007553391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d7573742062652070726f706f73656420636c69656e740000000000000000006044820152fd5b50346104f25760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104f257610dff61223b565b610e07612071565b90610e106120d5565b6064351515606435036104f2576040805167ffffffffffffffff84166020820190815263ffffffff86169282019290925273ffffffffffffffffffffffffffffffffffffffff83166060820152610e9281608081015b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282611fc1565b519020805f52600460205260405f209063ffffffff600760405193610eb685611f02565b67ffffffffffffffff81541685526001810154602086015273ffffffffffffffffffffffffffffffffffffffff600282015416604086015273ffffffffffffffffffffffffffffffffffffffff60038201541660608601526004810154608086015273ffffffffffffffffffffffffffffffffffffffff60058201541660a0860152600681015460c086015201541660e08301525f5260046020525f600760408220828155826001820155826002820155826003820155826004820155826005820155826006820155015563ffffffff60e082015116156116aa5763ffffffff60e08201511663ffffffff4216101567ffffffffffffffff82511691604051927fa50366b800000000000000000000000000000000000000000000000000000000845260048401526101808360248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa928315611536575f9361156b575b5073ffffffffffffffffffffffffffffffffffffffff6101208401511633036115415773ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b156104f2576040517f77bd924f00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff82511660048201526020820151602482015273ffffffffffffffffffffffffffffffffffffffff604083015116604482015273ffffffffffffffffffffffffffffffffffffffff60608301511660648201526080820151608482015273ffffffffffffffffffffffffffffffffffffffff60a08301511660a482015260c082015160c482015263ffffffff60e08301511660e48201525f81610104818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156115365761151f575b50908692916111a961366e565b91606435908115611517575b50156113a3578073ffffffffffffffffffffffffffffffffffffffff606067ffffffffffffffff9301511673ffffffffffffffffffffffffffffffffffffffff60a0830151166080830151906040519261120e84611f33565b83526020830152604082015261122384613709565b5261122d83613709565b5051169173ffffffffffffffffffffffffffffffffffffffff60608160e084015116920151169273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b156102f8576112e1859360405195869485947f1d013164000000000000000000000000000000000000000000000000000000008652600486015260248501526044840152608060648401526084830190613753565b03818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156102ed5761138b575b50505b7f89f6621aaa96daa4351dd7779ceb97eb7a093e09f2a405690d616013513eef3f604067ffffffffffffffff63ffffffff73ffffffffffffffffffffffffffffffffffffffff83519560643515158752336020880152169616941692a480f35b61139490611f1f565b61139f57835f611328565b8380fd5b9173ffffffffffffffffffffffffffffffffffffffff60e08201511690604073ffffffffffffffffffffffffffffffffffffffff6101008301511691015190604051926113ef84611f33565b83526020830152604082015261140482613709565b5261140e81613709565b5067ffffffffffffffff8251169173ffffffffffffffffffffffffffffffffffffffff604081606084015116920151169273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b156102f8576114b5859360405195869485947f1d013164000000000000000000000000000000000000000000000000000000008652600486016137b5565b03818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156102ed57611503575b505061132b565b61150c90611f1f565b61139f57835f6114fc565b90505f6111b5565b61152c9193929750611f1f565b5f9590915f61119c565b6040513d5f823e3d90fd5b60046040517fb9857aa1000000000000000000000000000000000000000000000000000000008152fd5b909250610180813d610180116116a2575b8161158a6101809383611fc1565b810103126104f257604051908161018081011067ffffffffffffffff610180840111176116755761018082016040528051825260208101516020830152604081015160408301526115dd606082016122e5565b60608301526115ee608082016122c5565b60808301526115ff60a082016122c5565b60a083015261161060c082016122c5565b60c083015261162160e082016122e5565b60e08301526101006116348183016122e5565b908301526101206116468183016122e5565b908301526101406116588183016122d6565b9083015261166a6101608092016122a3565b90820152915f61102c565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b3d915061157c565b60046040517f70eb1be5000000000000000000000000000000000000000000000000000000008152fd5b346104f2576116ea6116e53661219e565b61359e565b005b346104f25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104f25760043573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163303610a2b57805f5260036020525f60408120557ff903f4774c7bd27355f9d7fcbc382b079b164a697a44ac5d95267a4c3cb3bb225f80a2005b346104f2576116ea6117a03661219e565b6117a861351f565b6116e561351f565b346104f25760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104f2576117e761205e565b67ffffffffffffffff6024358181116104f257611808903690600401612180565b906044358181116104f257611821903690600401612180565b906064358181116104f25761183a903690600401612180565b906084359081116104f257611853903690600401612180565b9161185c6120b2565b9360026005541461187c576118759560026005556123e1565b6001600555005b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b346104f25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104f2576004355f526003602052602060405f2054604051908152f35b346104f25760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104f2576004355f526009602052602060ff60405f2054166040519015158152f35b346104f2576102807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104f25761197361205e565b61197b612071565b61018091827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc3601126104f25767ffffffffffffffff6101c4358181116104f2576119ca903690600401612084565b63ffffffff6101e435166101e435036104f257610204358381116104f2576119f6903690600401612084565b9390610224358281116104f257611a11903690600401612084565b959092610244359081116104f257611a2d903690600401612084565b959094610264359973ffffffffffffffffffffffffffffffffffffffff8b168b036104f25763ffffffff90816040519b7f4879bf50000000000000000000000000000000000000000000000000000000008d521660048c01521660248a015260443560448a015260643560648a015260843560848a015273ffffffffffffffffffffffffffffffffffffffff611ac16120b2565b1660a48a015260c43563ffffffff81168091036104f25760c48a015260e43563ffffffff81168091036104f25760e48a015261010480359063ffffffff82168092036104f2578a015273ffffffffffffffffffffffffffffffffffffffff611b276120f8565b166101248a015261014480359073ffffffffffffffffffffffffffffffffffffffff82168092036104f2578a015261016480359073ffffffffffffffffffffffffffffffffffffffff82168092036104f2578a015261018480359061ffff82168092036104f2578a01526101a4908135918215158093036104f2577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83610204946020978f9788968701526101e06101c4870152816101e4870152868601375f858286010152011681010301815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af180156115365789905f90611df8575b6040517f1cfe615c00000000000000000000000000000000000000000000000000000000815267ffffffffffffffff909116600482015263ffffffff6101e43516602482015297508780604481015b03815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af1968715611536576116ea995f98611dc5575b505091611dab611db392611dbb9594611d966040519a60208c01908051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b6101608a52611da48a611fa4565b369161211c565b95369161211c565b92369161211c565b916101e4356123e1565b611dbb959492985092611deb611dab9285611db396903d10610366576103598183611fc1565b9050989294955092611cdc565b50506020873d602011611e2d575b81611e1360209383611fc1565b810103126104f25788611e28611c8e986122b0565b611c3f565b3d9150611e06565b346104f2575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104f257611eb0604051611e7281611f88565b601281527f436f6f7264696e61746f725f76312e302e3000000000000000000000000000006020820152604051918291602083526020830190612002565b0390f35b346104f2575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126104f25760209073ffffffffffffffffffffffffffffffffffffffff600654168152f35b610100810190811067ffffffffffffffff82111761167557604052565b67ffffffffffffffff811161167557604052565b6060810190811067ffffffffffffffff82111761167557604052565b60a0810190811067ffffffffffffffff82111761167557604052565b610160810190811067ffffffffffffffff82111761167557604052565b6040810190811067ffffffffffffffff82111761167557604052565b610180810190811067ffffffffffffffff82111761167557604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761167557604052565b91908251928382525f5b84811061204a5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f845f6020809697860101520116010190565b60208183018101518483018201520161200c565b6004359063ffffffff821682036104f257565b6024359063ffffffff821682036104f257565b9181601f840112156104f25782359167ffffffffffffffff83116104f257602083818601950101116104f257565b60a4359073ffffffffffffffffffffffffffffffffffffffff821682036104f257565b6044359073ffffffffffffffffffffffffffffffffffffffff821682036104f257565b610124359073ffffffffffffffffffffffffffffffffffffffff821682036104f257565b92919267ffffffffffffffff8211611675576040519161216460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184611fc1565b8294818452818301116104f2578281602093845f960137010152565b9080601f830112156104f25781602061219b9335910161211c565b90565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60a09101126104f2576040516121d481611f4f565b60043563ffffffff811681036104f257815273ffffffffffffffffffffffffffffffffffffffff60243581811681036104f257602083015260443561ffff811681036104f2576040830152606435606083015260843590811681036104f257608082015290565b6004359067ffffffffffffffff821682036104f257565b6040519061225f82611f6b565b5f610140838281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b519081151582036104f257565b519067ffffffffffffffff821682036104f257565b519063ffffffff821682036104f257565b519061ffff821682036104f257565b519073ffffffffffffffffffffffffffffffffffffffff821682036104f257565b9190826101609103126104f25760405161231f81611f6b565b809280518252612331602082016122b0565b60208301526040810151604083015261234c606082016122c5565b606083015261235d608082016122a3565b608083015261236e60a082016122d6565b60a083015261237f60c082016122e5565b60c083015260e081015160e083015261010061239c8183016122e5565b908301526101206123ae8183016122e5565b908301526123c06101408092016122e5565b910152565b9190610180838203126104f25761219b90602084519401612306565b9192845185015f95610160818303126104f25760208061240393019101612306565b9367ffffffffffffffff60208601511693604051947fc9f90505000000000000000000000000000000000000000000000000000000008652600486015260208560248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa948515611536575f956134de575b5063ffffffff168063ffffffff8616036134ad575084515f52600860205261ffff60405f2054169361ffff60a0870151168514613483576040517f439a301200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8916600482015260208160248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa908115611536575f91613449575b501561341f5785515f52600860205260405f2061ffff60018701167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000825416179055610e666125f667ffffffffffffffff602089015116604051928391602083019533918791604091949363ffffffff73ffffffffffffffffffffffffffffffffffffffff9267ffffffffffffffff606087019816865216602085015216910152565b519020805f52600960205260ff60405f2054166133f5575f52600960205260405f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905584515f52600860205261ffff60405f205416927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61ffff60a088015116019361ffff851161304d5786515f52600360205260405f205480156133c3576040516020810190612749828b8051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b610160815261275781611fa4565b519020036133915761012087015173ffffffffffffffffffffffffffffffffffffffff16156131c55760e08701519073ffffffffffffffffffffffffffffffffffffffff610120890151169073ffffffffffffffffffffffffffffffffffffffff6101008a015116604051907f1da664e80000000000000000000000000000000000000000000000000000000082526004820152602081602481865afa908115611536575f9161318b575b501561313f575f549161271061281f61ffff8560c01c168661393b565b0493848060011b046002148515171561304d57612840908560011b9061392e565b73ffffffffffffffffffffffffffffffffffffffff6101008c015116604051907f6fcca69b0000000000000000000000000000000000000000000000000000000082526004820152602081602481865afa908115611536575f9161310d575b50809110610953578a946127106128bd61ffff8760c01c168461393b565b049073ffffffffffffffffffffffffffffffffffffffff6101006128df6136bf565b9801511693828260011b018260011b1161304d57600494836020936040519261290784611f33565b73ffffffffffffffffffffffffffffffffffffffff8b871c1684528584015260011b01604082015261293889613709565b5261294288613709565b50604051948580927f2b1eaf290000000000000000000000000000000000000000000000000000000082525afa928315611536578c905f946130b0575b509073ffffffffffffffffffffffffffffffffffffffff6101006129a6930151169261392e565b9073ffffffffffffffffffffffffffffffffffffffff604051936129c985611f33565b168352602083015260408201526129df84613743565b526129e983613743565b50612710612a0361ffff60e08c01519460c01c168461393b565b04808060011b046002148115171561304d5773ffffffffffffffffffffffffffffffffffffffff6101208b01511690602073ffffffffffffffffffffffffffffffffffffffff6101008d0151166024604051809581937f6fcca69b00000000000000000000000000000000000000000000000000000000835260048301525afa918215611536575f9261307a575b5090612aa3612aa89260011b8561392e565b61392e565b60208a8101516060808d01516040805167ffffffffffffffff90941694840194855263ffffffff909116908301523390820152919391612aeb8160808101610e66565b5190209067ffffffffffffffff60208c015116938b519062093a804201421161304d5773ffffffffffffffffffffffffffffffffffffffff8f818f6101000151169360405198612b3a8a611f02565b89526020890152336040890152166060870152608086015260a085015260c084015263ffffffff62093a8042011660e08401525f52600460205260405f209167ffffffffffffffff81511692837fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008254161781556020820151806001830155600282019073ffffffffffffffffffffffffffffffffffffffff6040850151167fffffffffffffffffffffffff0000000000000000000000000000000000000000928184825416179055600384019073ffffffffffffffffffffffffffffffffffffffff6060870151169182858254161790556080860151928360048701556005860173ffffffffffffffffffffffffffffffffffffffff60a089015116809682541617905563ffffffff60e0600760c08a015198896006820155019801511696877fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000082541617905573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163b156104f257604051987ff2233951000000000000000000000000000000000000000000000000000000008a5260048a0152602489015260448801526064870152608486015260a485015260c484015260e4830152612dd661010483018a8051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b5f82610264818373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af1918215611536578b92613025575b508886959360209593612e659360405198899788977f1e223a7800000000000000000000000000000000000000000000000000000000895260048901613813565b03818973ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af1801561301a57612feb575b5073ffffffffffffffffffffffffffffffffffffffff6101208501511667ffffffffffffffff60208601511663ffffffff60608701511690823b156103a65791612f429391888094604051968795869485937f6ee6261700000000000000000000000000000000000000000000000000000000855260048501526024840152336044840152608060648401526084830190612002565b03925af18015612fe057908591612fcc575b505061ffff60407f70b14fe3afd588ffa8731df33ed01eae13ff43736d804f96416ef6d59fba228a9460016020958473ffffffffffffffffffffffffffffffffffffffff965b161414612fba575b519586815260088552205416946040519586521693a3565b80518752600385525f82882055612fa2565b612fd590611f1f565b61139f57835f612f54565b6040513d87823e3d90fd5b61300c9060203d602011613013575b6130048183611fc1565b8101906137fb565b505f612eac565b503d612ffa565b6040513d88823e3d90fd5b612e65919a50602094925086959361303d8b92611f1f565b8c5f9c9350939550939550612e24565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b91506020823d6020116130a8575b8161309560209383611fc1565b810103126104f257905190612aa3612a91565b3d9150613088565b919350506020813d602011613105575b816130cd60209383611fc1565b810103126104f2578b9273ffffffffffffffffffffffffffffffffffffffff6101006130fb6129a6946122e5565b959293505061297f565b3d91506130c0565b90506020813d602011613137575b8161312860209383611fc1565b810103126104f257515f61289f565b3d915061311b565b602473ffffffffffffffffffffffffffffffffffffffff6101008b015116604051907f1fefad7d0000000000000000000000000000000000000000000000000000000082526004820152fd5b90506020813d6020116131bd575b816131a660209383611fc1565b810103126104f2576131b7906122a3565b5f612802565b3d9150613199565b919060e087969594960151925f54938460bf1c946201fffe861661fffe87160361304d578b6132e1938b9373ffffffffffffffffffffffffffffffffffffffff61322361271061321b61fffe60209d168561393b565b04809361392e565b9161322c6136bf565b9561010088019183835116846040519361324585611f33565b8f1c1683528d830152604082015261325c87613709565b5261326686613709565b505116906040519161327783611f33565b73ffffffffffffffffffffffffffffffffffffffff851683528a83015260408201526132a284613743565b526132ac83613743565b506040519a8b9788977f1e223a7800000000000000000000000000000000000000000000000000000000895260048901613813565b03815f73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165af1908115611536577f70b14fe3afd588ffa8731df33ed01eae13ff43736d804f96416ef6d59fba228a94600173ffffffffffffffffffffffffffffffffffffffff9461ffff6040946020988297613374575b50612f9a565b61338a908a3d8c11613013576130048183611fc1565b505f61336e565b60248751604051907f41dc962e0000000000000000000000000000000000000000000000000000000082526004820152fd5b60248851604051907f41dc962e0000000000000000000000000000000000000000000000000000000082526004820152fd5b60046040517f88a21e4f000000000000000000000000000000000000000000000000000000008152fd5b60046040517f23455ba1000000000000000000000000000000000000000000000000000000008152fd5b90506020813d60201161347b575b8161346460209383611fc1565b810103126104f257613475906122a3565b5f612553565b3d9150613457565b60046040517f2f4ca85b000000000000000000000000000000000000000000000000000000008152fd5b602490604051907f0363c8a60000000000000000000000000000000000000000000000000000000082526004820152fd5b9094506020813d602011613517575b816134fa60209383611fc1565b810103126104f25761351063ffffffff916122c5565b949061248d565b3d91506134ed565b73ffffffffffffffffffffffffffffffffffffffff60065416330361354057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c6520627920636c69656e740000000000000000006044820152fd5b608073ffffffffffffffffffffffffffffffffffffffff916135be61351f565b63ffffffff8151165f549077ffffffffffffffffffffffffffffffffffffffff00000000602084015160201b16907fffffffffffff000000000000000000000000000000000000000000000000000079ffff000000000000000000000000000000000000000000000000604086015160c01b1693161717175f5560608101516001550151167fffffffffffffffffffffffff00000000000000000000000000000000000000006002541617600255565b6040906040519161367e83611f88565b6001835282915f5b6020808210156136b75783516020929161369f82611f33565b5f82525f818301525f86830152828801015201613686565b505091925050565b604090604051916136cf83611f33565b60028352825f5b8281106136e257505050565b60209083516136f081611f33565b5f8152825f818301525f868301528285010152016136d6565b8051156137165760200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b8051600110156137165760400190565b9081518082526020808093019301915f5b828110613772575050505090565b8351805173ffffffffffffffffffffffffffffffffffffffff90811687528184015116868401526040908101519086015260609094019392810192600101613764565b909161219b949367ffffffffffffffff60809416835273ffffffffffffffffffffffffffffffffffffffff80921660208401521660408201528160608201520190613753565b908160209103126104f2575160038110156104f25790565b97969473ffffffffffffffffffffffffffffffffffffffff9061ffff61387061388a966138628d60c09a9861385461392c9e99610220808552840190612002565b916020818403910152612002565b8d810360408f015290612002565b941660608b015216608089015287820360a0890152613753565b9401908051825267ffffffffffffffff60208201511660208301526040810151604083015263ffffffff606082015116606083015260808101511515608083015261ffff60a08201511660a083015260c081015173ffffffffffffffffffffffffffffffffffffffff80911660c084015260e082015160e084015261010081818401511690840152610120818184015116908401526101408092015116910152565b565b9190820391821161304d57565b8181029291811591840414171561304d5756fea2646970667358221220e9e16d3abb81d5548aeb1b21be261b4b005e793536822329ae5777bde0b4261764736f6c63430008170033";

    public static final String FUNC_ACCEPTOWNERSHIP = "acceptOwnership";

    public static final String FUNC_CANCELREQUEST = "cancelRequest";

    public static final String FUNC_CLIENT = "client";

    public static final String FUNC_GETCONFIG = "getConfig";

    public static final String FUNC_GETPROTOCOLFEE = "getProtocolFee";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_NODERESPONDED = "nodeResponded";

    public static final String FUNC_PREPARENEXTINTERVAL = "prepareNextInterval";

    public static final String FUNC_PROOFREQUESTS = "proofRequests";

    public static final String FUNC_REDUNDANCYCOUNT = "redundancyCount";

    public static final String FUNC_REPORTCOMPUTERESULT = "reportComputeResult";

    public static final String FUNC_REPORTDELEGATEDCOMPUTERESULT = "reportDelegatedComputeResult";

    public static final String FUNC_REPORTVERIFICATIONRESULT = "reportVerificationResult";

    public static final String FUNC_REQUESTCOMMITMENTS = "requestCommitments";

    public static final String FUNC_STARTREQUEST = "startRequest";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TYPEANDVERSION = "typeAndVersion";

    public static final String FUNC_UPDATECONFIG = "updateConfig";

    public static final Event COMPUTEDELIVERED_EVENT = new Event(
        "ComputeDelivered",
        Arrays.<TypeReference<?>>asList(
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Address>(true) {},
            new TypeReference<Uint16>() {}
        )
    );

    public static final Event OWNERSHIPTRANSFERREQUESTED_EVENT = new Event(
        "OwnershipTransferRequested",
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {})
    );

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event(
        "OwnershipTransferred",
        Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {})
    );

    public static final Event PROOFVERIFIED_EVENT = new Event(
        "ProofVerified",
        Arrays.<TypeReference<?>>asList(
            new TypeReference<Uint64>(true) {},
            new TypeReference<Uint32>(true) {},
            new TypeReference<Address>(true) {},
            new TypeReference<Bool>() {},
            new TypeReference<Address>() {}
        )
    );

    public static final Event REQUESTCANCELLED_EVENT = new Event(
        "RequestCancelled",
        Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {})
    );

    public static final Event REQUESTSTARTED_EVENT = new Event(
        "RequestStarted",
        Arrays.<TypeReference<?>>asList(
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Uint64>(true) {},
            new TypeReference<Bytes32>(true) {},
            new TypeReference<Commitment>() {}
        )
    );

    @Deprecated
    protected DelegateeCoordinator(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DelegateeCoordinator(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DelegateeCoordinator(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        BigInteger gasPrice,
        BigInteger gasLimit
    ) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DelegateeCoordinator(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        ContractGasProvider contractGasProvider
    ) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> acceptOwnership() {
        final Function function = new Function(FUNC_ACCEPTOWNERSHIP, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> cancelRequest(byte[] requestId) {
        final Function function = new Function(
            FUNC_CANCELREQUEST,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(requestId)),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> client() {
        final Function function = new Function(
            FUNC_CLIENT,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {})
        );
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BillingConfig> getConfig() {
        final Function function = new Function(
            FUNC_GETCONFIG,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<BillingConfig>() {})
        );
        return executeRemoteCallSingleValueReturn(function, BillingConfig.class);
    }

    public RemoteFunctionCall<BigInteger> getProtocolFee() {
        final Function function = new Function(
            FUNC_GETPROTOCOLFEE,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint72>() {})
        );
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(BillingConfig _config) {
        final Function function = new Function(FUNC_INITIALIZE, Arrays.<Type>asList(_config), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> nodeResponded(byte[] param0) {
        final Function function = new Function(
            FUNC_NODERESPONDED,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {})
        );
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> prepareNextInterval(
        BigInteger subscriptionId,
        BigInteger nextInterval,
        String nodeWallet
    ) {
        final Function function = new Function(
            FUNC_PREPARENEXTINTERVAL,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Uint32(nextInterval),
                new org.web3j.abi.datatypes.Address(160, nodeWallet)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger>> proofRequests(
        byte[] param0
    ) {
        final Function function = new Function(
            FUNC_PROOFREQUESTS,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Uint64>() {},
                new TypeReference<Bytes32>() {},
                new TypeReference<Address>() {},
                new TypeReference<Address>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Address>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Uint32>() {}
            )
        );
        return new RemoteFunctionCall<Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger>>(
            function,
            new Callable<Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger>>() {
                @Override
                public Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger> call() throws Exception {
                    List<Type> results = executeCallMultipleValueReturn(function);
                    return new Tuple8<BigInteger, byte[], String, String, BigInteger, String, BigInteger, BigInteger>(
                        (BigInteger) results.get(0).getValue(),
                        (byte[]) results.get(1).getValue(),
                        (String) results.get(2).getValue(),
                        (String) results.get(3).getValue(),
                        (BigInteger) results.get(4).getValue(),
                        (String) results.get(5).getValue(),
                        (BigInteger) results.get(6).getValue(),
                        (BigInteger) results.get(7).getValue()
                    );
                }
            }
        );
    }

    public RemoteFunctionCall<BigInteger> redundancyCount(byte[] param0) {
        final Function function = new Function(
            FUNC_REDUNDANCYCOUNT,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {})
        );
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> reportComputeResult(
        BigInteger deliveryInterval,
        byte[] input,
        byte[] output,
        byte[] proof,
        byte[] commitmentData,
        String nodeWallet
    ) {
        final Function function = new Function(
            FUNC_REPORTCOMPUTERESULT,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint32(deliveryInterval),
                new org.web3j.abi.datatypes.DynamicBytes(input),
                new org.web3j.abi.datatypes.DynamicBytes(output),
                new org.web3j.abi.datatypes.DynamicBytes(proof),
                new org.web3j.abi.datatypes.DynamicBytes(commitmentData),
                new org.web3j.abi.datatypes.Address(160, nodeWallet)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reportDelegatedComputeResult(
        BigInteger nonce,
        BigInteger expiry,
        ComputeSubscription sub,
        byte[] signature,
        BigInteger deliveryInterval,
        byte[] input,
        byte[] output,
        byte[] proof,
        String nodeWallet
    ) {
        final Function function = new Function(
            FUNC_REPORTDELEGATEDCOMPUTERESULT,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint32(nonce),
                new org.web3j.abi.datatypes.generated.Uint32(expiry),
                sub,
                new org.web3j.abi.datatypes.DynamicBytes(signature),
                new org.web3j.abi.datatypes.generated.Uint32(deliveryInterval),
                new org.web3j.abi.datatypes.DynamicBytes(input),
                new org.web3j.abi.datatypes.DynamicBytes(output),
                new org.web3j.abi.datatypes.DynamicBytes(proof),
                new org.web3j.abi.datatypes.Address(160, nodeWallet)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reportVerificationResult(
        BigInteger subscriptionId,
        BigInteger interval,
        String node,
        Boolean valid
    ) {
        final Function function = new Function(
            FUNC_REPORTVERIFICATIONRESULT,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Uint32(interval),
                new org.web3j.abi.datatypes.Address(160, node),
                new org.web3j.abi.datatypes.Bool(valid)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> requestCommitments(byte[] param0) {
        final Function function = new Function(
            FUNC_REQUESTCOMMITMENTS,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {})
        );
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> startRequest(
        byte[] requestId,
        BigInteger subscriptionId,
        byte[] containerId,
        BigInteger interval,
        BigInteger redundancy,
        Boolean useDeliveryInbox,
        String feeToken,
        BigInteger feeAmount,
        String wallet,
        String verifier
    ) {
        final Function function = new Function(
            FUNC_STARTREQUEST,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Bytes32(requestId),
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Bytes32(containerId),
                new org.web3j.abi.datatypes.generated.Uint32(interval),
                new org.web3j.abi.datatypes.generated.Uint16(redundancy),
                new org.web3j.abi.datatypes.Bool(useDeliveryInbox),
                new org.web3j.abi.datatypes.Address(160, feeToken),
                new org.web3j.abi.datatypes.generated.Uint256(feeAmount),
                new org.web3j.abi.datatypes.Address(160, wallet),
                new org.web3j.abi.datatypes.Address(160, verifier)
            ),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String to) {
        final Function function = new Function(
            FUNC_TRANSFEROWNERSHIP,
            Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to)),
            Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> typeAndVersion() {
        final Function function = new Function(
            FUNC_TYPEANDVERSION,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {})
        );
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> updateConfig(BillingConfig config) {
        final Function function = new Function(FUNC_UPDATECONFIG, Arrays.<Type>asList(config), Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<ComputeDeliveredEventResponse> getComputeDeliveredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(COMPUTEDELIVERED_EVENT, transactionReceipt);
        ArrayList<ComputeDeliveredEventResponse> responses = new ArrayList<ComputeDeliveredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ComputeDeliveredEventResponse typedResponse = new ComputeDeliveredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.nodeWallet = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.numRedundantDeliveries = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ComputeDeliveredEventResponse getComputeDeliveredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(COMPUTEDELIVERED_EVENT, log);
        ComputeDeliveredEventResponse typedResponse = new ComputeDeliveredEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.nodeWallet = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.numRedundantDeliveries = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ComputeDeliveredEventResponse> computeDeliveredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getComputeDeliveredEventFromLog(log));
    }

    public Flowable<ComputeDeliveredEventResponse> computeDeliveredEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(COMPUTEDELIVERED_EVENT));
        return computeDeliveredEventFlowable(filter);
    }

    public static List<OwnershipTransferRequestedEventResponse> getOwnershipTransferRequestedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(
            OWNERSHIPTRANSFERREQUESTED_EVENT,
            transactionReceipt
        );
        ArrayList<OwnershipTransferRequestedEventResponse> responses = new ArrayList<OwnershipTransferRequestedEventResponse>(
            valueList.size()
        );
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferRequestedEventResponse getOwnershipTransferRequestedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERREQUESTED_EVENT, log);
        OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferRequestedEventFromLog(log));
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERREQUESTED_EVENT));
        return ownershipTransferRequestedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<ProofVerifiedEventResponse> getProofVerifiedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PROOFVERIFIED_EVENT, transactionReceipt);
        ArrayList<ProofVerifiedEventResponse> responses = new ArrayList<ProofVerifiedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProofVerifiedEventResponse typedResponse = new ProofVerifiedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.interval = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.node = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.valid = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.verifier = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ProofVerifiedEventResponse getProofVerifiedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PROOFVERIFIED_EVENT, log);
        ProofVerifiedEventResponse typedResponse = new ProofVerifiedEventResponse();
        typedResponse.log = log;
        typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.interval = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.node = (String) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.valid = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.verifier = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ProofVerifiedEventResponse> proofVerifiedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getProofVerifiedEventFromLog(log));
    }

    public Flowable<ProofVerifiedEventResponse> proofVerifiedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PROOFVERIFIED_EVENT));
        return proofVerifiedEventFlowable(filter);
    }

    public static List<RequestCancelledEventResponse> getRequestCancelledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTCANCELLED_EVENT, transactionReceipt);
        ArrayList<RequestCancelledEventResponse> responses = new ArrayList<RequestCancelledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestCancelledEventResponse typedResponse = new RequestCancelledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestCancelledEventResponse getRequestCancelledEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTCANCELLED_EVENT, log);
        RequestCancelledEventResponse typedResponse = new RequestCancelledEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RequestCancelledEventResponse> requestCancelledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestCancelledEventFromLog(log));
    }

    public Flowable<RequestCancelledEventResponse> requestCancelledEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTCANCELLED_EVENT));
        return requestCancelledEventFlowable(filter);
    }

    public static List<RequestStartedEventResponse> getRequestStartedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REQUESTSTARTED_EVENT, transactionReceipt);
        ArrayList<RequestStartedEventResponse> responses = new ArrayList<RequestStartedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequestStartedEventResponse typedResponse = new RequestStartedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.containerId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.commitment = (Commitment) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RequestStartedEventResponse getRequestStartedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REQUESTSTARTED_EVENT, log);
        RequestStartedEventResponse typedResponse = new RequestStartedEventResponse();
        typedResponse.log = log;
        typedResponse.requestId = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.subscriptionId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.containerId = (byte[]) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.commitment = (Commitment) eventValues.getNonIndexedValues().get(0);
        return typedResponse;
    }

    public Flowable<RequestStartedEventResponse> requestStartedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRequestStartedEventFromLog(log));
    }

    public Flowable<RequestStartedEventResponse> requestStartedEventFlowable(
        DefaultBlockParameter startBlock,
        DefaultBlockParameter endBlock
    ) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTSTARTED_EVENT));
        return requestStartedEventFlowable(filter);
    }

    @Deprecated
    public static DelegateeCoordinator load(
        String contractAddress,
        Web3j web3j,
        Credentials credentials,
        BigInteger gasPrice,
        BigInteger gasLimit
    ) {
        return new DelegateeCoordinator(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DelegateeCoordinator load(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        BigInteger gasPrice,
        BigInteger gasLimit
    ) {
        return new DelegateeCoordinator(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DelegateeCoordinator load(
        String contractAddress,
        Web3j web3j,
        Credentials credentials,
        ContractGasProvider contractGasProvider
    ) {
        return new DelegateeCoordinator(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DelegateeCoordinator load(
        String contractAddress,
        Web3j web3j,
        TransactionManager transactionManager,
        ContractGasProvider contractGasProvider
    ) {
        return new DelegateeCoordinator(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DelegateeCoordinator> deploy(
        Web3j web3j,
        Credentials credentials,
        ContractGasProvider contractGasProvider,
        String routerAddress,
        String initialOwner
    ) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(160, routerAddress),
                new org.web3j.abi.datatypes.Address(160, initialOwner)
            )
        );
        return deployRemoteCall(DelegateeCoordinator.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<DelegateeCoordinator> deploy(
        Web3j web3j,
        TransactionManager transactionManager,
        ContractGasProvider contractGasProvider,
        String routerAddress,
        String initialOwner
    ) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(160, routerAddress),
                new org.web3j.abi.datatypes.Address(160, initialOwner)
            )
        );
        return deployRemoteCall(DelegateeCoordinator.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DelegateeCoordinator> deploy(
        Web3j web3j,
        Credentials credentials,
        BigInteger gasPrice,
        BigInteger gasLimit,
        String routerAddress,
        String initialOwner
    ) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(160, routerAddress),
                new org.web3j.abi.datatypes.Address(160, initialOwner)
            )
        );
        return deployRemoteCall(DelegateeCoordinator.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DelegateeCoordinator> deploy(
        Web3j web3j,
        TransactionManager transactionManager,
        BigInteger gasPrice,
        BigInteger gasLimit,
        String routerAddress,
        String initialOwner
    ) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.Address(160, routerAddress),
                new org.web3j.abi.datatypes.Address(160, initialOwner)
            )
        );
        return deployRemoteCall(DelegateeCoordinator.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class BillingConfig extends StaticStruct {

        public BigInteger verificationTimeout;

        public String protocolFeeRecipient;

        public BigInteger protocolFee;

        public BigInteger tickNodeFee;

        public String tickNodeFeeToken;

        public BillingConfig(
            BigInteger verificationTimeout,
            String protocolFeeRecipient,
            BigInteger protocolFee,
            BigInteger tickNodeFee,
            String tickNodeFeeToken
        ) {
            super(
                new org.web3j.abi.datatypes.generated.Uint32(verificationTimeout),
                new org.web3j.abi.datatypes.Address(160, protocolFeeRecipient),
                new org.web3j.abi.datatypes.generated.Uint16(protocolFee),
                new org.web3j.abi.datatypes.generated.Uint256(tickNodeFee),
                new org.web3j.abi.datatypes.Address(160, tickNodeFeeToken)
            );
            this.verificationTimeout = verificationTimeout;
            this.protocolFeeRecipient = protocolFeeRecipient;
            this.protocolFee = protocolFee;
            this.tickNodeFee = tickNodeFee;
            this.tickNodeFeeToken = tickNodeFeeToken;
        }

        public BillingConfig(
            Uint32 verificationTimeout,
            Address protocolFeeRecipient,
            Uint16 protocolFee,
            Uint256 tickNodeFee,
            Address tickNodeFeeToken
        ) {
            super(verificationTimeout, protocolFeeRecipient, protocolFee, tickNodeFee, tickNodeFeeToken);
            this.verificationTimeout = verificationTimeout.getValue();
            this.protocolFeeRecipient = protocolFeeRecipient.getValue();
            this.protocolFee = protocolFee.getValue();
            this.tickNodeFee = tickNodeFee.getValue();
            this.tickNodeFeeToken = tickNodeFeeToken.getValue();
        }
    }

    public static class ComputeSubscription extends StaticStruct {

        public byte[] routeId;

        public byte[] containerId;

        public BigInteger feeAmount;

        public String client;

        public BigInteger activeAt;

        public BigInteger intervalSeconds;

        public BigInteger maxExecutions;

        public String wallet;

        public String feeToken;

        public String verifier;

        public BigInteger redundancy;

        public Boolean useDeliveryInbox;

        public ComputeSubscription(
            byte[] routeId,
            byte[] containerId,
            BigInteger feeAmount,
            String client,
            BigInteger activeAt,
            BigInteger intervalSeconds,
            BigInteger maxExecutions,
            String wallet,
            String feeToken,
            String verifier,
            BigInteger redundancy,
            Boolean useDeliveryInbox
        ) {
            super(
                new org.web3j.abi.datatypes.generated.Bytes32(routeId),
                new org.web3j.abi.datatypes.generated.Bytes32(containerId),
                new org.web3j.abi.datatypes.generated.Uint256(feeAmount),
                new org.web3j.abi.datatypes.Address(160, client),
                new org.web3j.abi.datatypes.generated.Uint32(activeAt),
                new org.web3j.abi.datatypes.generated.Uint32(intervalSeconds),
                new org.web3j.abi.datatypes.generated.Uint32(maxExecutions),
                new org.web3j.abi.datatypes.Address(160, wallet),
                new org.web3j.abi.datatypes.Address(160, feeToken),
                new org.web3j.abi.datatypes.Address(160, verifier),
                new org.web3j.abi.datatypes.generated.Uint16(redundancy),
                new org.web3j.abi.datatypes.Bool(useDeliveryInbox)
            );
            this.routeId = routeId;
            this.containerId = containerId;
            this.feeAmount = feeAmount;
            this.client = client;
            this.activeAt = activeAt;
            this.intervalSeconds = intervalSeconds;
            this.maxExecutions = maxExecutions;
            this.wallet = wallet;
            this.feeToken = feeToken;
            this.verifier = verifier;
            this.redundancy = redundancy;
            this.useDeliveryInbox = useDeliveryInbox;
        }

        public ComputeSubscription(
            Bytes32 routeId,
            Bytes32 containerId,
            Uint256 feeAmount,
            Address client,
            Uint32 activeAt,
            Uint32 intervalSeconds,
            Uint32 maxExecutions,
            Address wallet,
            Address feeToken,
            Address verifier,
            Uint16 redundancy,
            Bool useDeliveryInbox
        ) {
            super(
                routeId,
                containerId,
                feeAmount,
                client,
                activeAt,
                intervalSeconds,
                maxExecutions,
                wallet,
                feeToken,
                verifier,
                redundancy,
                useDeliveryInbox
            );
            this.routeId = routeId.getValue();
            this.containerId = containerId.getValue();
            this.feeAmount = feeAmount.getValue();
            this.client = client.getValue();
            this.activeAt = activeAt.getValue();
            this.intervalSeconds = intervalSeconds.getValue();
            this.maxExecutions = maxExecutions.getValue();
            this.wallet = wallet.getValue();
            this.feeToken = feeToken.getValue();
            this.verifier = verifier.getValue();
            this.redundancy = redundancy.getValue();
            this.useDeliveryInbox = useDeliveryInbox.getValue();
        }
    }

    public static class Commitment extends StaticStruct {

        public byte[] requestId;

        public BigInteger subscriptionId;

        public byte[] containerId;

        public BigInteger interval;

        public Boolean useDeliveryInbox;

        public BigInteger redundancy;

        public String walletAddress;

        public BigInteger feeAmount;

        public String feeToken;

        public String verifier;

        public String coordinator;

        public Commitment(
            byte[] requestId,
            BigInteger subscriptionId,
            byte[] containerId,
            BigInteger interval,
            Boolean useDeliveryInbox,
            BigInteger redundancy,
            String walletAddress,
            BigInteger feeAmount,
            String feeToken,
            String verifier,
            String coordinator
        ) {
            super(
                new org.web3j.abi.datatypes.generated.Bytes32(requestId),
                new org.web3j.abi.datatypes.generated.Uint64(subscriptionId),
                new org.web3j.abi.datatypes.generated.Bytes32(containerId),
                new org.web3j.abi.datatypes.generated.Uint32(interval),
                new org.web3j.abi.datatypes.Bool(useDeliveryInbox),
                new org.web3j.abi.datatypes.generated.Uint16(redundancy),
                new org.web3j.abi.datatypes.Address(160, walletAddress),
                new org.web3j.abi.datatypes.generated.Uint256(feeAmount),
                new org.web3j.abi.datatypes.Address(160, feeToken),
                new org.web3j.abi.datatypes.Address(160, verifier),
                new org.web3j.abi.datatypes.Address(160, coordinator)
            );
            this.requestId = requestId;
            this.subscriptionId = subscriptionId;
            this.containerId = containerId;
            this.interval = interval;
            this.useDeliveryInbox = useDeliveryInbox;
            this.redundancy = redundancy;
            this.walletAddress = walletAddress;
            this.feeAmount = feeAmount;
            this.feeToken = feeToken;
            this.verifier = verifier;
            this.coordinator = coordinator;
        }

        public Commitment(
            Bytes32 requestId,
            Uint64 subscriptionId,
            Bytes32 containerId,
            Uint32 interval,
            Bool useDeliveryInbox,
            Uint16 redundancy,
            Address walletAddress,
            Uint256 feeAmount,
            Address feeToken,
            Address verifier,
            Address coordinator
        ) {
            super(
                requestId,
                subscriptionId,
                containerId,
                interval,
                useDeliveryInbox,
                redundancy,
                walletAddress,
                feeAmount,
                feeToken,
                verifier,
                coordinator
            );
            this.requestId = requestId.getValue();
            this.subscriptionId = subscriptionId.getValue();
            this.containerId = containerId.getValue();
            this.interval = interval.getValue();
            this.useDeliveryInbox = useDeliveryInbox.getValue();
            this.redundancy = redundancy.getValue();
            this.walletAddress = walletAddress.getValue();
            this.feeAmount = feeAmount.getValue();
            this.feeToken = feeToken.getValue();
            this.verifier = verifier.getValue();
            this.coordinator = coordinator.getValue();
        }
    }

    public static class ComputeDeliveredEventResponse extends BaseEventResponse {

        public byte[] requestId;

        public String nodeWallet;

        public BigInteger numRedundantDeliveries;
    }

    public static class OwnershipTransferRequestedEventResponse extends BaseEventResponse {

        public String from;

        public String to;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {

        public String from;

        public String to;
    }

    public static class ProofVerifiedEventResponse extends BaseEventResponse {

        public BigInteger subscriptionId;

        public BigInteger interval;

        public String node;

        public Boolean valid;

        public String verifier;
    }

    public static class RequestCancelledEventResponse extends BaseEventResponse {

        public byte[] requestId;
    }

    public static class RequestStartedEventResponse extends BaseEventResponse {

        public byte[] requestId;

        public BigInteger subscriptionId;

        public byte[] containerId;

        public Commitment commitment;
    }
}
